// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : litex.v
// Device     : 5CEBA4F23C8
// LiteX sha1 : 7bbfe3ae
// Date       : 2024-04-16 15:59:05
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module litex (
    input  wire          altera_reserved_tck,
    input  wire          altera_reserved_tdi,
    output wire          altera_reserved_tdo,
    input  wire          altera_reserved_tms,
    input  wire   [11:0] apf_audio_buffer_fill,
    output wire   [31:0] apf_audio_bus_out,
    output wire          apf_audio_bus_wr,
    output wire          apf_audio_flush,
    output wire          apf_audio_playback_en,
    input  wire    [2:0] apf_bridge_command_result_code,
    input  wire          apf_bridge_complete_trigger,
    input  wire   [31:0] apf_bridge_current_address,
    output wire   [31:0] apf_bridge_data_offset,
    input  wire   [31:0] apf_bridge_file_size,
    output wire          apf_bridge_file_size_wr,
    output wire   [31:0] apf_bridge_length,
    output wire   [31:0] apf_bridge_new_file_size_data,
    output wire   [31:0] apf_bridge_ram_data_address,
    output wire          apf_bridge_request_getfile,
    output wire          apf_bridge_request_openfile,
    output wire          apf_bridge_request_read,
    output wire          apf_bridge_request_write,
    output wire    [3:0] apf_bridge_scaler_slot,
    output wire   [15:0] apf_bridge_slot_id,
    input  wire   [63:0] apf_id_chip_id,
    input  wire   [31:0] apf_input_cont1_joy,
    input  wire   [31:0] apf_input_cont1_key,
    input  wire   [31:0] apf_input_cont1_trig,
    input  wire   [31:0] apf_input_cont2_joy,
    input  wire   [31:0] apf_input_cont2_key,
    input  wire   [31:0] apf_input_cont2_trig,
    input  wire   [31:0] apf_input_cont3_joy,
    input  wire   [31:0] apf_input_cont3_key,
    input  wire   [31:0] apf_input_cont3_trig,
    input  wire   [31:0] apf_input_cont4_joy,
    input  wire   [31:0] apf_input_cont4_key,
    input  wire   [31:0] apf_input_cont4_trig,
    input  wire    [3:0] apf_interact_address,
    input  wire   [31:0] apf_interact_data,
    output reg    [31:0] apf_interact_q,
    input  wire          apf_interact_wr,
    input  wire   [31:0] apf_rtc_date_bcd,
    input  wire   [31:0] apf_rtc_time_bcd,
    input  wire   [31:0] apf_rtc_unix_seconds,
    input  wire          clk_sys,
    input  wire          clk_sys2x,
    input  wire          clk_sys2x_90deg,
    input  wire          clk_vid,
    input  wire          reset,
    output reg    [12:0] sdram_a,
    output reg     [1:0] sdram_ba,
    output reg           sdram_cas_n,
    output reg           sdram_cke,
    output wire          sdram_clock,
    output reg     [1:0] sdram_dm,
    inout  wire   [15:0] sdram_dq,
    output reg           sdram_ras_n,
    output reg           sdram_we_n,
    input  wire          serial_rx,
    output reg           serial_tx,
    input  wire          use_jtag,
    output reg     [4:0] vga_b,
    output wire          vga_de,
    output reg     [5:0] vga_g,
    output wire          vga_hsync,
    output reg     [4:0] vga_r,
    output wire          vga_vsync,
    input  wire          wishbone_ack,
    output wire   [29:0] wishbone_adr,
    output wire    [1:0] wishbone_bte,
    output wire    [2:0] wishbone_cti,
    output wire          wishbone_cyc,
    input  wire   [31:0] wishbone_dat_r,
    output wire   [31:0] wishbone_dat_w,
    input  wire          wishbone_err,
    output wire          wishbone_master_ack,
    input  wire   [29:0] wishbone_master_adr,
    input  wire    [1:0] wishbone_master_bte,
    input  wire    [2:0] wishbone_master_cti,
    input  wire          wishbone_master_cyc,
    output wire   [31:0] wishbone_master_dat_r,
    input  wire   [31:0] wishbone_master_dat_w,
    output wire          wishbone_master_err,
    input  wire    [3:0] wishbone_master_sel,
    input  wire          wishbone_master_stb,
    input  wire          wishbone_master_we,
    output wire    [3:0] wishbone_sel,
    output wire          wishbone_stb,
    output wire          wishbone_we
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscvSMP)
│    └─── [VexRiscvLitexSmpCluster_Cc1_Iw64Is4096Iy1_Dw64Ds4096Dy1_ITs4DTs4_Ldw32_Ood_Fpu4_Hb1_Rvc]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── sdrphy (HalfRateGENSDRAMPocketPHY)
│    └─── gensdrampocketphy_0* (GENSDRAMPocketPHY)
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    │    └─── pi1 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
└─── converter_0* (Converter)
└─── wishbone_bridge (LiteDRAMWishbone2Native)
│    └─── fsm (FSM)
└─── videophy (VideoPocketPHY)
└─── video_framebuffer_vtg (VideoTimingGenerator)
│    └─── fsm (FSM)
└─── video_framebuffer (VideoFrameBuffer)
│    └─── dma (LiteDRAMDMAReader)
│    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFO)
│    │    └─── syncfifo_1* (SyncFIFO)
│    │    │    └─── fifo (SyncFIFOBuffered)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    └─── fsm (FSM)
│    └─── conv (Converter)
│    │    └─── _downconverter_0* (_DownConverter)
│    └─── cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── fsm_0* (FSM)
└─── apf_audio (APFAudio)
└─── apf_bridge (APFBridge)
└─── apf_id (APFID)
└─── apf_input (APFInput)
└─── apf_interact (APFInteract)
└─── apf_rtc (APFRTC)
└─── apf_video (APFVideo)
└─── jtag_uart_phy (JTAGPHY)
│    └─── jtag (AlteraJTAG)
│    │    └─── tap_fsm (JTAGTAPFSM)
│    │    │    └─── fsm (FSM)
│    │    └─── [cyclonev_jtag]
│    └─── tx_cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── rx_cdc (ClockDomainCrossing)
│    │    └─── asyncfifo_0* (AsyncFIFO)
│    │    │    └─── fifo (AsyncFIFO)
│    │    │    │    └─── graycounter_0* (GrayCounter)
│    │    │    │    └─── graycounter_1* (GrayCounter)
│    └─── fsm_0* (FSM)
└─── phys_uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── combined_uart_phy (UARTPHYMultiplexer)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    │    └─── csrstatus_6* (CSRStatus)
│    │    └─── csrstatus_7* (CSRStatus)
│    │    └─── csrstatus_8* (CSRStatus)
│    │    └─── csrstatus_9* (CSRStatus)
│    │    └─── csrstatus_10* (CSRStatus)
│    │    └─── csrstatus_11* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    │    └─── csrstatus_6* (CSRStatus)
│    │    └─── csrstatus_7* (CSRStatus)
│    │    └─── csrstatus_8* (CSRStatus)
│    │    └─── csrstatus_9* (CSRStatus)
│    │    └─── csrstatus_10* (CSRStatus)
│    │    └─── csrstatus_11* (CSRStatus)
│    │    └─── csrstatus_12* (CSRStatus)
│    │    └─── csrstatus_13* (CSRStatus)
│    │    └─── csrstatus_14* (CSRStatus)
│    │    └─── csrstatus_15* (CSRStatus)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    └─── csrbank_6* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_7* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_8* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    └─── csrbank_9* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstatus_3* (CSRStatus)
│    └─── csrbank_10* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
│    └─── csrbank_11* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_1* (CSRStatus)
│    └─── csrbank_12* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstorage_5* (CSRStorage)
│    │    └─── csrstorage_6* (CSRStorage)
│    │    └─── csrstorage_7* (CSRStorage)
│    │    └─── csrstorage_8* (CSRStorage)
└─── csr_interconnect (InterconnectShared)
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [DFF]
└─── [ALTDDIO_OUT]
└─── [DFF]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          apf_bridge_master_ack;
wire   [29:0] apf_bridge_master_adr;
wire    [1:0] apf_bridge_master_bte;
wire    [2:0] apf_bridge_master_cti;
wire          apf_bridge_master_cyc;
wire   [31:0] apf_bridge_master_dat_r;
wire   [31:0] apf_bridge_master_dat_w;
wire          apf_bridge_master_err;
wire    [3:0] apf_bridge_master_sel;
wire          apf_bridge_master_stb;
wire          apf_bridge_master_we;
reg           apfid_re = 1'd0;
wire   [63:0] apfid_status;
wire          apfid_we;
reg    [29:0] apfvideo_frame_counter = 30'd0;
reg           apfvideo_prev_vblank_triggered = 1'd0;
reg           apfvideo_re = 1'd0;
reg    [31:0] apfvideo_status = 32'd0;
reg           apfvideo_vblank = 1'd0;
reg           apfvideo_vblank_status = 1'd0;
reg           apfvideo_vblank_triggered = 1'd0;
wire          apfvideo_we;
wire          ars_cd_from10223_rst_meta;
wire          ars_cd_from10374_rst_meta;
wire          ars_cd_jtag_rst_meta;
wire          ars_cd_to10223_rst_meta;
wire          ars_cd_to10374_rst_meta;
reg     [2:0] bankmachine0_next_state = 3'd0;
reg     [2:0] bankmachine0_state = 3'd0;
reg     [2:0] bankmachine1_next_state = 3'd0;
reg     [2:0] bankmachine1_state = 3'd0;
reg     [2:0] bankmachine2_next_state = 3'd0;
reg     [2:0] bankmachine2_state = 3'd0;
reg     [2:0] bankmachine3_next_state = 3'd0;
reg     [2:0] bankmachine3_state = 3'd0;
reg           basesoc_aborted = 1'd0;
reg           basesoc_aborted_litedramwishbone2native_next_value = 1'd0;
reg           basesoc_aborted_litedramwishbone2native_next_value_ce = 1'd0;
wire   [14:0] basesoc_basesoc_basesoc_adr;
reg           basesoc_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] basesoc_basesoc_basesoc_dat_r;
reg           basesoc_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_basesoc_basesoc_ram_bus_adr;
wire    [1:0] basesoc_basesoc_basesoc_ram_bus_bte;
wire    [2:0] basesoc_basesoc_basesoc_ram_bus_cti;
wire          basesoc_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] basesoc_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] basesoc_basesoc_basesoc_ram_bus_dat_w;
reg           basesoc_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] basesoc_basesoc_basesoc_ram_bus_sel;
wire          basesoc_basesoc_basesoc_ram_bus_stb;
wire          basesoc_basesoc_basesoc_ram_bus_we;
wire          basesoc_basesoc_bus_error;
reg    [31:0] basesoc_basesoc_bus_errors = 32'd0;
reg           basesoc_basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_basesoc_bus_errors_status;
wire          basesoc_basesoc_bus_errors_we;
wire          basesoc_basesoc_clintbus_ack;
wire   [29:0] basesoc_basesoc_clintbus_adr;
wire    [1:0] basesoc_basesoc_clintbus_bte;
wire    [2:0] basesoc_basesoc_clintbus_cti;
wire          basesoc_basesoc_clintbus_cyc;
wire   [31:0] basesoc_basesoc_clintbus_dat_r;
wire   [31:0] basesoc_basesoc_clintbus_dat_w;
reg           basesoc_basesoc_clintbus_err = 1'd0;
wire    [3:0] basesoc_basesoc_clintbus_sel;
wire          basesoc_basesoc_clintbus_stb;
wire          basesoc_basesoc_clintbus_we;
wire          basesoc_basesoc_cpu_rst;
reg           basesoc_basesoc_en_re = 1'd0;
reg           basesoc_basesoc_en_storage = 1'd0;
reg           basesoc_basesoc_enable_re = 1'd0;
reg           basesoc_basesoc_enable_storage = 1'd0;
reg    [31:0] basesoc_basesoc_interrupt = 32'd0;
wire          basesoc_basesoc_irq;
reg           basesoc_basesoc_jtag_capture = 1'd0;
reg           basesoc_basesoc_jtag_clk = 1'd0;
reg           basesoc_basesoc_jtag_enable = 1'd0;
reg           basesoc_basesoc_jtag_reset = 1'd0;
reg           basesoc_basesoc_jtag_shift = 1'd0;
reg           basesoc_basesoc_jtag_tdi = 1'd0;
wire          basesoc_basesoc_jtag_tdo;
reg           basesoc_basesoc_jtag_update = 1'd0;
reg           basesoc_basesoc_load_re = 1'd0;
reg    [31:0] basesoc_basesoc_load_storage = 32'd0;
wire          basesoc_basesoc_pbus_ack;
wire   [29:0] basesoc_basesoc_pbus_adr;
wire    [1:0] basesoc_basesoc_pbus_bte;
wire    [2:0] basesoc_basesoc_pbus_cti;
wire          basesoc_basesoc_pbus_cyc;
wire   [31:0] basesoc_basesoc_pbus_dat_r;
wire   [31:0] basesoc_basesoc_pbus_dat_w;
wire          basesoc_basesoc_pbus_err;
wire    [3:0] basesoc_basesoc_pbus_sel;
wire          basesoc_basesoc_pbus_stb;
wire          basesoc_basesoc_pbus_we;
reg           basesoc_basesoc_pending_r = 1'd0;
reg           basesoc_basesoc_pending_re = 1'd0;
reg           basesoc_basesoc_pending_status = 1'd0;
wire          basesoc_basesoc_pending_we;
wire          basesoc_basesoc_plicbus_ack;
wire   [29:0] basesoc_basesoc_plicbus_adr;
wire    [1:0] basesoc_basesoc_plicbus_bte;
wire    [2:0] basesoc_basesoc_plicbus_cti;
wire          basesoc_basesoc_plicbus_cyc;
wire   [31:0] basesoc_basesoc_plicbus_dat_r;
wire   [31:0] basesoc_basesoc_plicbus_dat_w;
reg           basesoc_basesoc_plicbus_err = 1'd0;
wire    [3:0] basesoc_basesoc_plicbus_sel;
wire          basesoc_basesoc_plicbus_stb;
wire          basesoc_basesoc_plicbus_we;
wire   [10:0] basesoc_basesoc_ram_adr;
reg           basesoc_basesoc_ram_adr_burst = 1'd0;
reg           basesoc_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] basesoc_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] basesoc_basesoc_ram_bus_ram_bus_cti;
wire          basesoc_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] basesoc_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] basesoc_basesoc_ram_bus_ram_bus_dat_w;
reg           basesoc_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] basesoc_basesoc_ram_bus_ram_bus_sel;
wire          basesoc_basesoc_ram_bus_ram_bus_stb;
wire          basesoc_basesoc_ram_bus_ram_bus_we;
wire   [31:0] basesoc_basesoc_ram_dat_r;
wire   [31:0] basesoc_basesoc_ram_dat_w;
reg     [3:0] basesoc_basesoc_ram_we = 4'd0;
reg           basesoc_basesoc_reload_re = 1'd0;
reg    [31:0] basesoc_basesoc_reload_storage = 32'd0;
wire          basesoc_basesoc_reset;
reg           basesoc_basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_basesoc_reset_storage = 2'd0;
reg           basesoc_basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_basesoc_scratch_storage = 32'd305419896;
reg           basesoc_basesoc_soc_rst = 1'd0;
reg           basesoc_basesoc_status_re = 1'd0;
reg           basesoc_basesoc_status_status = 1'd0;
wire          basesoc_basesoc_status_we;
reg           basesoc_basesoc_update_value_re = 1'd0;
reg           basesoc_basesoc_update_value_storage = 1'd0;
reg    [31:0] basesoc_basesoc_value = 32'd0;
reg           basesoc_basesoc_value_re = 1'd0;
reg    [31:0] basesoc_basesoc_value_status = 32'd0;
wire          basesoc_basesoc_value_we;
wire          basesoc_basesoc_zero0;
wire          basesoc_basesoc_zero1;
wire          basesoc_basesoc_zero2;
reg           basesoc_basesoc_zero_clear = 1'd0;
reg           basesoc_basesoc_zero_pending = 1'd0;
wire          basesoc_basesoc_zero_status;
wire          basesoc_basesoc_zero_trigger;
reg           basesoc_basesoc_zero_trigger_d = 1'd0;
reg           basesoc_dbus_cmd_first = 1'd0;
reg           basesoc_dbus_cmd_last = 1'd0;
wire   [31:0] basesoc_dbus_cmd_payload_addr;
wire          basesoc_dbus_cmd_payload_we;
wire          basesoc_dbus_cmd_ready;
wire          basesoc_dbus_cmd_valid;
wire          basesoc_dbus_rdata_first;
wire          basesoc_dbus_rdata_last;
wire   [31:0] basesoc_dbus_rdata_payload_data;
wire          basesoc_dbus_rdata_ready;
wire          basesoc_dbus_rdata_valid;
reg           basesoc_dbus_wdata_first = 1'd0;
reg           basesoc_dbus_wdata_last = 1'd0;
wire   [31:0] basesoc_dbus_wdata_payload_data;
wire    [3:0] basesoc_dbus_wdata_payload_we;
wire          basesoc_dbus_wdata_ready;
wire          basesoc_dbus_wdata_valid;
reg           basesoc_ibus_cmd_first = 1'd0;
reg           basesoc_ibus_cmd_last = 1'd0;
wire   [31:0] basesoc_ibus_cmd_payload_addr;
wire          basesoc_ibus_cmd_payload_we;
wire          basesoc_ibus_cmd_ready;
wire          basesoc_ibus_cmd_valid;
wire          basesoc_ibus_rdata_first;
wire          basesoc_ibus_rdata_last;
wire   [31:0] basesoc_ibus_rdata_payload_data;
wire          basesoc_ibus_rdata_ready;
wire          basesoc_ibus_rdata_valid;
reg           basesoc_ibus_wdata_first = 1'd0;
reg           basesoc_ibus_wdata_last = 1'd0;
wire   [31:0] basesoc_ibus_wdata_payload_data;
wire    [3:0] basesoc_ibus_wdata_payload_we;
wire          basesoc_ibus_wdata_ready;
wire          basesoc_ibus_wdata_valid;
reg           basesoc_is_ongoing = 1'd0;
reg     [2:0] basesoc_jtag_uart_phy_count = 3'd0;
reg     [2:0] basesoc_jtag_uart_phy_count_jtagphy_next_value2 = 3'd0;
reg           basesoc_jtag_uart_phy_count_jtagphy_next_value_ce2 = 1'd0;
reg     [7:0] basesoc_jtag_uart_phy_data = 8'd0;
reg     [7:0] basesoc_jtag_uart_phy_data_jtagphy_next_value1 = 8'd0;
reg           basesoc_jtag_uart_phy_data_jtagphy_next_value_ce1 = 1'd0;
wire          basesoc_jtag_uart_phy_fsm_reset;
wire          basesoc_jtag_uart_phy_jtag_altera_reserved_tck;
wire          basesoc_jtag_uart_phy_jtag_altera_reserved_tdi;
wire          basesoc_jtag_uart_phy_jtag_altera_reserved_tdo;
wire          basesoc_jtag_uart_phy_jtag_altera_reserved_tms;
reg           basesoc_jtag_uart_phy_jtag_capture = 1'd0;
wire          basesoc_jtag_uart_phy_jtag_drck;
reg           basesoc_jtag_uart_phy_jtag_ongoing0 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing1 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing10 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing11 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing12 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing13 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing14 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing15 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing2 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing3 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing4 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing5 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing6 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing7 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing8 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_ongoing9 = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_reset = 1'd0;
wire          basesoc_jtag_uart_phy_jtag_runtest;
wire          basesoc_jtag_uart_phy_jtag_sel;
wire          basesoc_jtag_uart_phy_jtag_shift;
wire          basesoc_jtag_uart_phy_jtag_tck;
wire          basesoc_jtag_uart_phy_jtag_tckutap;
wire          basesoc_jtag_uart_phy_jtag_tdi;
wire          basesoc_jtag_uart_phy_jtag_tdiutap;
reg           basesoc_jtag_uart_phy_jtag_tdo = 1'd0;
reg           basesoc_jtag_uart_phy_jtag_tdouser = 1'd0;
wire          basesoc_jtag_uart_phy_jtag_tms;
wire          basesoc_jtag_uart_phy_jtag_tmsutap;
wire          basesoc_jtag_uart_phy_jtag_update;
reg           basesoc_jtag_uart_phy_ready = 1'd0;
reg           basesoc_jtag_uart_phy_ready_jtagphy_next_value3 = 1'd0;
reg           basesoc_jtag_uart_phy_ready_jtagphy_next_value_ce3 = 1'd0;
wire          basesoc_jtag_uart_phy_rx_cdc_cd_rst;
wire    [9:0] basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_din;
wire    [9:0] basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_dout;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_re;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_readable;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_we;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_writable;
wire    [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_consume_wdomain;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_first;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_last;
wire    [7:0] basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_payload_data;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_first;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_last;
wire    [7:0] basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_payload_data;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_ce;
reg     [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next;
reg     [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_ce;
reg     [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next;
reg     [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] basesoc_jtag_uart_phy_rx_cdc_cdc_produce_rdomain;
wire    [1:0] basesoc_jtag_uart_phy_rx_cdc_cdc_rdport_adr;
wire    [9:0] basesoc_jtag_uart_phy_rx_cdc_cdc_rdport_dat_r;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_sink_first;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_sink_last;
wire    [7:0] basesoc_jtag_uart_phy_rx_cdc_cdc_sink_payload_data;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_sink_ready;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_sink_valid;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_source_first;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_source_last;
wire    [7:0] basesoc_jtag_uart_phy_rx_cdc_cdc_source_payload_data;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_source_ready;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_source_valid;
wire    [1:0] basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_adr;
wire    [9:0] basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_dat_r;
wire    [9:0] basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_dat_w;
wire          basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_we;
reg           basesoc_jtag_uart_phy_rx_cdc_sink_sink_first = 1'd0;
reg           basesoc_jtag_uart_phy_rx_cdc_sink_sink_last = 1'd0;
reg     [7:0] basesoc_jtag_uart_phy_rx_cdc_sink_sink_payload_data = 8'd0;
wire          basesoc_jtag_uart_phy_rx_cdc_sink_sink_ready;
reg           basesoc_jtag_uart_phy_rx_cdc_sink_sink_valid = 1'd0;
wire          basesoc_jtag_uart_phy_rx_cdc_source_source_first;
wire          basesoc_jtag_uart_phy_rx_cdc_source_source_last;
wire    [7:0] basesoc_jtag_uart_phy_rx_cdc_source_source_payload_data;
wire          basesoc_jtag_uart_phy_rx_cdc_source_source_ready;
wire          basesoc_jtag_uart_phy_rx_cdc_source_source_valid;
reg           basesoc_jtag_uart_phy_sink_first = 1'd0;
reg           basesoc_jtag_uart_phy_sink_last = 1'd0;
reg     [7:0] basesoc_jtag_uart_phy_sink_payload_data = 8'd0;
reg           basesoc_jtag_uart_phy_sink_ready = 1'd0;
reg           basesoc_jtag_uart_phy_sink_valid = 1'd0;
wire          basesoc_jtag_uart_phy_source_first;
wire          basesoc_jtag_uart_phy_source_last;
wire    [7:0] basesoc_jtag_uart_phy_source_payload_data;
reg           basesoc_jtag_uart_phy_source_ready = 1'd0;
wire          basesoc_jtag_uart_phy_source_valid;
wire          basesoc_jtag_uart_phy_tx_cdc_cd_rst;
wire    [9:0] basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_din;
wire    [9:0] basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_dout;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_re;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_readable;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_we;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_writable;
wire    [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_consume_wdomain;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_first;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_last;
wire    [7:0] basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_payload_data;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_first;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_last;
wire    [7:0] basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_payload_data;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_ce;
reg     [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next;
reg     [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_ce;
reg     [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next;
reg     [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] basesoc_jtag_uart_phy_tx_cdc_cdc_produce_rdomain;
wire    [1:0] basesoc_jtag_uart_phy_tx_cdc_cdc_rdport_adr;
wire    [9:0] basesoc_jtag_uart_phy_tx_cdc_cdc_rdport_dat_r;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_sink_first;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_sink_last;
wire    [7:0] basesoc_jtag_uart_phy_tx_cdc_cdc_sink_payload_data;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_sink_ready;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_sink_valid;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_source_first;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_source_last;
wire    [7:0] basesoc_jtag_uart_phy_tx_cdc_cdc_source_payload_data;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_source_ready;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_source_valid;
wire    [1:0] basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_adr;
wire    [9:0] basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_dat_r;
wire    [9:0] basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_dat_w;
wire          basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_we;
wire          basesoc_jtag_uart_phy_tx_cdc_sink_sink_first;
wire          basesoc_jtag_uart_phy_tx_cdc_sink_sink_last;
wire    [7:0] basesoc_jtag_uart_phy_tx_cdc_sink_sink_payload_data;
wire          basesoc_jtag_uart_phy_tx_cdc_sink_sink_ready;
wire          basesoc_jtag_uart_phy_tx_cdc_sink_sink_valid;
wire          basesoc_jtag_uart_phy_tx_cdc_source_source_first;
wire          basesoc_jtag_uart_phy_tx_cdc_source_source_last;
wire    [7:0] basesoc_jtag_uart_phy_tx_cdc_source_source_payload_data;
reg           basesoc_jtag_uart_phy_tx_cdc_source_source_ready = 1'd0;
wire          basesoc_jtag_uart_phy_tx_cdc_source_source_valid;
reg           basesoc_jtag_uart_phy_valid = 1'd0;
reg           basesoc_jtag_uart_phy_valid_jtagphy_next_value0 = 1'd0;
reg           basesoc_jtag_uart_phy_valid_jtagphy_next_value_ce0 = 1'd0;
reg           basesoc_litedram_wb_ack = 1'd0;
wire   [29:0] basesoc_litedram_wb_adr;
wire    [1:0] basesoc_litedram_wb_bte;
wire    [2:0] basesoc_litedram_wb_cti;
wire          basesoc_litedram_wb_cyc;
reg    [31:0] basesoc_litedram_wb_dat_r = 32'd0;
wire   [31:0] basesoc_litedram_wb_dat_w;
reg           basesoc_litedram_wb_err = 1'd0;
wire    [3:0] basesoc_litedram_wb_sel;
wire          basesoc_litedram_wb_stb;
wire          basesoc_litedram_wb_we;
wire          basesoc_litedramcrossbar_cmd_last;
wire   [23:0] basesoc_litedramcrossbar_cmd_payload_addr;
wire          basesoc_litedramcrossbar_cmd_payload_we;
wire          basesoc_litedramcrossbar_cmd_ready;
wire          basesoc_litedramcrossbar_cmd_valid;
reg           basesoc_litedramcrossbar_rdata_first = 1'd0;
reg           basesoc_litedramcrossbar_rdata_last = 1'd0;
wire   [31:0] basesoc_litedramcrossbar_rdata_payload_data;
wire          basesoc_litedramcrossbar_rdata_ready;
wire          basesoc_litedramcrossbar_rdata_valid;
reg    [31:0] basesoc_litedramcrossbar_wdata_payload_data = 32'd0;
reg     [3:0] basesoc_litedramcrossbar_wdata_payload_we = 4'd0;
wire          basesoc_litedramcrossbar_wdata_ready;
wire          basesoc_litedramnativeport0_cmd_first;
wire          basesoc_litedramnativeport0_cmd_last;
wire   [23:0] basesoc_litedramnativeport0_cmd_payload_addr;
wire          basesoc_litedramnativeport0_cmd_payload_we;
wire          basesoc_litedramnativeport0_cmd_ready;
wire          basesoc_litedramnativeport0_cmd_valid;
reg           basesoc_litedramnativeport0_rdata_first = 1'd0;
reg           basesoc_litedramnativeport0_rdata_last = 1'd0;
wire   [31:0] basesoc_litedramnativeport0_rdata_payload_data;
wire          basesoc_litedramnativeport0_rdata_ready;
wire          basesoc_litedramnativeport0_rdata_valid;
wire          basesoc_litedramnativeport0_wdata_first;
wire          basesoc_litedramnativeport0_wdata_last;
wire   [31:0] basesoc_litedramnativeport0_wdata_payload_data;
wire    [3:0] basesoc_litedramnativeport0_wdata_payload_we;
wire          basesoc_litedramnativeport0_wdata_ready;
wire          basesoc_litedramnativeport0_wdata_valid;
wire          basesoc_litedramnativeport1_cmd_first;
wire          basesoc_litedramnativeport1_cmd_last;
wire   [23:0] basesoc_litedramnativeport1_cmd_payload_addr;
wire          basesoc_litedramnativeport1_cmd_payload_we;
wire          basesoc_litedramnativeport1_cmd_ready;
wire          basesoc_litedramnativeport1_cmd_valid;
reg           basesoc_litedramnativeport1_rdata_first = 1'd0;
reg           basesoc_litedramnativeport1_rdata_last = 1'd0;
wire   [31:0] basesoc_litedramnativeport1_rdata_payload_data;
wire          basesoc_litedramnativeport1_rdata_ready;
wire          basesoc_litedramnativeport1_rdata_valid;
wire          basesoc_litedramnativeport1_wdata_first;
wire          basesoc_litedramnativeport1_wdata_last;
wire   [31:0] basesoc_litedramnativeport1_wdata_payload_data;
wire    [3:0] basesoc_litedramnativeport1_wdata_payload_we;
wire          basesoc_litedramnativeport1_wdata_ready;
wire          basesoc_litedramnativeport1_wdata_valid;
wire          basesoc_litedramnativeport2_cmd_last;
wire   [23:0] basesoc_litedramnativeport2_cmd_payload_addr;
wire          basesoc_litedramnativeport2_cmd_payload_we;
wire          basesoc_litedramnativeport2_cmd_ready;
reg           basesoc_litedramnativeport2_cmd_valid = 1'd0;
wire          basesoc_litedramnativeport2_flush;
wire   [31:0] basesoc_litedramnativeport2_rdata_payload_data;
wire          basesoc_litedramnativeport2_rdata_ready;
wire          basesoc_litedramnativeport2_rdata_valid;
wire   [31:0] basesoc_litedramnativeport2_wdata_payload_data;
wire    [3:0] basesoc_litedramnativeport2_wdata_payload_we;
wire          basesoc_litedramnativeport2_wdata_ready;
reg           basesoc_litedramnativeport2_wdata_valid = 1'd0;
reg     [3:0] basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_rx_phase = 32'd0;
wire          basesoc_rx_rx;
reg           basesoc_rx_rx_d = 1'd0;
reg           basesoc_rx_source_first = 1'd0;
reg           basesoc_rx_source_last = 1'd0;
reg     [7:0] basesoc_rx_source_payload_data = 8'd0;
reg           basesoc_rx_source_ready = 1'd0;
reg           basesoc_rx_source_valid = 1'd0;
reg           basesoc_rx_tick = 1'd0;
reg           basesoc_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [12:0] basesoc_sdram_bankmachine0_cmd_payload_a = 13'd0;
wire    [1:0] basesoc_sdram_bankmachine0_cmd_payload_ba;
reg           basesoc_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine0_consume = 3'd0;
wire          basesoc_sdram_bankmachine0_do_read;
wire          basesoc_sdram_bankmachine0_fifo_in_first;
wire          basesoc_sdram_bankmachine0_fifo_in_last;
wire   [21:0] basesoc_sdram_bankmachine0_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine0_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine0_fifo_out_first;
wire          basesoc_sdram_bankmachine0_fifo_out_last;
wire   [21:0] basesoc_sdram_bankmachine0_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine0_level = 4'd0;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_last;
wire   [21:0] basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [21:0] basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr = 22'd0;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine0_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine0_rdport_adr;
wire   [24:0] basesoc_sdram_bankmachine0_rdport_dat_r;
reg           basesoc_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine0_refresh_req;
reg           basesoc_sdram_bankmachine0_replace = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine0_req_addr;
wire          basesoc_sdram_bankmachine0_req_lock;
reg           basesoc_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine0_req_ready;
wire          basesoc_sdram_bankmachine0_req_valid;
reg           basesoc_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_req_we;
reg    [12:0] basesoc_sdram_bankmachine0_row = 13'd0;
reg           basesoc_sdram_bankmachine0_row_close = 1'd0;
reg           basesoc_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine0_row_hit;
reg           basesoc_sdram_bankmachine0_row_open = 1'd0;
reg           basesoc_sdram_bankmachine0_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine0_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine0_sink_last = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine0_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_sink_payload_we;
wire          basesoc_sdram_bankmachine0_sink_ready;
wire          basesoc_sdram_bankmachine0_sink_sink_first;
wire          basesoc_sdram_bankmachine0_sink_sink_last;
wire   [21:0] basesoc_sdram_bankmachine0_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine0_sink_sink_ready;
wire          basesoc_sdram_bankmachine0_sink_sink_valid;
wire          basesoc_sdram_bankmachine0_sink_valid;
wire          basesoc_sdram_bankmachine0_source_first;
wire          basesoc_sdram_bankmachine0_source_last;
wire   [21:0] basesoc_sdram_bankmachine0_source_payload_addr;
wire          basesoc_sdram_bankmachine0_source_payload_we;
wire          basesoc_sdram_bankmachine0_source_ready;
wire          basesoc_sdram_bankmachine0_source_source_first;
wire          basesoc_sdram_bankmachine0_source_source_last;
wire   [21:0] basesoc_sdram_bankmachine0_source_source_payload_addr;
wire          basesoc_sdram_bankmachine0_source_source_payload_we;
wire          basesoc_sdram_bankmachine0_source_source_ready;
wire          basesoc_sdram_bankmachine0_source_source_valid;
wire          basesoc_sdram_bankmachine0_source_valid;
wire   [24:0] basesoc_sdram_bankmachine0_syncfifo0_din;
wire   [24:0] basesoc_sdram_bankmachine0_syncfifo0_dout;
wire          basesoc_sdram_bankmachine0_syncfifo0_re;
wire          basesoc_sdram_bankmachine0_syncfifo0_readable;
wire          basesoc_sdram_bankmachine0_syncfifo0_we;
wire          basesoc_sdram_bankmachine0_syncfifo0_writable;
reg     [1:0] basesoc_sdram_bankmachine0_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine0_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_trascon_valid;
reg     [2:0] basesoc_sdram_bankmachine0_trccon_count = 3'd0;
reg           basesoc_sdram_bankmachine0_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_trccon_valid;
reg     [2:0] basesoc_sdram_bankmachine0_twtpcon_count = 3'd0;
reg           basesoc_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [24:0] basesoc_sdram_bankmachine0_wrport_dat_r;
wire   [24:0] basesoc_sdram_bankmachine0_wrport_dat_w;
wire          basesoc_sdram_bankmachine0_wrport_we;
reg           basesoc_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [12:0] basesoc_sdram_bankmachine1_cmd_payload_a = 13'd0;
wire    [1:0] basesoc_sdram_bankmachine1_cmd_payload_ba;
reg           basesoc_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine1_consume = 3'd0;
wire          basesoc_sdram_bankmachine1_do_read;
wire          basesoc_sdram_bankmachine1_fifo_in_first;
wire          basesoc_sdram_bankmachine1_fifo_in_last;
wire   [21:0] basesoc_sdram_bankmachine1_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine1_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine1_fifo_out_first;
wire          basesoc_sdram_bankmachine1_fifo_out_last;
wire   [21:0] basesoc_sdram_bankmachine1_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine1_level = 4'd0;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_last;
wire   [21:0] basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [21:0] basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr = 22'd0;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine1_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine1_rdport_adr;
wire   [24:0] basesoc_sdram_bankmachine1_rdport_dat_r;
reg           basesoc_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine1_refresh_req;
reg           basesoc_sdram_bankmachine1_replace = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine1_req_addr;
wire          basesoc_sdram_bankmachine1_req_lock;
reg           basesoc_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine1_req_ready;
wire          basesoc_sdram_bankmachine1_req_valid;
reg           basesoc_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_req_we;
reg    [12:0] basesoc_sdram_bankmachine1_row = 13'd0;
reg           basesoc_sdram_bankmachine1_row_close = 1'd0;
reg           basesoc_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine1_row_hit;
reg           basesoc_sdram_bankmachine1_row_open = 1'd0;
reg           basesoc_sdram_bankmachine1_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine1_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine1_sink_last = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine1_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_sink_payload_we;
wire          basesoc_sdram_bankmachine1_sink_ready;
wire          basesoc_sdram_bankmachine1_sink_sink_first;
wire          basesoc_sdram_bankmachine1_sink_sink_last;
wire   [21:0] basesoc_sdram_bankmachine1_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine1_sink_sink_ready;
wire          basesoc_sdram_bankmachine1_sink_sink_valid;
wire          basesoc_sdram_bankmachine1_sink_valid;
wire          basesoc_sdram_bankmachine1_source_first;
wire          basesoc_sdram_bankmachine1_source_last;
wire   [21:0] basesoc_sdram_bankmachine1_source_payload_addr;
wire          basesoc_sdram_bankmachine1_source_payload_we;
wire          basesoc_sdram_bankmachine1_source_ready;
wire          basesoc_sdram_bankmachine1_source_source_first;
wire          basesoc_sdram_bankmachine1_source_source_last;
wire   [21:0] basesoc_sdram_bankmachine1_source_source_payload_addr;
wire          basesoc_sdram_bankmachine1_source_source_payload_we;
wire          basesoc_sdram_bankmachine1_source_source_ready;
wire          basesoc_sdram_bankmachine1_source_source_valid;
wire          basesoc_sdram_bankmachine1_source_valid;
wire   [24:0] basesoc_sdram_bankmachine1_syncfifo1_din;
wire   [24:0] basesoc_sdram_bankmachine1_syncfifo1_dout;
wire          basesoc_sdram_bankmachine1_syncfifo1_re;
wire          basesoc_sdram_bankmachine1_syncfifo1_readable;
wire          basesoc_sdram_bankmachine1_syncfifo1_we;
wire          basesoc_sdram_bankmachine1_syncfifo1_writable;
reg     [1:0] basesoc_sdram_bankmachine1_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine1_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_trascon_valid;
reg     [2:0] basesoc_sdram_bankmachine1_trccon_count = 3'd0;
reg           basesoc_sdram_bankmachine1_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_trccon_valid;
reg     [2:0] basesoc_sdram_bankmachine1_twtpcon_count = 3'd0;
reg           basesoc_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [24:0] basesoc_sdram_bankmachine1_wrport_dat_r;
wire   [24:0] basesoc_sdram_bankmachine1_wrport_dat_w;
wire          basesoc_sdram_bankmachine1_wrport_we;
reg           basesoc_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [12:0] basesoc_sdram_bankmachine2_cmd_payload_a = 13'd0;
wire    [1:0] basesoc_sdram_bankmachine2_cmd_payload_ba;
reg           basesoc_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine2_consume = 3'd0;
wire          basesoc_sdram_bankmachine2_do_read;
wire          basesoc_sdram_bankmachine2_fifo_in_first;
wire          basesoc_sdram_bankmachine2_fifo_in_last;
wire   [21:0] basesoc_sdram_bankmachine2_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine2_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine2_fifo_out_first;
wire          basesoc_sdram_bankmachine2_fifo_out_last;
wire   [21:0] basesoc_sdram_bankmachine2_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine2_level = 4'd0;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_last;
wire   [21:0] basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [21:0] basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr = 22'd0;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine2_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine2_rdport_adr;
wire   [24:0] basesoc_sdram_bankmachine2_rdport_dat_r;
reg           basesoc_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine2_refresh_req;
reg           basesoc_sdram_bankmachine2_replace = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine2_req_addr;
wire          basesoc_sdram_bankmachine2_req_lock;
reg           basesoc_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine2_req_ready;
wire          basesoc_sdram_bankmachine2_req_valid;
reg           basesoc_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_req_we;
reg    [12:0] basesoc_sdram_bankmachine2_row = 13'd0;
reg           basesoc_sdram_bankmachine2_row_close = 1'd0;
reg           basesoc_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine2_row_hit;
reg           basesoc_sdram_bankmachine2_row_open = 1'd0;
reg           basesoc_sdram_bankmachine2_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine2_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine2_sink_last = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine2_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_sink_payload_we;
wire          basesoc_sdram_bankmachine2_sink_ready;
wire          basesoc_sdram_bankmachine2_sink_sink_first;
wire          basesoc_sdram_bankmachine2_sink_sink_last;
wire   [21:0] basesoc_sdram_bankmachine2_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine2_sink_sink_ready;
wire          basesoc_sdram_bankmachine2_sink_sink_valid;
wire          basesoc_sdram_bankmachine2_sink_valid;
wire          basesoc_sdram_bankmachine2_source_first;
wire          basesoc_sdram_bankmachine2_source_last;
wire   [21:0] basesoc_sdram_bankmachine2_source_payload_addr;
wire          basesoc_sdram_bankmachine2_source_payload_we;
wire          basesoc_sdram_bankmachine2_source_ready;
wire          basesoc_sdram_bankmachine2_source_source_first;
wire          basesoc_sdram_bankmachine2_source_source_last;
wire   [21:0] basesoc_sdram_bankmachine2_source_source_payload_addr;
wire          basesoc_sdram_bankmachine2_source_source_payload_we;
wire          basesoc_sdram_bankmachine2_source_source_ready;
wire          basesoc_sdram_bankmachine2_source_source_valid;
wire          basesoc_sdram_bankmachine2_source_valid;
wire   [24:0] basesoc_sdram_bankmachine2_syncfifo2_din;
wire   [24:0] basesoc_sdram_bankmachine2_syncfifo2_dout;
wire          basesoc_sdram_bankmachine2_syncfifo2_re;
wire          basesoc_sdram_bankmachine2_syncfifo2_readable;
wire          basesoc_sdram_bankmachine2_syncfifo2_we;
wire          basesoc_sdram_bankmachine2_syncfifo2_writable;
reg     [1:0] basesoc_sdram_bankmachine2_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine2_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_trascon_valid;
reg     [2:0] basesoc_sdram_bankmachine2_trccon_count = 3'd0;
reg           basesoc_sdram_bankmachine2_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_trccon_valid;
reg     [2:0] basesoc_sdram_bankmachine2_twtpcon_count = 3'd0;
reg           basesoc_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [24:0] basesoc_sdram_bankmachine2_wrport_dat_r;
wire   [24:0] basesoc_sdram_bankmachine2_wrport_dat_w;
wire          basesoc_sdram_bankmachine2_wrport_we;
reg           basesoc_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [12:0] basesoc_sdram_bankmachine3_cmd_payload_a = 13'd0;
wire    [1:0] basesoc_sdram_bankmachine3_cmd_payload_ba;
reg           basesoc_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine3_consume = 3'd0;
wire          basesoc_sdram_bankmachine3_do_read;
wire          basesoc_sdram_bankmachine3_fifo_in_first;
wire          basesoc_sdram_bankmachine3_fifo_in_last;
wire   [21:0] basesoc_sdram_bankmachine3_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine3_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine3_fifo_out_first;
wire          basesoc_sdram_bankmachine3_fifo_out_last;
wire   [21:0] basesoc_sdram_bankmachine3_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine3_level = 4'd0;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_last;
wire   [21:0] basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [21:0] basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr = 22'd0;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine3_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine3_rdport_adr;
wire   [24:0] basesoc_sdram_bankmachine3_rdport_dat_r;
reg           basesoc_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine3_refresh_req;
reg           basesoc_sdram_bankmachine3_replace = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine3_req_addr;
wire          basesoc_sdram_bankmachine3_req_lock;
reg           basesoc_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine3_req_ready;
wire          basesoc_sdram_bankmachine3_req_valid;
reg           basesoc_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_req_we;
reg    [12:0] basesoc_sdram_bankmachine3_row = 13'd0;
reg           basesoc_sdram_bankmachine3_row_close = 1'd0;
reg           basesoc_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine3_row_hit;
reg           basesoc_sdram_bankmachine3_row_open = 1'd0;
reg           basesoc_sdram_bankmachine3_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine3_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine3_sink_last = 1'd0;
wire   [21:0] basesoc_sdram_bankmachine3_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_sink_payload_we;
wire          basesoc_sdram_bankmachine3_sink_ready;
wire          basesoc_sdram_bankmachine3_sink_sink_first;
wire          basesoc_sdram_bankmachine3_sink_sink_last;
wire   [21:0] basesoc_sdram_bankmachine3_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine3_sink_sink_ready;
wire          basesoc_sdram_bankmachine3_sink_sink_valid;
wire          basesoc_sdram_bankmachine3_sink_valid;
wire          basesoc_sdram_bankmachine3_source_first;
wire          basesoc_sdram_bankmachine3_source_last;
wire   [21:0] basesoc_sdram_bankmachine3_source_payload_addr;
wire          basesoc_sdram_bankmachine3_source_payload_we;
wire          basesoc_sdram_bankmachine3_source_ready;
wire          basesoc_sdram_bankmachine3_source_source_first;
wire          basesoc_sdram_bankmachine3_source_source_last;
wire   [21:0] basesoc_sdram_bankmachine3_source_source_payload_addr;
wire          basesoc_sdram_bankmachine3_source_source_payload_we;
wire          basesoc_sdram_bankmachine3_source_source_ready;
wire          basesoc_sdram_bankmachine3_source_source_valid;
wire          basesoc_sdram_bankmachine3_source_valid;
wire   [24:0] basesoc_sdram_bankmachine3_syncfifo3_din;
wire   [24:0] basesoc_sdram_bankmachine3_syncfifo3_dout;
wire          basesoc_sdram_bankmachine3_syncfifo3_re;
wire          basesoc_sdram_bankmachine3_syncfifo3_readable;
wire          basesoc_sdram_bankmachine3_syncfifo3_we;
wire          basesoc_sdram_bankmachine3_syncfifo3_writable;
reg     [1:0] basesoc_sdram_bankmachine3_trascon_count = 2'd0;
reg           basesoc_sdram_bankmachine3_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_trascon_valid;
reg     [2:0] basesoc_sdram_bankmachine3_trccon_count = 3'd0;
reg           basesoc_sdram_bankmachine3_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_trccon_valid;
reg     [2:0] basesoc_sdram_bankmachine3_twtpcon_count = 3'd0;
reg           basesoc_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [24:0] basesoc_sdram_bankmachine3_wrport_dat_r;
wire   [24:0] basesoc_sdram_bankmachine3_wrport_dat_w;
wire          basesoc_sdram_bankmachine3_wrport_we;
wire          basesoc_sdram_cas_allowed;
wire          basesoc_sdram_choose_cmd_ce;
wire   [12:0] basesoc_sdram_choose_cmd_cmd_payload_a;
wire    [1:0] basesoc_sdram_choose_cmd_cmd_payload_ba;
reg           basesoc_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_cmd;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_read;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_write;
reg           basesoc_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           basesoc_sdram_choose_cmd_cmd_ready = 1'd0;
wire          basesoc_sdram_choose_cmd_cmd_valid;
reg     [1:0] basesoc_sdram_choose_cmd_grant = 2'd0;
wire    [3:0] basesoc_sdram_choose_cmd_request;
reg     [3:0] basesoc_sdram_choose_cmd_valids = 4'd0;
reg           basesoc_sdram_choose_cmd_want_activates = 1'd0;
reg           basesoc_sdram_choose_cmd_want_cmds = 1'd0;
reg           basesoc_sdram_choose_cmd_want_reads = 1'd0;
reg           basesoc_sdram_choose_cmd_want_writes = 1'd0;
wire          basesoc_sdram_choose_req_ce;
wire   [12:0] basesoc_sdram_choose_req_cmd_payload_a;
wire    [1:0] basesoc_sdram_choose_req_cmd_payload_ba;
reg           basesoc_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          basesoc_sdram_choose_req_cmd_payload_is_cmd;
wire          basesoc_sdram_choose_req_cmd_payload_is_read;
wire          basesoc_sdram_choose_req_cmd_payload_is_write;
reg           basesoc_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_choose_req_cmd_payload_we = 1'd0;
reg           basesoc_sdram_choose_req_cmd_ready = 1'd0;
wire          basesoc_sdram_choose_req_cmd_valid;
reg     [1:0] basesoc_sdram_choose_req_grant = 2'd0;
wire    [3:0] basesoc_sdram_choose_req_request;
reg     [3:0] basesoc_sdram_choose_req_valids = 4'd0;
reg           basesoc_sdram_choose_req_want_activates = 1'd0;
reg           basesoc_sdram_choose_req_want_cmds = 1'd0;
reg           basesoc_sdram_choose_req_want_reads = 1'd0;
reg           basesoc_sdram_choose_req_want_writes = 1'd0;
wire          basesoc_sdram_cke;
reg           basesoc_sdram_cmd_last = 1'd0;
reg    [12:0] basesoc_sdram_cmd_payload_a = 13'd0;
reg     [1:0] basesoc_sdram_cmd_payload_ba = 2'd0;
reg           basesoc_sdram_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_cmd_payload_we = 1'd0;
reg           basesoc_sdram_cmd_ready = 1'd0;
reg           basesoc_sdram_cmd_valid = 1'd0;
reg           basesoc_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [12:0] basesoc_sdram_csr_dfi_p0_address;
wire    [1:0] basesoc_sdram_csr_dfi_p0_bank;
reg           basesoc_sdram_csr_dfi_p0_cas_n = 1'd1;
reg           basesoc_sdram_csr_dfi_p0_cke = 1'd0;
reg           basesoc_sdram_csr_dfi_p0_cs_n = 1'd1;
reg           basesoc_sdram_csr_dfi_p0_odt = 1'd0;
reg           basesoc_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [15:0] basesoc_sdram_csr_dfi_p0_rddata = 16'd0;
wire          basesoc_sdram_csr_dfi_p0_rddata_en;
reg           basesoc_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          basesoc_sdram_csr_dfi_p0_reset_n;
reg           basesoc_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [15:0] basesoc_sdram_csr_dfi_p0_wrdata;
wire          basesoc_sdram_csr_dfi_p0_wrdata_en;
wire    [1:0] basesoc_sdram_csr_dfi_p0_wrdata_mask;
reg           basesoc_sdram_csr_dfi_p1_act_n = 1'd1;
wire   [12:0] basesoc_sdram_csr_dfi_p1_address;
wire    [1:0] basesoc_sdram_csr_dfi_p1_bank;
reg           basesoc_sdram_csr_dfi_p1_cas_n = 1'd1;
reg           basesoc_sdram_csr_dfi_p1_cke = 1'd0;
reg           basesoc_sdram_csr_dfi_p1_cs_n = 1'd1;
reg           basesoc_sdram_csr_dfi_p1_odt = 1'd0;
reg           basesoc_sdram_csr_dfi_p1_ras_n = 1'd1;
reg    [15:0] basesoc_sdram_csr_dfi_p1_rddata = 16'd0;
wire          basesoc_sdram_csr_dfi_p1_rddata_en;
reg           basesoc_sdram_csr_dfi_p1_rddata_valid = 1'd0;
wire          basesoc_sdram_csr_dfi_p1_reset_n;
reg           basesoc_sdram_csr_dfi_p1_we_n = 1'd1;
wire   [15:0] basesoc_sdram_csr_dfi_p1_wrdata;
wire          basesoc_sdram_csr_dfi_p1_wrdata_en;
wire    [1:0] basesoc_sdram_csr_dfi_p1_wrdata_mask;
reg           basesoc_sdram_dfi_p0_act_n = 1'd1;
reg    [12:0] basesoc_sdram_dfi_p0_address = 13'd0;
reg     [1:0] basesoc_sdram_dfi_p0_bank = 2'd0;
reg           basesoc_sdram_dfi_p0_cas_n = 1'd1;
wire          basesoc_sdram_dfi_p0_cke;
reg           basesoc_sdram_dfi_p0_cs_n = 1'd1;
wire          basesoc_sdram_dfi_p0_odt;
reg           basesoc_sdram_dfi_p0_ras_n = 1'd1;
wire   [15:0] basesoc_sdram_dfi_p0_rddata;
reg           basesoc_sdram_dfi_p0_rddata_en = 1'd0;
wire          basesoc_sdram_dfi_p0_rddata_valid;
wire          basesoc_sdram_dfi_p0_reset_n;
reg           basesoc_sdram_dfi_p0_we_n = 1'd1;
wire   [15:0] basesoc_sdram_dfi_p0_wrdata;
reg           basesoc_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [1:0] basesoc_sdram_dfi_p0_wrdata_mask;
reg           basesoc_sdram_dfi_p1_act_n = 1'd1;
reg    [12:0] basesoc_sdram_dfi_p1_address = 13'd0;
reg     [1:0] basesoc_sdram_dfi_p1_bank = 2'd0;
reg           basesoc_sdram_dfi_p1_cas_n = 1'd1;
wire          basesoc_sdram_dfi_p1_cke;
reg           basesoc_sdram_dfi_p1_cs_n = 1'd1;
wire          basesoc_sdram_dfi_p1_odt;
reg           basesoc_sdram_dfi_p1_ras_n = 1'd1;
wire   [15:0] basesoc_sdram_dfi_p1_rddata;
reg           basesoc_sdram_dfi_p1_rddata_en = 1'd0;
wire          basesoc_sdram_dfi_p1_rddata_valid;
wire          basesoc_sdram_dfi_p1_reset_n;
reg           basesoc_sdram_dfi_p1_we_n = 1'd1;
wire   [15:0] basesoc_sdram_dfi_p1_wrdata;
reg           basesoc_sdram_dfi_p1_wrdata_en = 1'd0;
wire    [1:0] basesoc_sdram_dfi_p1_wrdata_mask;
reg           basesoc_sdram_en0 = 1'd0;
reg           basesoc_sdram_en1 = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [12:0] basesoc_sdram_ext_dfi_p0_address = 13'd0;
reg     [1:0] basesoc_sdram_ext_dfi_p0_bank = 2'd0;
reg           basesoc_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p0_cke = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p0_odt = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [15:0] basesoc_sdram_ext_dfi_p0_rddata = 16'd0;
reg           basesoc_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [15:0] basesoc_sdram_ext_dfi_p0_wrdata = 16'd0;
reg           basesoc_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [1:0] basesoc_sdram_ext_dfi_p0_wrdata_mask = 2'd0;
reg           basesoc_sdram_ext_dfi_p1_act_n = 1'd1;
reg    [12:0] basesoc_sdram_ext_dfi_p1_address = 13'd0;
reg     [1:0] basesoc_sdram_ext_dfi_p1_bank = 2'd0;
reg           basesoc_sdram_ext_dfi_p1_cas_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p1_cke = 1'd0;
reg           basesoc_sdram_ext_dfi_p1_cs_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p1_odt = 1'd0;
reg           basesoc_sdram_ext_dfi_p1_ras_n = 1'd1;
reg    [15:0] basesoc_sdram_ext_dfi_p1_rddata = 16'd0;
reg           basesoc_sdram_ext_dfi_p1_rddata_en = 1'd0;
reg           basesoc_sdram_ext_dfi_p1_rddata_valid = 1'd0;
reg           basesoc_sdram_ext_dfi_p1_reset_n = 1'd0;
reg           basesoc_sdram_ext_dfi_p1_we_n = 1'd1;
reg    [15:0] basesoc_sdram_ext_dfi_p1_wrdata = 16'd0;
reg           basesoc_sdram_ext_dfi_p1_wrdata_en = 1'd0;
reg     [1:0] basesoc_sdram_ext_dfi_p1_wrdata_mask = 2'd0;
reg           basesoc_sdram_ext_dfi_sel = 1'd0;
wire          basesoc_sdram_go_to_refresh;
wire   [21:0] basesoc_sdram_interface_bank0_addr;
wire          basesoc_sdram_interface_bank0_lock;
wire          basesoc_sdram_interface_bank0_rdata_valid;
wire          basesoc_sdram_interface_bank0_ready;
wire          basesoc_sdram_interface_bank0_valid;
wire          basesoc_sdram_interface_bank0_wdata_ready;
wire          basesoc_sdram_interface_bank0_we;
wire   [21:0] basesoc_sdram_interface_bank1_addr;
wire          basesoc_sdram_interface_bank1_lock;
wire          basesoc_sdram_interface_bank1_rdata_valid;
wire          basesoc_sdram_interface_bank1_ready;
wire          basesoc_sdram_interface_bank1_valid;
wire          basesoc_sdram_interface_bank1_wdata_ready;
wire          basesoc_sdram_interface_bank1_we;
wire   [21:0] basesoc_sdram_interface_bank2_addr;
wire          basesoc_sdram_interface_bank2_lock;
wire          basesoc_sdram_interface_bank2_rdata_valid;
wire          basesoc_sdram_interface_bank2_ready;
wire          basesoc_sdram_interface_bank2_valid;
wire          basesoc_sdram_interface_bank2_wdata_ready;
wire          basesoc_sdram_interface_bank2_we;
wire   [21:0] basesoc_sdram_interface_bank3_addr;
wire          basesoc_sdram_interface_bank3_lock;
wire          basesoc_sdram_interface_bank3_rdata_valid;
wire          basesoc_sdram_interface_bank3_ready;
wire          basesoc_sdram_interface_bank3_valid;
wire          basesoc_sdram_interface_bank3_wdata_ready;
wire          basesoc_sdram_interface_bank3_we;
wire   [31:0] basesoc_sdram_interface_rdata;
reg    [31:0] basesoc_sdram_interface_wdata = 32'd0;
reg     [3:0] basesoc_sdram_interface_wdata_we = 4'd0;
reg           basesoc_sdram_master_p0_act_n = 1'd1;
reg    [12:0] basesoc_sdram_master_p0_address = 13'd0;
reg     [1:0] basesoc_sdram_master_p0_bank = 2'd0;
reg           basesoc_sdram_master_p0_cas_n = 1'd1;
reg           basesoc_sdram_master_p0_cke = 1'd0;
reg           basesoc_sdram_master_p0_cs_n = 1'd1;
reg           basesoc_sdram_master_p0_odt = 1'd0;
reg           basesoc_sdram_master_p0_ras_n = 1'd1;
wire   [15:0] basesoc_sdram_master_p0_rddata;
reg           basesoc_sdram_master_p0_rddata_en = 1'd0;
wire          basesoc_sdram_master_p0_rddata_valid;
reg           basesoc_sdram_master_p0_reset_n = 1'd0;
reg           basesoc_sdram_master_p0_we_n = 1'd1;
reg    [15:0] basesoc_sdram_master_p0_wrdata = 16'd0;
reg           basesoc_sdram_master_p0_wrdata_en = 1'd0;
reg     [1:0] basesoc_sdram_master_p0_wrdata_mask = 2'd0;
reg           basesoc_sdram_master_p1_act_n = 1'd1;
reg    [12:0] basesoc_sdram_master_p1_address = 13'd0;
reg     [1:0] basesoc_sdram_master_p1_bank = 2'd0;
reg           basesoc_sdram_master_p1_cas_n = 1'd1;
reg           basesoc_sdram_master_p1_cke = 1'd0;
reg           basesoc_sdram_master_p1_cs_n = 1'd1;
reg           basesoc_sdram_master_p1_odt = 1'd0;
reg           basesoc_sdram_master_p1_ras_n = 1'd1;
wire   [15:0] basesoc_sdram_master_p1_rddata;
reg           basesoc_sdram_master_p1_rddata_en = 1'd0;
wire          basesoc_sdram_master_p1_rddata_valid;
reg           basesoc_sdram_master_p1_reset_n = 1'd0;
reg           basesoc_sdram_master_p1_we_n = 1'd1;
reg    [15:0] basesoc_sdram_master_p1_wrdata = 16'd0;
reg           basesoc_sdram_master_p1_wrdata_en = 1'd0;
reg     [1:0] basesoc_sdram_master_p1_wrdata_mask = 2'd0;
wire          basesoc_sdram_max_time0;
wire          basesoc_sdram_max_time1;
reg    [12:0] basesoc_sdram_nop_a = 13'd0;
reg     [1:0] basesoc_sdram_nop_ba = 2'd0;
wire          basesoc_sdram_odt;
reg           basesoc_sdram_phaseinjector0_address_re = 1'd0;
reg    [12:0] basesoc_sdram_phaseinjector0_address_storage = 13'd0;
reg           basesoc_sdram_phaseinjector0_baddress_re = 1'd0;
reg     [1:0] basesoc_sdram_phaseinjector0_baddress_storage = 2'd0;
wire          basesoc_sdram_phaseinjector0_command_issue_r;
reg           basesoc_sdram_phaseinjector0_command_issue_re = 1'd0;
reg           basesoc_sdram_phaseinjector0_command_issue_w = 1'd0;
reg           basesoc_sdram_phaseinjector0_command_issue_we = 1'd0;
reg           basesoc_sdram_phaseinjector0_command_re = 1'd0;
reg     [7:0] basesoc_sdram_phaseinjector0_command_storage = 8'd0;
wire          basesoc_sdram_phaseinjector0_csrfield_cas;
wire          basesoc_sdram_phaseinjector0_csrfield_cs;
wire          basesoc_sdram_phaseinjector0_csrfield_cs_bottom;
wire          basesoc_sdram_phaseinjector0_csrfield_cs_top;
wire          basesoc_sdram_phaseinjector0_csrfield_ras;
wire          basesoc_sdram_phaseinjector0_csrfield_rden;
wire          basesoc_sdram_phaseinjector0_csrfield_we;
wire          basesoc_sdram_phaseinjector0_csrfield_wren;
reg           basesoc_sdram_phaseinjector0_rddata_re = 1'd0;
reg    [15:0] basesoc_sdram_phaseinjector0_rddata_status = 16'd0;
wire          basesoc_sdram_phaseinjector0_rddata_we;
reg           basesoc_sdram_phaseinjector0_wrdata_re = 1'd0;
reg    [15:0] basesoc_sdram_phaseinjector0_wrdata_storage = 16'd0;
reg           basesoc_sdram_phaseinjector1_address_re = 1'd0;
reg    [12:0] basesoc_sdram_phaseinjector1_address_storage = 13'd0;
reg           basesoc_sdram_phaseinjector1_baddress_re = 1'd0;
reg     [1:0] basesoc_sdram_phaseinjector1_baddress_storage = 2'd0;
wire          basesoc_sdram_phaseinjector1_command_issue_r;
reg           basesoc_sdram_phaseinjector1_command_issue_re = 1'd0;
reg           basesoc_sdram_phaseinjector1_command_issue_w = 1'd0;
reg           basesoc_sdram_phaseinjector1_command_issue_we = 1'd0;
reg           basesoc_sdram_phaseinjector1_command_re = 1'd0;
reg     [7:0] basesoc_sdram_phaseinjector1_command_storage = 8'd0;
wire          basesoc_sdram_phaseinjector1_csrfield_cas;
wire          basesoc_sdram_phaseinjector1_csrfield_cs;
wire          basesoc_sdram_phaseinjector1_csrfield_cs_bottom;
wire          basesoc_sdram_phaseinjector1_csrfield_cs_top;
wire          basesoc_sdram_phaseinjector1_csrfield_ras;
wire          basesoc_sdram_phaseinjector1_csrfield_rden;
wire          basesoc_sdram_phaseinjector1_csrfield_we;
wire          basesoc_sdram_phaseinjector1_csrfield_wren;
reg           basesoc_sdram_phaseinjector1_rddata_re = 1'd0;
reg    [15:0] basesoc_sdram_phaseinjector1_rddata_status = 16'd0;
wire          basesoc_sdram_phaseinjector1_rddata_we;
reg           basesoc_sdram_phaseinjector1_wrdata_re = 1'd0;
reg    [15:0] basesoc_sdram_phaseinjector1_wrdata_storage = 16'd0;
reg           basesoc_sdram_postponer_count = 1'd0;
wire          basesoc_sdram_postponer_req_i;
reg           basesoc_sdram_postponer_req_o = 1'd0;
wire          basesoc_sdram_ras_allowed;
reg           basesoc_sdram_re = 1'd0;
wire          basesoc_sdram_read_available;
wire          basesoc_sdram_reset_n;
wire          basesoc_sdram_sel;
reg           basesoc_sdram_sequencer_count = 1'd0;
wire          basesoc_sdram_sequencer_done0;
reg           basesoc_sdram_sequencer_done1 = 1'd0;
reg           basesoc_sdram_sequencer_start0 = 1'd0;
wire          basesoc_sdram_sequencer_start1;
reg     [3:0] basesoc_sdram_sequencer_trigger = 4'd0;
wire          basesoc_sdram_slave_p0_act_n;
wire   [12:0] basesoc_sdram_slave_p0_address;
wire    [1:0] basesoc_sdram_slave_p0_bank;
wire          basesoc_sdram_slave_p0_cas_n;
wire          basesoc_sdram_slave_p0_cke;
wire          basesoc_sdram_slave_p0_cs_n;
wire          basesoc_sdram_slave_p0_odt;
wire          basesoc_sdram_slave_p0_ras_n;
reg    [15:0] basesoc_sdram_slave_p0_rddata = 16'd0;
wire          basesoc_sdram_slave_p0_rddata_en;
reg           basesoc_sdram_slave_p0_rddata_valid = 1'd0;
wire          basesoc_sdram_slave_p0_reset_n;
wire          basesoc_sdram_slave_p0_we_n;
wire   [15:0] basesoc_sdram_slave_p0_wrdata;
wire          basesoc_sdram_slave_p0_wrdata_en;
wire    [1:0] basesoc_sdram_slave_p0_wrdata_mask;
wire          basesoc_sdram_slave_p1_act_n;
wire   [12:0] basesoc_sdram_slave_p1_address;
wire    [1:0] basesoc_sdram_slave_p1_bank;
wire          basesoc_sdram_slave_p1_cas_n;
wire          basesoc_sdram_slave_p1_cke;
wire          basesoc_sdram_slave_p1_cs_n;
wire          basesoc_sdram_slave_p1_odt;
wire          basesoc_sdram_slave_p1_ras_n;
reg    [15:0] basesoc_sdram_slave_p1_rddata = 16'd0;
wire          basesoc_sdram_slave_p1_rddata_en;
reg           basesoc_sdram_slave_p1_rddata_valid = 1'd0;
wire          basesoc_sdram_slave_p1_reset_n;
wire          basesoc_sdram_slave_p1_we_n;
wire   [15:0] basesoc_sdram_slave_p1_wrdata;
wire          basesoc_sdram_slave_p1_wrdata_en;
wire    [1:0] basesoc_sdram_slave_p1_wrdata_mask;
reg           basesoc_sdram_steerer0 = 1'd1;
reg           basesoc_sdram_steerer1 = 1'd1;
reg           basesoc_sdram_steerer2 = 1'd1;
reg           basesoc_sdram_steerer3 = 1'd1;
reg     [1:0] basesoc_sdram_steerer_sel0 = 2'd0;
reg     [1:0] basesoc_sdram_steerer_sel1 = 2'd0;
reg     [3:0] basesoc_sdram_storage = 4'd1;
reg           basesoc_sdram_tccdcon_count = 1'd0;
reg           basesoc_sdram_tccdcon_ready = 1'd0;
wire          basesoc_sdram_tccdcon_valid;
reg           basesoc_sdram_tfawcon_ready = 1'd1;
wire          basesoc_sdram_tfawcon_valid;
reg     [4:0] basesoc_sdram_time0 = 5'd0;
reg     [3:0] basesoc_sdram_time1 = 4'd0;
wire    [8:0] basesoc_sdram_timer_count0;
reg     [8:0] basesoc_sdram_timer_count1 = 9'd446;
wire          basesoc_sdram_timer_done0;
wire          basesoc_sdram_timer_done1;
wire          basesoc_sdram_timer_wait;
reg           basesoc_sdram_trrdcon_count = 1'd0;
reg           basesoc_sdram_trrdcon_ready = 1'd0;
wire          basesoc_sdram_trrdcon_valid;
reg     [1:0] basesoc_sdram_twtrcon_count = 2'd0;
reg           basesoc_sdram_twtrcon_ready = 1'd0;
wire          basesoc_sdram_twtrcon_valid;
wire          basesoc_sdram_wants_refresh;
wire          basesoc_sdram_write_available;
reg           basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [3:0] basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_tx_enable = 1'd0;
reg    [31:0] basesoc_tx_phase = 32'd0;
reg           basesoc_tx_sink_first = 1'd0;
reg           basesoc_tx_sink_last = 1'd0;
reg     [7:0] basesoc_tx_sink_payload_data = 8'd0;
reg           basesoc_tx_sink_ready = 1'd0;
reg           basesoc_tx_sink_valid = 1'd0;
reg           basesoc_tx_tick = 1'd0;
reg           basesoc_uart_enable_re = 1'd0;
reg     [1:0] basesoc_uart_enable_storage = 2'd0;
wire          basesoc_uart_irq;
reg     [1:0] basesoc_uart_pending_r = 2'd0;
reg           basesoc_uart_pending_re = 1'd0;
reg     [1:0] basesoc_uart_pending_status = 2'd0;
wire          basesoc_uart_pending_we;
wire          basesoc_uart_phy_sel;
wire          basesoc_uart_phy_sink_first;
wire          basesoc_uart_phy_sink_last;
wire    [7:0] basesoc_uart_phy_sink_payload_data;
reg           basesoc_uart_phy_sink_ready = 1'd0;
wire          basesoc_uart_phy_sink_valid;
reg           basesoc_uart_phy_source_first = 1'd0;
reg           basesoc_uart_phy_source_last = 1'd0;
reg     [7:0] basesoc_uart_phy_source_payload_data = 8'd0;
wire          basesoc_uart_phy_source_ready;
reg           basesoc_uart_phy_source_valid = 1'd0;
wire          basesoc_uart_rx0;
wire          basesoc_uart_rx1;
wire          basesoc_uart_rx2;
reg           basesoc_uart_rx_clear = 1'd0;
reg     [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
wire          basesoc_uart_rx_fifo_do_read;
wire          basesoc_uart_rx_fifo_fifo_in_first;
wire          basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          basesoc_uart_rx_fifo_fifo_out_first;
wire          basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_rx_fifo_level1;
reg     [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire          basesoc_uart_rx_fifo_rdport_re;
wire          basesoc_uart_rx_fifo_re;
reg           basesoc_uart_rx_fifo_readable = 1'd0;
reg           basesoc_uart_rx_fifo_replace = 1'd0;
wire          basesoc_uart_rx_fifo_sink_first;
wire          basesoc_uart_rx_fifo_sink_last;
wire    [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire          basesoc_uart_rx_fifo_sink_ready;
wire          basesoc_uart_rx_fifo_sink_valid;
wire          basesoc_uart_rx_fifo_source_first;
wire          basesoc_uart_rx_fifo_source_last;
wire    [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire          basesoc_uart_rx_fifo_source_ready;
wire          basesoc_uart_rx_fifo_source_valid;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
wire          basesoc_uart_rx_fifo_syncfifo_re;
wire          basesoc_uart_rx_fifo_syncfifo_readable;
wire          basesoc_uart_rx_fifo_syncfifo_we;
wire          basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire          basesoc_uart_rx_fifo_wrport_we;
reg           basesoc_uart_rx_pending = 1'd0;
wire          basesoc_uart_rx_status;
wire          basesoc_uart_rx_trigger;
reg           basesoc_uart_rx_trigger_d = 1'd0;
reg           basesoc_uart_rxempty_re = 1'd0;
wire          basesoc_uart_rxempty_status;
wire          basesoc_uart_rxempty_we;
reg           basesoc_uart_rxfull_re = 1'd0;
wire          basesoc_uart_rxfull_status;
wire          basesoc_uart_rxfull_we;
wire    [7:0] basesoc_uart_rxtx_r;
reg           basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] basesoc_uart_rxtx_w;
reg           basesoc_uart_rxtx_we = 1'd0;
reg           basesoc_uart_status_re = 1'd0;
reg     [1:0] basesoc_uart_status_status = 2'd0;
wire          basesoc_uart_status_we;
wire          basesoc_uart_tx0;
wire          basesoc_uart_tx1;
wire          basesoc_uart_tx2;
reg           basesoc_uart_tx_clear = 1'd0;
reg     [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
wire          basesoc_uart_tx_fifo_do_read;
wire          basesoc_uart_tx_fifo_fifo_in_first;
wire          basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          basesoc_uart_tx_fifo_fifo_out_first;
wire          basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_tx_fifo_level1;
reg     [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire          basesoc_uart_tx_fifo_rdport_re;
wire          basesoc_uart_tx_fifo_re;
reg           basesoc_uart_tx_fifo_readable = 1'd0;
reg           basesoc_uart_tx_fifo_replace = 1'd0;
reg           basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire          basesoc_uart_tx_fifo_sink_ready;
wire          basesoc_uart_tx_fifo_sink_valid;
wire          basesoc_uart_tx_fifo_source_first;
wire          basesoc_uart_tx_fifo_source_last;
wire    [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire          basesoc_uart_tx_fifo_source_ready;
wire          basesoc_uart_tx_fifo_source_valid;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
wire          basesoc_uart_tx_fifo_syncfifo_re;
wire          basesoc_uart_tx_fifo_syncfifo_readable;
wire          basesoc_uart_tx_fifo_syncfifo_we;
wire          basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire          basesoc_uart_tx_fifo_wrport_we;
reg           basesoc_uart_tx_pending = 1'd0;
wire          basesoc_uart_tx_status;
wire          basesoc_uart_tx_trigger;
reg           basesoc_uart_tx_trigger_d = 1'd0;
reg           basesoc_uart_txempty_re = 1'd0;
wire          basesoc_uart_txempty_status;
wire          basesoc_uart_txempty_we;
reg           basesoc_uart_txfull_re = 1'd0;
wire          basesoc_uart_txfull_status;
wire          basesoc_uart_txfull_we;
wire          basesoc_uart_uart_sink_first;
wire          basesoc_uart_uart_sink_last;
wire    [7:0] basesoc_uart_uart_sink_payload_data;
wire          basesoc_uart_uart_sink_ready;
wire          basesoc_uart_uart_sink_valid;
wire          basesoc_uart_uart_source_first;
wire          basesoc_uart_uart_source_last;
wire    [7:0] basesoc_uart_uart_source_payload_data;
wire          basesoc_uart_uart_source_ready;
wire          basesoc_uart_uart_source_valid;
reg    [63:0] basesoc_uptime_cycles = 64'd0;
reg           basesoc_uptime_cycles_re = 1'd0;
reg    [63:0] basesoc_uptime_cycles_status = 64'd0;
wire          basesoc_uptime_cycles_we;
reg           basesoc_uptime_latch_re = 1'd0;
reg           basesoc_uptime_latch_storage = 1'd0;
reg     [2:0] basesoc_videoframebuffer0 = 3'd0;
reg     [1:0] basesoc_videoframebuffer1 = 2'd0;
reg     [2:0] basesoc_videoframebuffer2 = 3'd0;
wire   [17:0] basesoc_videoframebuffer_cdc_cdc_asyncfifo_din;
wire   [17:0] basesoc_videoframebuffer_cdc_cdc_asyncfifo_dout;
wire          basesoc_videoframebuffer_cdc_cdc_asyncfifo_re;
wire          basesoc_videoframebuffer_cdc_cdc_asyncfifo_readable;
wire          basesoc_videoframebuffer_cdc_cdc_asyncfifo_we;
wire          basesoc_videoframebuffer_cdc_cdc_asyncfifo_writable;
wire    [2:0] basesoc_videoframebuffer_cdc_cdc_consume_wdomain;
wire          basesoc_videoframebuffer_cdc_cdc_fifo_in_first;
wire          basesoc_videoframebuffer_cdc_cdc_fifo_in_last;
wire   [15:0] basesoc_videoframebuffer_cdc_cdc_fifo_in_payload_data;
wire          basesoc_videoframebuffer_cdc_cdc_fifo_out_first;
wire          basesoc_videoframebuffer_cdc_cdc_fifo_out_last;
wire   [15:0] basesoc_videoframebuffer_cdc_cdc_fifo_out_payload_data;
wire          basesoc_videoframebuffer_cdc_cdc_graycounter0_ce;
reg     [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter0_q = 3'd0;
reg     [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter0_q_binary = 3'd0;
wire    [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next;
reg     [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary = 3'd0;
wire          basesoc_videoframebuffer_cdc_cdc_graycounter1_ce;
reg     [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter1_q = 3'd0;
reg     [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter1_q_binary = 3'd0;
wire    [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next;
reg     [2:0] basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary = 3'd0;
wire    [2:0] basesoc_videoframebuffer_cdc_cdc_produce_rdomain;
wire    [1:0] basesoc_videoframebuffer_cdc_cdc_rdport_adr;
wire   [17:0] basesoc_videoframebuffer_cdc_cdc_rdport_dat_r;
wire          basesoc_videoframebuffer_cdc_cdc_sink_first;
wire          basesoc_videoframebuffer_cdc_cdc_sink_last;
wire   [15:0] basesoc_videoframebuffer_cdc_cdc_sink_payload_data;
wire          basesoc_videoframebuffer_cdc_cdc_sink_ready;
wire          basesoc_videoframebuffer_cdc_cdc_sink_valid;
wire          basesoc_videoframebuffer_cdc_cdc_source_first;
wire          basesoc_videoframebuffer_cdc_cdc_source_last;
wire   [15:0] basesoc_videoframebuffer_cdc_cdc_source_payload_data;
wire          basesoc_videoframebuffer_cdc_cdc_source_ready;
wire          basesoc_videoframebuffer_cdc_cdc_source_valid;
wire    [1:0] basesoc_videoframebuffer_cdc_cdc_wrport_adr;
wire   [17:0] basesoc_videoframebuffer_cdc_cdc_wrport_dat_r;
wire   [17:0] basesoc_videoframebuffer_cdc_cdc_wrport_dat_w;
wire          basesoc_videoframebuffer_cdc_cdc_wrport_we;
wire          basesoc_videoframebuffer_cdc_sink_sink_first;
wire          basesoc_videoframebuffer_cdc_sink_sink_last;
wire   [15:0] basesoc_videoframebuffer_cdc_sink_sink_payload_data;
wire          basesoc_videoframebuffer_cdc_sink_sink_ready;
wire          basesoc_videoframebuffer_cdc_sink_sink_valid;
wire          basesoc_videoframebuffer_cdc_source_source_first;
wire          basesoc_videoframebuffer_cdc_source_source_last;
wire   [15:0] basesoc_videoframebuffer_cdc_source_source_payload_data;
reg           basesoc_videoframebuffer_cdc_source_source_ready = 1'd0;
wire          basesoc_videoframebuffer_cdc_source_source_valid;
wire          basesoc_videoframebuffer_conv_converter_first;
wire          basesoc_videoframebuffer_conv_converter_last;
reg           basesoc_videoframebuffer_conv_converter_mux = 1'd0;
wire          basesoc_videoframebuffer_conv_converter_sink_first;
wire          basesoc_videoframebuffer_conv_converter_sink_last;
wire   [31:0] basesoc_videoframebuffer_conv_converter_sink_payload_data;
wire          basesoc_videoframebuffer_conv_converter_sink_ready;
wire          basesoc_videoframebuffer_conv_converter_sink_valid;
wire          basesoc_videoframebuffer_conv_converter_source_first;
wire          basesoc_videoframebuffer_conv_converter_source_last;
reg    [15:0] basesoc_videoframebuffer_conv_converter_source_payload_data = 16'd0;
wire          basesoc_videoframebuffer_conv_converter_source_payload_valid_token_count;
wire          basesoc_videoframebuffer_conv_converter_source_ready;
wire          basesoc_videoframebuffer_conv_converter_source_valid;
wire          basesoc_videoframebuffer_conv_source_source_first;
wire          basesoc_videoframebuffer_conv_source_source_last;
wire   [15:0] basesoc_videoframebuffer_conv_source_source_payload_data;
wire          basesoc_videoframebuffer_conv_source_source_ready;
wire          basesoc_videoframebuffer_conv_source_source_valid;
wire          basesoc_videoframebuffer_dma_enable;
reg    [13:0] basesoc_videoframebuffer_dma_fifo_consume = 14'd0;
wire          basesoc_videoframebuffer_dma_fifo_do_read;
wire          basesoc_videoframebuffer_dma_fifo_fifo_in_first;
wire          basesoc_videoframebuffer_dma_fifo_fifo_in_last;
wire   [31:0] basesoc_videoframebuffer_dma_fifo_fifo_in_payload_data;
wire          basesoc_videoframebuffer_dma_fifo_fifo_out_first;
wire          basesoc_videoframebuffer_dma_fifo_fifo_out_last;
wire   [31:0] basesoc_videoframebuffer_dma_fifo_fifo_out_payload_data;
reg    [14:0] basesoc_videoframebuffer_dma_fifo_level0 = 15'd0;
wire   [14:0] basesoc_videoframebuffer_dma_fifo_level1;
reg    [13:0] basesoc_videoframebuffer_dma_fifo_produce = 14'd0;
wire   [13:0] basesoc_videoframebuffer_dma_fifo_rdport_adr;
wire   [33:0] basesoc_videoframebuffer_dma_fifo_rdport_dat_r;
wire          basesoc_videoframebuffer_dma_fifo_rdport_re;
wire          basesoc_videoframebuffer_dma_fifo_re;
reg           basesoc_videoframebuffer_dma_fifo_readable = 1'd0;
reg           basesoc_videoframebuffer_dma_fifo_replace = 1'd0;
wire          basesoc_videoframebuffer_dma_fifo_sink_first;
wire          basesoc_videoframebuffer_dma_fifo_sink_last;
wire   [31:0] basesoc_videoframebuffer_dma_fifo_sink_payload_data;
wire          basesoc_videoframebuffer_dma_fifo_sink_ready;
wire          basesoc_videoframebuffer_dma_fifo_sink_valid;
wire          basesoc_videoframebuffer_dma_fifo_source_first;
wire          basesoc_videoframebuffer_dma_fifo_source_last;
wire   [31:0] basesoc_videoframebuffer_dma_fifo_source_payload_data;
wire          basesoc_videoframebuffer_dma_fifo_source_ready;
wire          basesoc_videoframebuffer_dma_fifo_source_valid;
wire   [33:0] basesoc_videoframebuffer_dma_fifo_syncfifo_din;
wire   [33:0] basesoc_videoframebuffer_dma_fifo_syncfifo_dout;
wire          basesoc_videoframebuffer_dma_fifo_syncfifo_re;
wire          basesoc_videoframebuffer_dma_fifo_syncfifo_readable;
wire          basesoc_videoframebuffer_dma_fifo_syncfifo_we;
wire          basesoc_videoframebuffer_dma_fifo_syncfifo_writable;
reg    [13:0] basesoc_videoframebuffer_dma_fifo_wrport_adr = 14'd0;
wire   [33:0] basesoc_videoframebuffer_dma_fifo_wrport_dat_r;
wire   [33:0] basesoc_videoframebuffer_dma_fifo_wrport_dat_w;
wire          basesoc_videoframebuffer_dma_fifo_wrport_we;
reg    [13:0] basesoc_videoframebuffer_dma_res_fifo_consume = 14'd0;
wire          basesoc_videoframebuffer_dma_res_fifo_do_read;
wire          basesoc_videoframebuffer_dma_res_fifo_fifo_in_first;
wire          basesoc_videoframebuffer_dma_res_fifo_fifo_in_last;
wire          basesoc_videoframebuffer_dma_res_fifo_fifo_in_payload_dummy;
wire          basesoc_videoframebuffer_dma_res_fifo_fifo_out_first;
wire          basesoc_videoframebuffer_dma_res_fifo_fifo_out_last;
wire          basesoc_videoframebuffer_dma_res_fifo_fifo_out_payload_dummy;
reg    [14:0] basesoc_videoframebuffer_dma_res_fifo_level = 15'd0;
reg    [13:0] basesoc_videoframebuffer_dma_res_fifo_produce = 14'd0;
wire   [13:0] basesoc_videoframebuffer_dma_res_fifo_rdport_adr;
wire    [2:0] basesoc_videoframebuffer_dma_res_fifo_rdport_dat_r;
reg           basesoc_videoframebuffer_dma_res_fifo_replace = 1'd0;
reg           basesoc_videoframebuffer_dma_res_fifo_sink_first = 1'd0;
wire          basesoc_videoframebuffer_dma_res_fifo_sink_last;
reg           basesoc_videoframebuffer_dma_res_fifo_sink_payload_dummy = 1'd0;
wire          basesoc_videoframebuffer_dma_res_fifo_sink_ready;
wire          basesoc_videoframebuffer_dma_res_fifo_sink_valid;
wire          basesoc_videoframebuffer_dma_res_fifo_source_first;
wire          basesoc_videoframebuffer_dma_res_fifo_source_last;
wire          basesoc_videoframebuffer_dma_res_fifo_source_payload_dummy;
wire          basesoc_videoframebuffer_dma_res_fifo_source_ready;
wire          basesoc_videoframebuffer_dma_res_fifo_source_valid;
wire    [2:0] basesoc_videoframebuffer_dma_res_fifo_syncfifo_din;
wire    [2:0] basesoc_videoframebuffer_dma_res_fifo_syncfifo_dout;
wire          basesoc_videoframebuffer_dma_res_fifo_syncfifo_re;
wire          basesoc_videoframebuffer_dma_res_fifo_syncfifo_readable;
wire          basesoc_videoframebuffer_dma_res_fifo_syncfifo_we;
wire          basesoc_videoframebuffer_dma_res_fifo_syncfifo_writable;
reg    [13:0] basesoc_videoframebuffer_dma_res_fifo_wrport_adr = 14'd0;
wire    [2:0] basesoc_videoframebuffer_dma_res_fifo_wrport_dat_r;
wire    [2:0] basesoc_videoframebuffer_dma_res_fifo_wrport_dat_w;
wire          basesoc_videoframebuffer_dma_res_fifo_wrport_we;
reg           basesoc_videoframebuffer_dma_sink_sink_last = 1'd0;
reg    [23:0] basesoc_videoframebuffer_dma_sink_sink_payload_address = 24'd0;
wire          basesoc_videoframebuffer_dma_sink_sink_ready;
reg           basesoc_videoframebuffer_dma_sink_sink_valid = 1'd0;
wire          basesoc_videoframebuffer_dma_source_source_first;
reg           basesoc_videoframebuffer_dma_source_source_last = 1'd0;
wire   [31:0] basesoc_videoframebuffer_dma_source_source_payload_data;
wire          basesoc_videoframebuffer_dma_source_source_ready;
reg           basesoc_videoframebuffer_dma_source_source_valid = 1'd0;
reg           basesoc_videoframebuffer_first = 1'd0;
reg           basesoc_videoframebuffer_first_resetinserter_next_value = 1'd0;
reg           basesoc_videoframebuffer_first_resetinserter_next_value_ce = 1'd0;
wire          basesoc_videoframebuffer_fsm_reset;
wire   [23:0] basesoc_videoframebuffer_litedramdmareader_base;
reg           basesoc_videoframebuffer_litedramdmareader_base_re = 1'd0;
reg    [31:0] basesoc_videoframebuffer_litedramdmareader_base_storage = 32'd1086324736;
reg           basesoc_videoframebuffer_litedramdmareader_done_re = 1'd0;
reg           basesoc_videoframebuffer_litedramdmareader_done_status = 1'd0;
wire          basesoc_videoframebuffer_litedramdmareader_done_we;
reg           basesoc_videoframebuffer_litedramdmareader_enable_re = 1'd0;
reg           basesoc_videoframebuffer_litedramdmareader_enable_storage = 1'd0;
wire   [23:0] basesoc_videoframebuffer_litedramdmareader_length;
reg           basesoc_videoframebuffer_litedramdmareader_length_re = 1'd0;
reg    [31:0] basesoc_videoframebuffer_litedramdmareader_length_storage = 32'd127680;
reg           basesoc_videoframebuffer_litedramdmareader_loop_re = 1'd0;
reg           basesoc_videoframebuffer_litedramdmareader_loop_storage = 1'd1;
reg    [23:0] basesoc_videoframebuffer_litedramdmareader_offset = 24'd0;
reg    [23:0] basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value = 24'd0;
reg           basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value_ce = 1'd0;
reg           basesoc_videoframebuffer_litedramdmareader_offset_re = 1'd0;
wire   [31:0] basesoc_videoframebuffer_litedramdmareader_offset_status;
wire          basesoc_videoframebuffer_litedramdmareader_offset_we;
wire          basesoc_videoframebuffer_litedramdmareader_reset;
reg           basesoc_videoframebuffer_source_first = 1'd0;
reg           basesoc_videoframebuffer_source_last = 1'd0;
wire    [7:0] basesoc_videoframebuffer_source_payload_b;
reg           basesoc_videoframebuffer_source_payload_de = 1'd0;
wire    [7:0] basesoc_videoframebuffer_source_payload_g;
reg           basesoc_videoframebuffer_source_payload_hsync = 1'd0;
wire    [7:0] basesoc_videoframebuffer_source_payload_r;
reg           basesoc_videoframebuffer_source_payload_vsync = 1'd0;
wire          basesoc_videoframebuffer_source_ready;
reg           basesoc_videoframebuffer_source_valid = 1'd0;
wire          basesoc_videoframebuffer_underflow;
wire          basesoc_videoframebuffer_vtg_sink_first;
wire          basesoc_videoframebuffer_vtg_sink_last;
wire          basesoc_videoframebuffer_vtg_sink_payload_de;
wire   [11:0] basesoc_videoframebuffer_vtg_sink_payload_hcount;
wire   [11:0] basesoc_videoframebuffer_vtg_sink_payload_hres;
wire          basesoc_videoframebuffer_vtg_sink_payload_hsync;
wire   [11:0] basesoc_videoframebuffer_vtg_sink_payload_vcount;
wire   [11:0] basesoc_videoframebuffer_vtg_sink_payload_vres;
wire          basesoc_videoframebuffer_vtg_sink_payload_vsync;
reg           basesoc_videoframebuffer_vtg_sink_ready = 1'd0;
wire          basesoc_videoframebuffer_vtg_sink_valid;
wire          basesoc_vtg_enable;
reg           basesoc_vtg_enable_re = 1'd0;
reg           basesoc_vtg_enable_storage = 1'd1;
reg           basesoc_vtg_hactive = 1'd0;
reg           basesoc_vtg_hactive_clockdomainsrenamer_next_value0 = 1'd0;
reg           basesoc_vtg_hactive_clockdomainsrenamer_next_value_ce0 = 1'd0;
wire   [11:0] basesoc_vtg_hres;
reg           basesoc_vtg_hres_re = 1'd0;
reg    [11:0] basesoc_vtg_hres_storage = 12'd266;
wire   [11:0] basesoc_vtg_hscan;
reg           basesoc_vtg_hscan_re = 1'd0;
reg    [11:0] basesoc_vtg_hscan_storage = 12'd339;
wire   [11:0] basesoc_vtg_hsync_end;
reg           basesoc_vtg_hsync_end_re = 1'd0;
reg    [11:0] basesoc_vtg_hsync_end_storage = 12'd306;
wire   [11:0] basesoc_vtg_hsync_start;
reg           basesoc_vtg_hsync_start_re = 1'd0;
reg    [11:0] basesoc_vtg_hsync_start_storage = 12'd274;
wire          basesoc_vtg_reset;
reg           basesoc_vtg_source_first = 1'd0;
reg           basesoc_vtg_source_last = 1'd0;
wire          basesoc_vtg_source_payload_de;
reg    [11:0] basesoc_vtg_source_payload_hcount = 12'd0;
reg    [11:0] basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 = 12'd0;
reg           basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 = 1'd0;
reg    [11:0] basesoc_vtg_source_payload_hres = 12'd0;
reg    [11:0] basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value2 = 12'd0;
reg           basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 = 1'd0;
reg           basesoc_vtg_source_payload_hsync = 1'd0;
reg           basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 = 1'd0;
reg           basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 = 1'd0;
reg    [11:0] basesoc_vtg_source_payload_vcount = 12'd0;
reg    [11:0] basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 = 12'd0;
reg           basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 = 1'd0;
reg    [11:0] basesoc_vtg_source_payload_vres = 12'd0;
reg    [11:0] basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value3 = 12'd0;
reg           basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 = 1'd0;
reg           basesoc_vtg_source_payload_vsync = 1'd0;
reg           basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 = 1'd0;
reg           basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 = 1'd0;
wire          basesoc_vtg_source_ready;
reg           basesoc_vtg_source_valid = 1'd0;
reg           basesoc_vtg_vactive = 1'd0;
reg           basesoc_vtg_vactive_clockdomainsrenamer_next_value1 = 1'd0;
reg           basesoc_vtg_vactive_clockdomainsrenamer_next_value_ce1 = 1'd0;
wire   [11:0] basesoc_vtg_vres;
reg           basesoc_vtg_vres_re = 1'd0;
reg    [11:0] basesoc_vtg_vres_storage = 12'd240;
wire   [11:0] basesoc_vtg_vscan;
reg           basesoc_vtg_vscan_re = 1'd0;
reg    [11:0] basesoc_vtg_vscan_storage = 12'd279;
wire   [11:0] basesoc_vtg_vsync_end;
reg           basesoc_vtg_vsync_end_re = 1'd0;
reg    [11:0] basesoc_vtg_vsync_end_storage = 12'd249;
wire   [11:0] basesoc_vtg_vsync_start;
reg           basesoc_vtg_vsync_start_re = 1'd0;
reg    [11:0] basesoc_vtg_vsync_start_storage = 12'd241;
wire          basesoc_wb_sdram_ack;
wire   [29:0] basesoc_wb_sdram_adr;
wire    [1:0] basesoc_wb_sdram_bte;
wire    [2:0] basesoc_wb_sdram_cti;
wire          basesoc_wb_sdram_cyc;
wire   [31:0] basesoc_wb_sdram_dat_r;
wire   [31:0] basesoc_wb_sdram_dat_w;
wire          basesoc_wb_sdram_err;
wire    [3:0] basesoc_wb_sdram_sel;
wire          basesoc_wb_sdram_stb;
wire          basesoc_wb_sdram_we;
reg           buffer_fill_re = 1'd0;
wire   [11:0] buffer_fill_status;
wire          buffer_fill_we;
wire          buffer_flush_r;
reg           buffer_flush_re = 1'd0;
reg           buffer_flush_w = 1'd0;
reg           buffer_flush_we = 1'd0;
reg           clockdomainsrenamer_next_state = 1'd0;
reg           clockdomainsrenamer_state = 1'd0;
reg           command_result_code_re = 1'd0;
wire    [2:0] command_result_code_status;
wire          command_result_code_we;
reg           cont1_joy_re = 1'd0;
wire   [31:0] cont1_joy_status;
wire          cont1_joy_we;
reg           cont1_key_re = 1'd0;
wire   [31:0] cont1_key_status;
wire          cont1_key_we;
reg           cont1_trig_re = 1'd0;
wire   [31:0] cont1_trig_status;
wire          cont1_trig_we;
reg           cont2_joy_re = 1'd0;
wire   [31:0] cont2_joy_status;
wire          cont2_joy_we;
reg           cont2_key_re = 1'd0;
wire   [31:0] cont2_key_status;
wire          cont2_key_we;
reg           cont2_trig_re = 1'd0;
wire   [31:0] cont2_trig_status;
wire          cont2_trig_we;
reg           cont3_joy_re = 1'd0;
wire   [31:0] cont3_joy_status;
wire          cont3_joy_we;
reg           cont3_key_re = 1'd0;
wire   [31:0] cont3_key_status;
wire          cont3_key_we;
reg           cont3_trig_re = 1'd0;
wire   [31:0] cont3_trig_status;
wire          cont3_trig_we;
reg           cont4_joy_re = 1'd0;
wire   [31:0] cont4_joy_status;
wire          cont4_joy_we;
reg           cont4_key_re = 1'd0;
wire   [31:0] cont4_key_status;
wire          cont4_key_we;
reg           cont4_trig_re = 1'd0;
wire   [31:0] cont4_trig_status;
wire          cont4_trig_we;
reg    [19:0] count = 20'd1000000;
reg           crg_rst = 1'd0;
wire   [31:0] csr0_interact_csr_r;
reg           csr0_interact_csr_re = 1'd0;
wire   [31:0] csr0_interact_csr_w;
reg           csr0_interact_csr_we = 1'd0;
wire   [31:0] csr10_interact_csr_r;
reg           csr10_interact_csr_re = 1'd0;
wire   [31:0] csr10_interact_csr_w;
reg           csr10_interact_csr_we = 1'd0;
wire   [31:0] csr11_interact_csr_r;
reg           csr11_interact_csr_re = 1'd0;
wire   [31:0] csr11_interact_csr_w;
reg           csr11_interact_csr_we = 1'd0;
wire   [31:0] csr12_interact_csr_r;
reg           csr12_interact_csr_re = 1'd0;
wire   [31:0] csr12_interact_csr_w;
reg           csr12_interact_csr_we = 1'd0;
wire   [31:0] csr13_interact_csr_r;
reg           csr13_interact_csr_re = 1'd0;
wire   [31:0] csr13_interact_csr_w;
reg           csr13_interact_csr_we = 1'd0;
wire   [31:0] csr14_interact_csr_r;
reg           csr14_interact_csr_re = 1'd0;
wire   [31:0] csr14_interact_csr_w;
reg           csr14_interact_csr_we = 1'd0;
wire   [31:0] csr15_interact_csr_r;
reg           csr15_interact_csr_re = 1'd0;
wire   [31:0] csr15_interact_csr_w;
reg           csr15_interact_csr_we = 1'd0;
wire   [31:0] csr1_interact_csr_r;
reg           csr1_interact_csr_re = 1'd0;
wire   [31:0] csr1_interact_csr_w;
reg           csr1_interact_csr_we = 1'd0;
wire   [31:0] csr2_interact_csr_r;
reg           csr2_interact_csr_re = 1'd0;
wire   [31:0] csr2_interact_csr_w;
reg           csr2_interact_csr_we = 1'd0;
wire   [31:0] csr3_interact_csr_r;
reg           csr3_interact_csr_re = 1'd0;
wire   [31:0] csr3_interact_csr_w;
reg           csr3_interact_csr_we = 1'd0;
wire   [31:0] csr4_interact_csr_r;
reg           csr4_interact_csr_re = 1'd0;
wire   [31:0] csr4_interact_csr_w;
reg           csr4_interact_csr_we = 1'd0;
wire   [31:0] csr5_interact_csr_r;
reg           csr5_interact_csr_re = 1'd0;
wire   [31:0] csr5_interact_csr_w;
reg           csr5_interact_csr_we = 1'd0;
wire   [31:0] csr6_interact_csr_r;
reg           csr6_interact_csr_re = 1'd0;
wire   [31:0] csr6_interact_csr_w;
reg           csr6_interact_csr_we = 1'd0;
wire   [31:0] csr7_interact_csr_r;
reg           csr7_interact_csr_re = 1'd0;
wire   [31:0] csr7_interact_csr_w;
reg           csr7_interact_csr_we = 1'd0;
wire   [31:0] csr8_interact_csr_r;
reg           csr8_interact_csr_re = 1'd0;
wire   [31:0] csr8_interact_csr_w;
reg           csr8_interact_csr_we = 1'd0;
wire   [31:0] csr9_interact_csr_r;
reg           csr9_interact_csr_re = 1'd0;
wire   [31:0] csr9_interact_csr_w;
reg           csr9_interact_csr_we = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire   [11:0] csr_bankarray_csrbank0_buffer_fill_r;
reg           csr_bankarray_csrbank0_buffer_fill_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank0_buffer_fill_w;
reg           csr_bankarray_csrbank0_buffer_fill_we = 1'd0;
wire          csr_bankarray_csrbank0_playback_en0_r;
reg           csr_bankarray_csrbank0_playback_en0_re = 1'd0;
wire          csr_bankarray_csrbank0_playback_en0_w;
reg           csr_bankarray_csrbank0_playback_en0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire    [1:0] csr_bankarray_csrbank10_ev_enable0_r;
reg           csr_bankarray_csrbank10_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank10_ev_enable0_w;
reg           csr_bankarray_csrbank10_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank10_ev_pending_r;
reg           csr_bankarray_csrbank10_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank10_ev_pending_w;
reg           csr_bankarray_csrbank10_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank10_ev_status_r;
reg           csr_bankarray_csrbank10_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank10_ev_status_w;
reg           csr_bankarray_csrbank10_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank10_rxempty_r;
reg           csr_bankarray_csrbank10_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank10_rxempty_w;
reg           csr_bankarray_csrbank10_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank10_rxfull_r;
reg           csr_bankarray_csrbank10_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank10_rxfull_w;
reg           csr_bankarray_csrbank10_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank10_sel;
wire          csr_bankarray_csrbank10_txempty_r;
reg           csr_bankarray_csrbank10_txempty_re = 1'd0;
wire          csr_bankarray_csrbank10_txempty_w;
reg           csr_bankarray_csrbank10_txempty_we = 1'd0;
wire          csr_bankarray_csrbank10_txfull_r;
reg           csr_bankarray_csrbank10_txfull_re = 1'd0;
wire          csr_bankarray_csrbank10_txfull_w;
reg           csr_bankarray_csrbank10_txfull_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank11_dma_base0_r;
reg           csr_bankarray_csrbank11_dma_base0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank11_dma_base0_w;
reg           csr_bankarray_csrbank11_dma_base0_we = 1'd0;
wire          csr_bankarray_csrbank11_dma_done_r;
reg           csr_bankarray_csrbank11_dma_done_re = 1'd0;
wire          csr_bankarray_csrbank11_dma_done_w;
reg           csr_bankarray_csrbank11_dma_done_we = 1'd0;
wire          csr_bankarray_csrbank11_dma_enable0_r;
reg           csr_bankarray_csrbank11_dma_enable0_re = 1'd0;
wire          csr_bankarray_csrbank11_dma_enable0_w;
reg           csr_bankarray_csrbank11_dma_enable0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank11_dma_length0_r;
reg           csr_bankarray_csrbank11_dma_length0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank11_dma_length0_w;
reg           csr_bankarray_csrbank11_dma_length0_we = 1'd0;
wire          csr_bankarray_csrbank11_dma_loop0_r;
reg           csr_bankarray_csrbank11_dma_loop0_re = 1'd0;
wire          csr_bankarray_csrbank11_dma_loop0_w;
reg           csr_bankarray_csrbank11_dma_loop0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank11_dma_offset_r;
reg           csr_bankarray_csrbank11_dma_offset_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank11_dma_offset_w;
reg           csr_bankarray_csrbank11_dma_offset_we = 1'd0;
wire          csr_bankarray_csrbank11_sel;
wire          csr_bankarray_csrbank12_enable0_r;
reg           csr_bankarray_csrbank12_enable0_re = 1'd0;
wire          csr_bankarray_csrbank12_enable0_w;
reg           csr_bankarray_csrbank12_enable0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hres0_r;
reg           csr_bankarray_csrbank12_hres0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hres0_w;
reg           csr_bankarray_csrbank12_hres0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hscan0_r;
reg           csr_bankarray_csrbank12_hscan0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hscan0_w;
reg           csr_bankarray_csrbank12_hscan0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hsync_end0_r;
reg           csr_bankarray_csrbank12_hsync_end0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hsync_end0_w;
reg           csr_bankarray_csrbank12_hsync_end0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hsync_start0_r;
reg           csr_bankarray_csrbank12_hsync_start0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_hsync_start0_w;
reg           csr_bankarray_csrbank12_hsync_start0_we = 1'd0;
wire          csr_bankarray_csrbank12_sel;
wire   [11:0] csr_bankarray_csrbank12_vres0_r;
reg           csr_bankarray_csrbank12_vres0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vres0_w;
reg           csr_bankarray_csrbank12_vres0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vscan0_r;
reg           csr_bankarray_csrbank12_vscan0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vscan0_w;
reg           csr_bankarray_csrbank12_vscan0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vsync_end0_r;
reg           csr_bankarray_csrbank12_vsync_end0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vsync_end0_w;
reg           csr_bankarray_csrbank12_vsync_end0_we = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vsync_start0_r;
reg           csr_bankarray_csrbank12_vsync_start0_re = 1'd0;
wire   [11:0] csr_bankarray_csrbank12_vsync_start0_w;
reg           csr_bankarray_csrbank12_vsync_start0_we = 1'd0;
wire    [2:0] csr_bankarray_csrbank1_command_result_code_r;
reg           csr_bankarray_csrbank1_command_result_code_re = 1'd0;
wire    [2:0] csr_bankarray_csrbank1_command_result_code_w;
reg           csr_bankarray_csrbank1_command_result_code_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_current_address_r;
reg           csr_bankarray_csrbank1_current_address_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_current_address_w;
reg           csr_bankarray_csrbank1_current_address_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_data_offset0_r;
reg           csr_bankarray_csrbank1_data_offset0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_data_offset0_w;
reg           csr_bankarray_csrbank1_data_offset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_ram_data_address0_r;
reg           csr_bankarray_csrbank1_ram_data_address0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_ram_data_address0_w;
reg           csr_bankarray_csrbank1_ram_data_address0_we = 1'd0;
wire    [3:0] csr_bankarray_csrbank1_scaler_slot0_r;
reg           csr_bankarray_csrbank1_scaler_slot0_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank1_scaler_slot0_w;
reg           csr_bankarray_csrbank1_scaler_slot0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire   [15:0] csr_bankarray_csrbank1_slot_id0_r;
reg           csr_bankarray_csrbank1_slot_id0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank1_slot_id0_w;
reg           csr_bankarray_csrbank1_slot_id0_we = 1'd0;
wire          csr_bankarray_csrbank1_status_r;
reg           csr_bankarray_csrbank1_status_re = 1'd0;
wire          csr_bankarray_csrbank1_status_w;
reg           csr_bankarray_csrbank1_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_transfer_length0_r;
reg           csr_bankarray_csrbank1_transfer_length0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_transfer_length0_w;
reg           csr_bankarray_csrbank1_transfer_length0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_id0_r;
reg           csr_bankarray_csrbank2_id0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_id0_w;
reg           csr_bankarray_csrbank2_id0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_id1_r;
reg           csr_bankarray_csrbank2_id1_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank2_id1_w;
reg           csr_bankarray_csrbank2_id1_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire   [31:0] csr_bankarray_csrbank3_cont1_joy_r;
reg           csr_bankarray_csrbank3_cont1_joy_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont1_joy_w;
reg           csr_bankarray_csrbank3_cont1_joy_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont1_key_r;
reg           csr_bankarray_csrbank3_cont1_key_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont1_key_w;
reg           csr_bankarray_csrbank3_cont1_key_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont1_trig_r;
reg           csr_bankarray_csrbank3_cont1_trig_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont1_trig_w;
reg           csr_bankarray_csrbank3_cont1_trig_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont2_joy_r;
reg           csr_bankarray_csrbank3_cont2_joy_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont2_joy_w;
reg           csr_bankarray_csrbank3_cont2_joy_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont2_key_r;
reg           csr_bankarray_csrbank3_cont2_key_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont2_key_w;
reg           csr_bankarray_csrbank3_cont2_key_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont2_trig_r;
reg           csr_bankarray_csrbank3_cont2_trig_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont2_trig_w;
reg           csr_bankarray_csrbank3_cont2_trig_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont3_joy_r;
reg           csr_bankarray_csrbank3_cont3_joy_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont3_joy_w;
reg           csr_bankarray_csrbank3_cont3_joy_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont3_key_r;
reg           csr_bankarray_csrbank3_cont3_key_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont3_key_w;
reg           csr_bankarray_csrbank3_cont3_key_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont3_trig_r;
reg           csr_bankarray_csrbank3_cont3_trig_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont3_trig_w;
reg           csr_bankarray_csrbank3_cont3_trig_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont4_joy_r;
reg           csr_bankarray_csrbank3_cont4_joy_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont4_joy_w;
reg           csr_bankarray_csrbank3_cont4_joy_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont4_key_r;
reg           csr_bankarray_csrbank3_cont4_key_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont4_key_w;
reg           csr_bankarray_csrbank3_cont4_key_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont4_trig_r;
reg           csr_bankarray_csrbank3_cont4_trig_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_cont4_trig_w;
reg           csr_bankarray_csrbank3_cont4_trig_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank4_interact_changed0_r;
reg           csr_bankarray_csrbank4_interact_changed0_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed0_w;
reg           csr_bankarray_csrbank4_interact_changed0_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed10_r;
reg           csr_bankarray_csrbank4_interact_changed10_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed10_w;
reg           csr_bankarray_csrbank4_interact_changed10_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed11_r;
reg           csr_bankarray_csrbank4_interact_changed11_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed11_w;
reg           csr_bankarray_csrbank4_interact_changed11_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed12_r;
reg           csr_bankarray_csrbank4_interact_changed12_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed12_w;
reg           csr_bankarray_csrbank4_interact_changed12_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed13_r;
reg           csr_bankarray_csrbank4_interact_changed13_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed13_w;
reg           csr_bankarray_csrbank4_interact_changed13_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed14_r;
reg           csr_bankarray_csrbank4_interact_changed14_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed14_w;
reg           csr_bankarray_csrbank4_interact_changed14_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed15_r;
reg           csr_bankarray_csrbank4_interact_changed15_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed15_w;
reg           csr_bankarray_csrbank4_interact_changed15_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed1_r;
reg           csr_bankarray_csrbank4_interact_changed1_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed1_w;
reg           csr_bankarray_csrbank4_interact_changed1_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed2_r;
reg           csr_bankarray_csrbank4_interact_changed2_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed2_w;
reg           csr_bankarray_csrbank4_interact_changed2_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed3_r;
reg           csr_bankarray_csrbank4_interact_changed3_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed3_w;
reg           csr_bankarray_csrbank4_interact_changed3_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed4_r;
reg           csr_bankarray_csrbank4_interact_changed4_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed4_w;
reg           csr_bankarray_csrbank4_interact_changed4_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed5_r;
reg           csr_bankarray_csrbank4_interact_changed5_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed5_w;
reg           csr_bankarray_csrbank4_interact_changed5_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed6_r;
reg           csr_bankarray_csrbank4_interact_changed6_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed6_w;
reg           csr_bankarray_csrbank4_interact_changed6_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed7_r;
reg           csr_bankarray_csrbank4_interact_changed7_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed7_w;
reg           csr_bankarray_csrbank4_interact_changed7_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed8_r;
reg           csr_bankarray_csrbank4_interact_changed8_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed8_w;
reg           csr_bankarray_csrbank4_interact_changed8_we = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed9_r;
reg           csr_bankarray_csrbank4_interact_changed9_re = 1'd0;
wire          csr_bankarray_csrbank4_interact_changed9_w;
reg           csr_bankarray_csrbank4_interact_changed9_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire   [31:0] csr_bankarray_csrbank5_date_bcd_r;
reg           csr_bankarray_csrbank5_date_bcd_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_date_bcd_w;
reg           csr_bankarray_csrbank5_date_bcd_we = 1'd0;
wire          csr_bankarray_csrbank5_sel;
wire   [31:0] csr_bankarray_csrbank5_time_bcd_r;
reg           csr_bankarray_csrbank5_time_bcd_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_time_bcd_w;
reg           csr_bankarray_csrbank5_time_bcd_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_unix_seconds_r;
reg           csr_bankarray_csrbank5_unix_seconds_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank5_unix_seconds_w;
reg           csr_bankarray_csrbank5_unix_seconds_we = 1'd0;
wire          csr_bankarray_csrbank6_sel;
wire   [31:0] csr_bankarray_csrbank6_video_r;
reg           csr_bankarray_csrbank6_video_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank6_video_w;
reg           csr_bankarray_csrbank6_video_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_bus_errors_r;
reg           csr_bankarray_csrbank7_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_bus_errors_w;
reg           csr_bankarray_csrbank7_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank7_reset0_r;
reg           csr_bankarray_csrbank7_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank7_reset0_w;
reg           csr_bankarray_csrbank7_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_scratch0_r;
reg           csr_bankarray_csrbank7_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank7_scratch0_w;
reg           csr_bankarray_csrbank7_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank7_sel;
wire    [3:0] csr_bankarray_csrbank8_dfii_control0_r;
reg           csr_bankarray_csrbank8_dfii_control0_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank8_dfii_control0_w;
reg           csr_bankarray_csrbank8_dfii_control0_we = 1'd0;
wire   [12:0] csr_bankarray_csrbank8_dfii_pi0_address0_r;
reg           csr_bankarray_csrbank8_dfii_pi0_address0_re = 1'd0;
wire   [12:0] csr_bankarray_csrbank8_dfii_pi0_address0_w;
reg           csr_bankarray_csrbank8_dfii_pi0_address0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_dfii_pi0_baddress0_r;
reg           csr_bankarray_csrbank8_dfii_pi0_baddress0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_dfii_pi0_baddress0_w;
reg           csr_bankarray_csrbank8_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank8_dfii_pi0_command0_r;
reg           csr_bankarray_csrbank8_dfii_pi0_command0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank8_dfii_pi0_command0_w;
reg           csr_bankarray_csrbank8_dfii_pi0_command0_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi0_rddata_r;
reg           csr_bankarray_csrbank8_dfii_pi0_rddata_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi0_rddata_w;
reg           csr_bankarray_csrbank8_dfii_pi0_rddata_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi0_wrdata0_r;
reg           csr_bankarray_csrbank8_dfii_pi0_wrdata0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi0_wrdata0_w;
reg           csr_bankarray_csrbank8_dfii_pi0_wrdata0_we = 1'd0;
wire   [12:0] csr_bankarray_csrbank8_dfii_pi1_address0_r;
reg           csr_bankarray_csrbank8_dfii_pi1_address0_re = 1'd0;
wire   [12:0] csr_bankarray_csrbank8_dfii_pi1_address0_w;
reg           csr_bankarray_csrbank8_dfii_pi1_address0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_dfii_pi1_baddress0_r;
reg           csr_bankarray_csrbank8_dfii_pi1_baddress0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank8_dfii_pi1_baddress0_w;
reg           csr_bankarray_csrbank8_dfii_pi1_baddress0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank8_dfii_pi1_command0_r;
reg           csr_bankarray_csrbank8_dfii_pi1_command0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank8_dfii_pi1_command0_w;
reg           csr_bankarray_csrbank8_dfii_pi1_command0_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi1_rddata_r;
reg           csr_bankarray_csrbank8_dfii_pi1_rddata_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi1_rddata_w;
reg           csr_bankarray_csrbank8_dfii_pi1_rddata_we = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi1_wrdata0_r;
reg           csr_bankarray_csrbank8_dfii_pi1_wrdata0_re = 1'd0;
wire   [15:0] csr_bankarray_csrbank8_dfii_pi1_wrdata0_w;
reg           csr_bankarray_csrbank8_dfii_pi1_wrdata0_we = 1'd0;
wire          csr_bankarray_csrbank8_sel;
wire          csr_bankarray_csrbank9_en0_r;
reg           csr_bankarray_csrbank9_en0_re = 1'd0;
wire          csr_bankarray_csrbank9_en0_w;
reg           csr_bankarray_csrbank9_en0_we = 1'd0;
wire          csr_bankarray_csrbank9_ev_enable0_r;
reg           csr_bankarray_csrbank9_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank9_ev_enable0_w;
reg           csr_bankarray_csrbank9_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank9_ev_pending_r;
reg           csr_bankarray_csrbank9_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank9_ev_pending_w;
reg           csr_bankarray_csrbank9_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank9_ev_status_r;
reg           csr_bankarray_csrbank9_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank9_ev_status_w;
reg           csr_bankarray_csrbank9_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_load0_r;
reg           csr_bankarray_csrbank9_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_load0_w;
reg           csr_bankarray_csrbank9_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_reload0_r;
reg           csr_bankarray_csrbank9_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_reload0_w;
reg           csr_bankarray_csrbank9_reload0_we = 1'd0;
wire          csr_bankarray_csrbank9_sel;
wire          csr_bankarray_csrbank9_update_value0_r;
reg           csr_bankarray_csrbank9_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank9_update_value0_w;
reg           csr_bankarray_csrbank9_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_uptime_cycles0_r;
reg           csr_bankarray_csrbank9_uptime_cycles0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_uptime_cycles0_w;
reg           csr_bankarray_csrbank9_uptime_cycles0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_uptime_cycles1_r;
reg           csr_bankarray_csrbank9_uptime_cycles1_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_uptime_cycles1_w;
reg           csr_bankarray_csrbank9_uptime_cycles1_we = 1'd0;
wire          csr_bankarray_csrbank9_uptime_latch0_r;
reg           csr_bankarray_csrbank9_uptime_latch0_re = 1'd0;
wire          csr_bankarray_csrbank9_uptime_latch0_w;
reg           csr_bankarray_csrbank9_uptime_latch0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_value_r;
reg           csr_bankarray_csrbank9_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank9_value_w;
reg           csr_bankarray_csrbank9_value_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface10_bank_bus_adr;
reg    [31:0] csr_bankarray_interface10_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface10_bank_bus_dat_w;
wire          csr_bankarray_interface10_bank_bus_we;
wire   [13:0] csr_bankarray_interface11_bank_bus_adr;
reg    [31:0] csr_bankarray_interface11_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface11_bank_bus_dat_w;
wire          csr_bankarray_interface11_bank_bus_we;
wire   [13:0] csr_bankarray_interface12_bank_bus_adr;
reg    [31:0] csr_bankarray_interface12_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface12_bank_bus_dat_w;
wire          csr_bankarray_interface12_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [13:0] csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface5_bank_bus_dat_w;
wire          csr_bankarray_interface5_bank_bus_we;
wire   [13:0] csr_bankarray_interface6_bank_bus_adr;
reg    [31:0] csr_bankarray_interface6_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface6_bank_bus_dat_w;
wire          csr_bankarray_interface6_bank_bus_we;
wire   [13:0] csr_bankarray_interface7_bank_bus_adr;
reg    [31:0] csr_bankarray_interface7_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface7_bank_bus_dat_w;
wire          csr_bankarray_interface7_bank_bus_we;
wire   [13:0] csr_bankarray_interface8_bank_bus_adr;
reg    [31:0] csr_bankarray_interface8_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface8_bank_bus_dat_w;
wire          csr_bankarray_interface8_bank_bus_we;
wire   [13:0] csr_bankarray_interface9_bank_bus_adr;
reg    [31:0] csr_bankarray_interface9_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface9_bank_bus_dat_w;
wire          csr_bankarray_interface9_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_we;
reg           csrstatus0_re = 1'd0;
reg           csrstatus0_status = 1'd0;
wire          csrstatus0_we;
reg           csrstatus10_re = 1'd0;
reg           csrstatus10_status = 1'd0;
wire          csrstatus10_we;
reg           csrstatus11_re = 1'd0;
reg           csrstatus11_status = 1'd0;
wire          csrstatus11_we;
reg           csrstatus12_re = 1'd0;
reg           csrstatus12_status = 1'd0;
wire          csrstatus12_we;
reg           csrstatus13_re = 1'd0;
reg           csrstatus13_status = 1'd0;
wire          csrstatus13_we;
reg           csrstatus14_re = 1'd0;
reg           csrstatus14_status = 1'd0;
wire          csrstatus14_we;
reg           csrstatus15_re = 1'd0;
reg           csrstatus15_status = 1'd0;
wire          csrstatus15_we;
reg           csrstatus1_re = 1'd0;
reg           csrstatus1_status = 1'd0;
wire          csrstatus1_we;
reg           csrstatus2_re = 1'd0;
reg           csrstatus2_status = 1'd0;
wire          csrstatus2_we;
reg           csrstatus3_re = 1'd0;
reg           csrstatus3_status = 1'd0;
wire          csrstatus3_we;
reg           csrstatus4_re = 1'd0;
reg           csrstatus4_status = 1'd0;
wire          csrstatus4_we;
reg           csrstatus5_re = 1'd0;
reg           csrstatus5_status = 1'd0;
wire          csrstatus5_we;
reg           csrstatus6_re = 1'd0;
reg           csrstatus6_status = 1'd0;
wire          csrstatus6_we;
reg           csrstatus7_re = 1'd0;
reg           csrstatus7_status = 1'd0;
wire          csrstatus7_we;
reg           csrstatus8_re = 1'd0;
reg           csrstatus8_status = 1'd0;
wire          csrstatus8_we;
reg           csrstatus9_re = 1'd0;
reg           csrstatus9_status = 1'd0;
wire          csrstatus9_we;
reg           current_address_re = 1'd0;
wire   [31:0] current_address_status;
wire          current_address_we;
reg           data_offset_re = 1'd0;
reg    [31:0] data_offset_storage = 32'd0;
reg           date_bcd_re = 1'd0;
wire   [31:0] date_bcd_status;
wire          date_bcd_we;
wire          dfi_dfi_p0_act_n;
wire   [12:0] dfi_dfi_p0_address;
wire    [1:0] dfi_dfi_p0_bank;
wire          dfi_dfi_p0_cas_n;
wire          dfi_dfi_p0_cke;
wire          dfi_dfi_p0_cs_n;
wire          dfi_dfi_p0_odt;
wire          dfi_dfi_p0_ras_n;
wire   [15:0] dfi_dfi_p0_rddata;
wire          dfi_dfi_p0_rddata_en;
wire          dfi_dfi_p0_rddata_valid;
wire          dfi_dfi_p0_reset_n;
wire          dfi_dfi_p0_we_n;
wire   [15:0] dfi_dfi_p0_wrdata;
wire          dfi_dfi_p0_wrdata_en;
wire    [1:0] dfi_dfi_p0_wrdata_mask;
wire          dfi_dfi_p1_act_n;
wire   [12:0] dfi_dfi_p1_address;
wire    [1:0] dfi_dfi_p1_bank;
wire          dfi_dfi_p1_cas_n;
wire          dfi_dfi_p1_cke;
wire          dfi_dfi_p1_cs_n;
wire          dfi_dfi_p1_odt;
wire          dfi_dfi_p1_ras_n;
wire   [15:0] dfi_dfi_p1_rddata;
wire          dfi_dfi_p1_rddata_en;
wire          dfi_dfi_p1_rddata_valid;
wire          dfi_dfi_p1_reset_n;
wire          dfi_dfi_p1_we_n;
wire   [15:0] dfi_dfi_p1_wrdata;
wire          dfi_dfi_p1_wrdata_en;
wire    [1:0] dfi_dfi_p1_wrdata_mask;
wire          done;
reg           error = 1'd0;
wire          example_slave_ack;
wire   [29:0] example_slave_adr;
wire    [1:0] example_slave_bte;
wire    [2:0] example_slave_cti;
wire          example_slave_cyc;
wire   [31:0] example_slave_dat_r;
wire   [31:0] example_slave_dat_w;
wire          example_slave_err;
wire    [3:0] example_slave_sel;
wire          example_slave_stb;
wire          example_slave_we;
wire   [31:0] file_size_r;
reg           file_size_re = 1'd0;
wire   [31:0] file_size_w;
reg           file_size_we = 1'd0;
wire          from10223_clk;
wire          from10223_rst;
wire          from10374_clk;
wire          from10374_rst;
reg           full_rate_phy_dfi_p0_act_n = 1'd1;
reg    [12:0] full_rate_phy_dfi_p0_address = 13'd0;
reg     [1:0] full_rate_phy_dfi_p0_bank = 2'd0;
reg           full_rate_phy_dfi_p0_cas_n = 1'd1;
reg           full_rate_phy_dfi_p0_cke = 1'd0;
reg           full_rate_phy_dfi_p0_cs_n = 1'd1;
reg           full_rate_phy_dfi_p0_odt = 1'd0;
reg           full_rate_phy_dfi_p0_ras_n = 1'd1;
reg    [15:0] full_rate_phy_dfi_p0_rddata = 16'd0;
reg           full_rate_phy_dfi_p0_rddata_en = 1'd0;
reg           full_rate_phy_dfi_p0_rddata_valid = 1'd0;
reg           full_rate_phy_dfi_p0_reset_n = 1'd0;
reg           full_rate_phy_dfi_p0_we_n = 1'd1;
reg    [15:0] full_rate_phy_dfi_p0_wrdata = 16'd0;
wire          full_rate_phy_dfi_p0_wrdata_en;
reg     [1:0] full_rate_phy_dfi_p0_wrdata_mask = 2'd0;
wire          full_rate_phy_input_reg0;
wire          full_rate_phy_input_reg1;
wire          full_rate_phy_input_reg10;
wire          full_rate_phy_input_reg11;
wire          full_rate_phy_input_reg12;
wire          full_rate_phy_input_reg13;
wire          full_rate_phy_input_reg14;
wire          full_rate_phy_input_reg15;
wire          full_rate_phy_input_reg2;
reg           full_rate_phy_input_reg20 = 1'd0;
reg           full_rate_phy_input_reg21 = 1'd0;
reg           full_rate_phy_input_reg210 = 1'd0;
reg           full_rate_phy_input_reg211 = 1'd0;
reg           full_rate_phy_input_reg212 = 1'd0;
reg           full_rate_phy_input_reg213 = 1'd0;
reg           full_rate_phy_input_reg214 = 1'd0;
reg           full_rate_phy_input_reg215 = 1'd0;
reg           full_rate_phy_input_reg22 = 1'd0;
reg           full_rate_phy_input_reg23 = 1'd0;
reg           full_rate_phy_input_reg24 = 1'd0;
reg           full_rate_phy_input_reg25 = 1'd0;
reg           full_rate_phy_input_reg26 = 1'd0;
reg           full_rate_phy_input_reg27 = 1'd0;
reg           full_rate_phy_input_reg28 = 1'd0;
reg           full_rate_phy_input_reg29 = 1'd0;
wire          full_rate_phy_input_reg3;
wire          full_rate_phy_input_reg4;
wire          full_rate_phy_input_reg5;
wire          full_rate_phy_input_reg6;
wire          full_rate_phy_input_reg7;
wire          full_rate_phy_input_reg8;
wire          full_rate_phy_input_reg9;
reg           full_rate_phy_output_en_reg0 = 1'd0;
reg           full_rate_phy_output_en_reg1 = 1'd0;
reg           full_rate_phy_output_en_reg10 = 1'd0;
reg           full_rate_phy_output_en_reg11 = 1'd0;
reg           full_rate_phy_output_en_reg12 = 1'd0;
reg           full_rate_phy_output_en_reg13 = 1'd0;
reg           full_rate_phy_output_en_reg14 = 1'd0;
reg           full_rate_phy_output_en_reg15 = 1'd0;
reg           full_rate_phy_output_en_reg2 = 1'd0;
reg           full_rate_phy_output_en_reg3 = 1'd0;
reg           full_rate_phy_output_en_reg4 = 1'd0;
reg           full_rate_phy_output_en_reg5 = 1'd0;
reg           full_rate_phy_output_en_reg6 = 1'd0;
reg           full_rate_phy_output_en_reg7 = 1'd0;
reg           full_rate_phy_output_en_reg8 = 1'd0;
reg           full_rate_phy_output_en_reg9 = 1'd0;
reg           full_rate_phy_output_reg0 = 1'd0;
reg           full_rate_phy_output_reg1 = 1'd0;
reg           full_rate_phy_output_reg10 = 1'd0;
reg           full_rate_phy_output_reg11 = 1'd0;
reg           full_rate_phy_output_reg12 = 1'd0;
reg           full_rate_phy_output_reg13 = 1'd0;
reg           full_rate_phy_output_reg14 = 1'd0;
reg           full_rate_phy_output_reg15 = 1'd0;
reg           full_rate_phy_output_reg2 = 1'd0;
reg           full_rate_phy_output_reg3 = 1'd0;
reg           full_rate_phy_output_reg4 = 1'd0;
reg           full_rate_phy_output_reg5 = 1'd0;
reg           full_rate_phy_output_reg6 = 1'd0;
reg           full_rate_phy_output_reg7 = 1'd0;
reg           full_rate_phy_output_reg8 = 1'd0;
reg           full_rate_phy_output_reg9 = 1'd0;
reg     [4:0] full_rate_phy_rddata_en = 5'd0;
reg           grant = 1'd0;
reg    [31:0] interact_storage0 = 32'd0;
reg    [31:0] interact_storage1 = 32'd0;
reg    [31:0] interact_storage10 = 32'd0;
reg    [31:0] interact_storage11 = 32'd0;
reg    [31:0] interact_storage12 = 32'd0;
reg    [31:0] interact_storage13 = 32'd0;
reg    [31:0] interact_storage14 = 32'd0;
reg    [31:0] interact_storage15 = 32'd0;
reg    [31:0] interact_storage2 = 32'd0;
reg    [31:0] interact_storage3 = 32'd0;
reg    [31:0] interact_storage4 = 32'd0;
reg    [31:0] interact_storage5 = 32'd0;
reg    [31:0] interact_storage6 = 32'd0;
reg    [31:0] interact_storage7 = 32'd0;
reg    [31:0] interact_storage8 = 32'd0;
reg    [31:0] interact_storage9 = 32'd0;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
reg    [13:0] interface1_adr_wishbone2csr_next_value1 = 14'd0;
reg           interface1_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg    [31:0] interface1_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           interface1_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg           interface1_we = 1'd0;
reg           interface1_we_wishbone2csr_next_value2 = 1'd0;
reg           interface1_we_wishbone2csr_next_value_ce2 = 1'd0;
wire          jtag_clk;
wire          jtag_inv_clk;
wire          jtag_inv_rst;
wire          jtag_rst;
reg     [3:0] jtagphy_alterajtag_next_state = 4'd0;
reg     [3:0] jtagphy_alterajtag_state = 4'd0;
reg     [1:0] jtagphy_resetinserter_next_state = 2'd0;
reg     [1:0] jtagphy_resetinserter_state = 2'd0;
reg     [1:0] litedramwishbone2native_next_state = 2'd0;
reg     [1:0] litedramwishbone2native_state = 2'd0;
reg           locked0 = 1'd0;
reg           locked1 = 1'd0;
reg           locked10 = 1'd0;
reg           locked11 = 1'd0;
reg           locked12 = 1'd0;
reg           locked13 = 1'd0;
reg           locked14 = 1'd0;
reg           locked15 = 1'd0;
reg           locked2 = 1'd0;
reg           locked3 = 1'd0;
reg           locked4 = 1'd0;
reg           locked5 = 1'd0;
reg           locked6 = 1'd0;
reg           locked7 = 1'd0;
reg           locked8 = 1'd0;
reg           locked9 = 1'd0;
reg     [6:0] master = 7'd0;
reg     [2:0] multiplexer_next_state = 3'd0;
reg     [2:0] multiplexer_state = 3'd0;
reg           multiregimpl0_regs0 = 1'd0;
reg           multiregimpl0_regs1 = 1'd0;
reg     [2:0] multiregimpl10_regs0 = 3'd0;
reg     [2:0] multiregimpl10_regs1 = 3'd0;
reg           multiregimpl11_regs0 = 1'd0;
reg           multiregimpl11_regs1 = 1'd0;
reg     [2:0] multiregimpl12_regs0 = 3'd0;
reg     [2:0] multiregimpl12_regs1 = 3'd0;
reg     [2:0] multiregimpl13_regs0 = 3'd0;
reg     [2:0] multiregimpl13_regs1 = 3'd0;
reg     [2:0] multiregimpl14_regs0 = 3'd0;
reg     [2:0] multiregimpl14_regs1 = 3'd0;
reg     [2:0] multiregimpl15_regs0 = 3'd0;
reg     [2:0] multiregimpl15_regs1 = 3'd0;
reg           multiregimpl16_regs0 = 1'd0;
reg           multiregimpl16_regs1 = 1'd0;
reg    [11:0] multiregimpl1_regs0 = 12'd0;
reg    [11:0] multiregimpl1_regs1 = 12'd0;
reg    [11:0] multiregimpl2_regs0 = 12'd0;
reg    [11:0] multiregimpl2_regs1 = 12'd0;
reg    [11:0] multiregimpl3_regs0 = 12'd0;
reg    [11:0] multiregimpl3_regs1 = 12'd0;
reg    [11:0] multiregimpl4_regs0 = 12'd0;
reg    [11:0] multiregimpl4_regs1 = 12'd0;
reg    [11:0] multiregimpl5_regs0 = 12'd0;
reg    [11:0] multiregimpl5_regs1 = 12'd0;
reg    [11:0] multiregimpl6_regs0 = 12'd0;
reg    [11:0] multiregimpl6_regs1 = 12'd0;
reg    [11:0] multiregimpl7_regs0 = 12'd0;
reg    [11:0] multiregimpl7_regs1 = 12'd0;
reg    [11:0] multiregimpl8_regs0 = 12'd0;
reg    [11:0] multiregimpl8_regs1 = 12'd0;
reg     [2:0] multiregimpl9_regs0 = 3'd0;
reg     [2:0] multiregimpl9_regs1 = 3'd0;
reg           new_master_rdata_valid0 = 1'd0;
reg           new_master_rdata_valid1 = 1'd0;
reg           new_master_rdata_valid10 = 1'd0;
reg           new_master_rdata_valid11 = 1'd0;
reg           new_master_rdata_valid12 = 1'd0;
reg           new_master_rdata_valid13 = 1'd0;
reg           new_master_rdata_valid14 = 1'd0;
reg           new_master_rdata_valid15 = 1'd0;
reg           new_master_rdata_valid2 = 1'd0;
reg           new_master_rdata_valid3 = 1'd0;
reg           new_master_rdata_valid4 = 1'd0;
reg           new_master_rdata_valid5 = 1'd0;
reg           new_master_rdata_valid6 = 1'd0;
reg           new_master_rdata_valid7 = 1'd0;
reg           new_master_rdata_valid8 = 1'd0;
reg           new_master_rdata_valid9 = 1'd0;
reg           new_master_wdata_ready0 = 1'd0;
reg           new_master_wdata_ready1 = 1'd0;
reg           new_master_wdata_ready2 = 1'd0;
reg           new_master_wdata_ready3 = 1'd0;
wire   [31:0] out_r;
reg           out_re = 1'd0;
reg    [31:0] out_w = 32'd0;
reg           out_we = 1'd0;
reg           phase_sel = 1'd0;
reg           phase_sys = 1'd0;
reg           phase_sys2x = 1'd0;
reg           playback_en_re = 1'd0;
reg           playback_en_storage = 1'd0;
reg           prev_complete_trigger = 1'd0;
reg           ram_data_address_re = 1'd0;
reg    [31:0] ram_data_address_storage = 32'd0;
reg    [15:0] rddata_d = 16'd0;
reg     [1:0] refresher_next_state = 2'd0;
reg     [1:0] refresher_state = 2'd0;
wire    [1:0] request;
wire          request_getfile_r;
reg           request_getfile_re = 1'd0;
reg           request_getfile_w = 1'd0;
reg           request_getfile_we = 1'd0;
wire          request_openfile_r;
reg           request_openfile_re = 1'd0;
reg           request_openfile_w = 1'd0;
reg           request_openfile_we = 1'd0;
wire          request_read_r;
reg           request_read_re = 1'd0;
reg           request_read_w = 1'd0;
reg           request_read_we = 1'd0;
wire          request_write_r;
reg           request_write_re = 1'd0;
reg           request_write_w = 1'd0;
reg           request_write_we = 1'd0;
reg    [29:0] rhs_self0 = 30'd0;
reg    [31:0] rhs_self1 = 32'd0;
reg     [1:0] rhs_self10 = 2'd0;
reg           rhs_self11 = 1'd0;
reg           rhs_self12 = 1'd0;
reg           rhs_self13 = 1'd0;
reg           rhs_self14 = 1'd0;
reg    [12:0] rhs_self15 = 13'd0;
reg     [1:0] rhs_self16 = 2'd0;
reg           rhs_self17 = 1'd0;
reg           rhs_self18 = 1'd0;
reg           rhs_self19 = 1'd0;
reg     [3:0] rhs_self2 = 4'd0;
reg    [21:0] rhs_self20 = 22'd0;
reg           rhs_self21 = 1'd0;
reg           rhs_self22 = 1'd0;
reg    [21:0] rhs_self23 = 22'd0;
reg           rhs_self24 = 1'd0;
reg           rhs_self25 = 1'd0;
reg    [21:0] rhs_self26 = 22'd0;
reg           rhs_self27 = 1'd0;
reg           rhs_self28 = 1'd0;
reg    [21:0] rhs_self29 = 22'd0;
reg           rhs_self3 = 1'd0;
reg           rhs_self30 = 1'd0;
reg           rhs_self31 = 1'd0;
reg           rhs_self4 = 1'd0;
reg           rhs_self5 = 1'd0;
reg     [2:0] rhs_self6 = 3'd0;
reg     [1:0] rhs_self7 = 2'd0;
reg           rhs_self8 = 1'd0;
reg    [12:0] rhs_self9 = 13'd0;
wire          roundrobin0_ce;
reg     [1:0] roundrobin0_grant = 2'd0;
wire    [3:0] roundrobin0_request;
wire          roundrobin1_ce;
reg     [1:0] roundrobin1_grant = 2'd0;
wire    [3:0] roundrobin1_request;
wire          roundrobin2_ce;
reg     [1:0] roundrobin2_grant = 2'd0;
wire    [3:0] roundrobin2_request;
wire          roundrobin3_ce;
reg     [1:0] roundrobin3_grant = 2'd0;
wire    [3:0] roundrobin3_request;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
reg           scaler_slot_re = 1'd0;
reg     [3:0] scaler_slot_storage = 4'd0;
reg     [1:0] self0 = 2'd0;
reg    [12:0] self1 = 13'd0;
reg           self10 = 1'd0;
reg           self11 = 1'd0;
reg           self12 = 1'd0;
reg           self13 = 1'd0;
reg           self2 = 1'd0;
reg           self3 = 1'd0;
reg           self4 = 1'd0;
reg           self5 = 1'd0;
reg           self6 = 1'd0;
reg     [1:0] self7 = 2'd0;
reg    [12:0] self8 = 13'd0;
reg           self9 = 1'd0;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
wire          sink_first;
wire          sink_last;
wire    [7:0] sink_payload_b;
wire          sink_payload_de;
wire    [7:0] sink_payload_g;
wire          sink_payload_hsync;
wire    [7:0] sink_payload_r;
wire          sink_payload_vsync;
wire          sink_ready;
wire          sink_valid;
reg     [6:0] slaves = 7'd0;
reg           slot_id_re = 1'd0;
reg    [15:0] slot_id_storage = 16'd0;
reg           status_re = 1'd0;
reg           status_status = 1'd0;
wire          status_we;
wire          sys2x_90deg_clk;
wire          sys2x_clk;
wire          sys2x_rst;
wire          sys_clk;
wire          sys_jtag_clk;
reg           sys_jtag_rst = 1'd0;
wire          sys_rst;
reg           t_self0 = 1'd0;
reg           t_self1 = 1'd0;
reg           t_self2 = 1'd0;
reg           t_self3 = 1'd0;
reg           t_self4 = 1'd0;
reg           t_self5 = 1'd0;
reg           time_bcd_re = 1'd0;
wire   [31:0] time_bcd_status;
wire          time_bcd_we;
wire          to10223_clk;
wire          to10223_rst;
wire          to10374_clk;
wire          to10374_rst;
reg           transfer_length_re = 1'd0;
reg    [31:0] transfer_length_storage = 32'd0;
reg           unix_seconds_re = 1'd0;
wire   [31:0] unix_seconds_status;
wire          unix_seconds_we;
wire          vid_clk;
reg           vid_rst = 1'd0;
reg     [1:0] videoframebuffer_litedramdmareader_next_state = 2'd0;
reg     [1:0] videoframebuffer_litedramdmareader_state = 2'd0;
reg           videoframebuffer_resetinserter_next_state = 1'd0;
reg           videoframebuffer_resetinserter_state = 1'd0;
wire          wait_1;
reg     [1:0] wishbone2csr_next_state = 2'd0;
reg     [1:0] wishbone2csr_state = 2'd0;
reg           wr_data_en_d = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_basesoc_reset = (basesoc_basesoc_soc_rst | basesoc_basesoc_cpu_rst);
assign basesoc_litedramnativeport0_cmd_valid = basesoc_ibus_cmd_valid;
assign basesoc_ibus_cmd_ready = basesoc_litedramnativeport0_cmd_ready;
assign basesoc_litedramnativeport0_cmd_first = basesoc_ibus_cmd_first;
assign basesoc_litedramnativeport0_cmd_last = basesoc_ibus_cmd_last;
assign basesoc_litedramnativeport0_cmd_payload_we = basesoc_ibus_cmd_payload_we;
assign basesoc_litedramnativeport0_cmd_payload_addr = basesoc_ibus_cmd_payload_addr;
assign basesoc_litedramnativeport0_wdata_valid = basesoc_ibus_wdata_valid;
assign basesoc_ibus_wdata_ready = basesoc_litedramnativeport0_wdata_ready;
assign basesoc_litedramnativeport0_wdata_first = basesoc_ibus_wdata_first;
assign basesoc_litedramnativeport0_wdata_last = basesoc_ibus_wdata_last;
assign basesoc_litedramnativeport0_wdata_payload_data = basesoc_ibus_wdata_payload_data;
assign basesoc_litedramnativeport0_wdata_payload_we = basesoc_ibus_wdata_payload_we;
assign basesoc_ibus_rdata_valid = basesoc_litedramnativeport0_rdata_valid;
assign basesoc_litedramnativeport0_rdata_ready = basesoc_ibus_rdata_ready;
assign basesoc_ibus_rdata_first = basesoc_litedramnativeport0_rdata_first;
assign basesoc_ibus_rdata_last = basesoc_litedramnativeport0_rdata_last;
assign basesoc_ibus_rdata_payload_data = basesoc_litedramnativeport0_rdata_payload_data;
assign basesoc_litedramnativeport1_cmd_valid = basesoc_dbus_cmd_valid;
assign basesoc_dbus_cmd_ready = basesoc_litedramnativeport1_cmd_ready;
assign basesoc_litedramnativeport1_cmd_first = basesoc_dbus_cmd_first;
assign basesoc_litedramnativeport1_cmd_last = basesoc_dbus_cmd_last;
assign basesoc_litedramnativeport1_cmd_payload_we = basesoc_dbus_cmd_payload_we;
assign basesoc_litedramnativeport1_cmd_payload_addr = basesoc_dbus_cmd_payload_addr;
assign basesoc_litedramnativeport1_wdata_valid = basesoc_dbus_wdata_valid;
assign basesoc_dbus_wdata_ready = basesoc_litedramnativeport1_wdata_ready;
assign basesoc_litedramnativeport1_wdata_first = basesoc_dbus_wdata_first;
assign basesoc_litedramnativeport1_wdata_last = basesoc_dbus_wdata_last;
assign basesoc_litedramnativeport1_wdata_payload_data = basesoc_dbus_wdata_payload_data;
assign basesoc_litedramnativeport1_wdata_payload_we = basesoc_dbus_wdata_payload_we;
assign basesoc_dbus_rdata_valid = basesoc_litedramnativeport1_rdata_valid;
assign basesoc_litedramnativeport1_rdata_ready = basesoc_dbus_rdata_ready;
assign basesoc_dbus_rdata_first = basesoc_litedramnativeport1_rdata_first;
assign basesoc_dbus_rdata_last = basesoc_litedramnativeport1_rdata_last;
assign basesoc_dbus_rdata_payload_data = basesoc_litedramnativeport1_rdata_payload_data;
assign basesoc_videoframebuffer_vtg_sink_valid = basesoc_vtg_source_valid;
assign basesoc_vtg_source_ready = basesoc_videoframebuffer_vtg_sink_ready;
assign basesoc_videoframebuffer_vtg_sink_first = basesoc_vtg_source_first;
assign basesoc_videoframebuffer_vtg_sink_last = basesoc_vtg_source_last;
assign basesoc_videoframebuffer_vtg_sink_payload_hsync = basesoc_vtg_source_payload_hsync;
assign basesoc_videoframebuffer_vtg_sink_payload_vsync = basesoc_vtg_source_payload_vsync;
assign basesoc_videoframebuffer_vtg_sink_payload_de = basesoc_vtg_source_payload_de;
assign basesoc_videoframebuffer_vtg_sink_payload_hres = basesoc_vtg_source_payload_hres;
assign basesoc_videoframebuffer_vtg_sink_payload_vres = basesoc_vtg_source_payload_vres;
assign basesoc_videoframebuffer_vtg_sink_payload_hcount = basesoc_vtg_source_payload_hcount;
assign basesoc_videoframebuffer_vtg_sink_payload_vcount = basesoc_vtg_source_payload_vcount;
assign sink_valid = basesoc_videoframebuffer_source_valid;
assign basesoc_videoframebuffer_source_ready = sink_ready;
assign sink_first = basesoc_videoframebuffer_source_first;
assign sink_last = basesoc_videoframebuffer_source_last;
assign sink_payload_hsync = basesoc_videoframebuffer_source_payload_hsync;
assign sink_payload_vsync = basesoc_videoframebuffer_source_payload_vsync;
assign sink_payload_de = basesoc_videoframebuffer_source_payload_de;
assign sink_payload_r = basesoc_videoframebuffer_source_payload_r;
assign sink_payload_g = basesoc_videoframebuffer_source_payload_g;
assign sink_payload_b = basesoc_videoframebuffer_source_payload_b;
assign sys_jtag_clk = sys_clk;
assign basesoc_uart_phy_sel = (~use_jtag);
assign wishbone_adr = example_slave_adr;
assign wishbone_dat_w = example_slave_dat_w;
assign example_slave_dat_r = wishbone_dat_r;
assign wishbone_sel = example_slave_sel;
assign wishbone_cyc = example_slave_cyc;
assign wishbone_stb = example_slave_stb;
assign example_slave_ack = wishbone_ack;
assign wishbone_we = example_slave_we;
assign wishbone_cti = example_slave_cti;
assign wishbone_bte = example_slave_bte;
assign example_slave_err = wishbone_err;
assign apf_bridge_master_adr = wishbone_master_adr;
assign apf_bridge_master_dat_w = wishbone_master_dat_w;
assign wishbone_master_dat_r = apf_bridge_master_dat_r;
assign apf_bridge_master_sel = wishbone_master_sel;
assign apf_bridge_master_cyc = wishbone_master_cyc;
assign apf_bridge_master_stb = wishbone_master_stb;
assign wishbone_master_ack = apf_bridge_master_ack;
assign apf_bridge_master_we = wishbone_master_we;
assign apf_bridge_master_cti = wishbone_master_cti;
assign apf_bridge_master_bte = wishbone_master_bte;
assign wishbone_master_err = apf_bridge_master_err;
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign basesoc_basesoc_bus_error = error;
always @(*) begin
    basesoc_basesoc_interrupt <= 32'd0;
    basesoc_basesoc_interrupt[1] <= basesoc_basesoc_irq;
    basesoc_basesoc_interrupt[2] <= basesoc_uart_irq;
end
assign sys_clk = clk_sys;
assign sys_rst = (crg_rst | reset);
assign sys2x_clk = clk_sys2x;
assign sys2x_rst = (crg_rst | reset);
assign sys2x_90deg_clk = clk_sys2x_90deg;
assign vid_clk = clk_vid;
assign shared_adr = rhs_self0;
assign shared_dat_w = rhs_self1;
assign shared_sel = rhs_self2;
assign shared_cyc = rhs_self3;
assign shared_stb = rhs_self4;
assign shared_we = rhs_self5;
assign shared_cti = rhs_self6;
assign shared_bte = rhs_self7;
assign basesoc_basesoc_pbus_dat_r = shared_dat_r;
assign apf_bridge_master_dat_r = shared_dat_r;
assign basesoc_basesoc_pbus_ack = (shared_ack & (grant == 1'd0));
assign apf_bridge_master_ack = (shared_ack & (grant == 1'd1));
assign basesoc_basesoc_pbus_err = (shared_err & (grant == 1'd0));
assign apf_bridge_master_err = (shared_err & (grant == 1'd1));
assign request = {apf_bridge_master_cyc, basesoc_basesoc_pbus_cyc};
always @(*) begin
    master <= 7'd0;
    master[0] <= (shared_adr[29:20] == 10'd963);
    master[1] <= (shared_adr[29:14] == 16'd61441);
    master[2] <= (shared_adr[29:15] == 1'd0);
    master[3] <= (shared_adr[29:11] == 16'd32768);
    master[4] <= (shared_adr[29:24] == 5'd16);
    master[5] <= (shared_adr[29:18] == 12'd2048);
    master[6] <= (shared_adr[29:14] == 16'd61440);
end
assign basesoc_basesoc_plicbus_adr = shared_adr;
assign basesoc_basesoc_plicbus_dat_w = shared_dat_w;
assign basesoc_basesoc_plicbus_sel = shared_sel;
assign basesoc_basesoc_plicbus_stb = shared_stb;
assign basesoc_basesoc_plicbus_we = shared_we;
assign basesoc_basesoc_plicbus_cti = shared_cti;
assign basesoc_basesoc_plicbus_bte = shared_bte;
assign basesoc_basesoc_clintbus_adr = shared_adr;
assign basesoc_basesoc_clintbus_dat_w = shared_dat_w;
assign basesoc_basesoc_clintbus_sel = shared_sel;
assign basesoc_basesoc_clintbus_stb = shared_stb;
assign basesoc_basesoc_clintbus_we = shared_we;
assign basesoc_basesoc_clintbus_cti = shared_cti;
assign basesoc_basesoc_clintbus_bte = shared_bte;
assign basesoc_basesoc_basesoc_ram_bus_adr = shared_adr;
assign basesoc_basesoc_basesoc_ram_bus_dat_w = shared_dat_w;
assign basesoc_basesoc_basesoc_ram_bus_sel = shared_sel;
assign basesoc_basesoc_basesoc_ram_bus_stb = shared_stb;
assign basesoc_basesoc_basesoc_ram_bus_we = shared_we;
assign basesoc_basesoc_basesoc_ram_bus_cti = shared_cti;
assign basesoc_basesoc_basesoc_ram_bus_bte = shared_bte;
assign basesoc_basesoc_ram_bus_ram_bus_adr = shared_adr;
assign basesoc_basesoc_ram_bus_ram_bus_dat_w = shared_dat_w;
assign basesoc_basesoc_ram_bus_ram_bus_sel = shared_sel;
assign basesoc_basesoc_ram_bus_ram_bus_stb = shared_stb;
assign basesoc_basesoc_ram_bus_ram_bus_we = shared_we;
assign basesoc_basesoc_ram_bus_ram_bus_cti = shared_cti;
assign basesoc_basesoc_ram_bus_ram_bus_bte = shared_bte;
assign basesoc_wb_sdram_adr = shared_adr;
assign basesoc_wb_sdram_dat_w = shared_dat_w;
assign basesoc_wb_sdram_sel = shared_sel;
assign basesoc_wb_sdram_stb = shared_stb;
assign basesoc_wb_sdram_we = shared_we;
assign basesoc_wb_sdram_cti = shared_cti;
assign basesoc_wb_sdram_bte = shared_bte;
assign example_slave_adr = shared_adr;
assign example_slave_dat_w = shared_dat_w;
assign example_slave_sel = shared_sel;
assign example_slave_stb = shared_stb;
assign example_slave_we = shared_we;
assign example_slave_cti = shared_cti;
assign example_slave_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign basesoc_basesoc_plicbus_cyc = (shared_cyc & master[0]);
assign basesoc_basesoc_clintbus_cyc = (shared_cyc & master[1]);
assign basesoc_basesoc_basesoc_ram_bus_cyc = (shared_cyc & master[2]);
assign basesoc_basesoc_ram_bus_ram_bus_cyc = (shared_cyc & master[3]);
assign basesoc_wb_sdram_cyc = (shared_cyc & master[4]);
assign example_slave_cyc = (shared_cyc & master[5]);
assign interface0_cyc = (shared_cyc & master[6]);
assign shared_err = ((((((basesoc_basesoc_plicbus_err | basesoc_basesoc_clintbus_err) | basesoc_basesoc_basesoc_ram_bus_err) | basesoc_basesoc_ram_bus_ram_bus_err) | basesoc_wb_sdram_err) | example_slave_err) | interface0_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    shared_ack <= 1'd0;
    shared_dat_r <= 32'd0;
    shared_ack <= ((((((basesoc_basesoc_plicbus_ack | basesoc_basesoc_clintbus_ack) | basesoc_basesoc_basesoc_ram_bus_ack) | basesoc_basesoc_ram_bus_ram_bus_ack) | basesoc_wb_sdram_ack) | example_slave_ack) | interface0_ack);
    shared_dat_r <= ((((((({32{slaves[0]}} & basesoc_basesoc_plicbus_dat_r) | ({32{slaves[1]}} & basesoc_basesoc_clintbus_dat_r)) | ({32{slaves[2]}} & basesoc_basesoc_basesoc_ram_bus_dat_r)) | ({32{slaves[3]}} & basesoc_basesoc_ram_bus_ram_bus_dat_r)) | ({32{slaves[4]}} & basesoc_wb_sdram_dat_r)) | ({32{slaves[5]}} & example_slave_dat_r)) | ({32{slaves[6]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign basesoc_basesoc_bus_errors_status = basesoc_basesoc_bus_errors;
assign basesoc_basesoc_basesoc_adr = basesoc_basesoc_basesoc_ram_bus_adr[14:0];
assign basesoc_basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_basesoc_dat_r;
always @(*) begin
    basesoc_basesoc_ram_we <= 4'd0;
    basesoc_basesoc_ram_we[0] <= (((basesoc_basesoc_ram_bus_ram_bus_cyc & basesoc_basesoc_ram_bus_ram_bus_stb) & basesoc_basesoc_ram_bus_ram_bus_we) & basesoc_basesoc_ram_bus_ram_bus_sel[0]);
    basesoc_basesoc_ram_we[1] <= (((basesoc_basesoc_ram_bus_ram_bus_cyc & basesoc_basesoc_ram_bus_ram_bus_stb) & basesoc_basesoc_ram_bus_ram_bus_we) & basesoc_basesoc_ram_bus_ram_bus_sel[1]);
    basesoc_basesoc_ram_we[2] <= (((basesoc_basesoc_ram_bus_ram_bus_cyc & basesoc_basesoc_ram_bus_ram_bus_stb) & basesoc_basesoc_ram_bus_ram_bus_we) & basesoc_basesoc_ram_bus_ram_bus_sel[2]);
    basesoc_basesoc_ram_we[3] <= (((basesoc_basesoc_ram_bus_ram_bus_cyc & basesoc_basesoc_ram_bus_ram_bus_stb) & basesoc_basesoc_ram_bus_ram_bus_we) & basesoc_basesoc_ram_bus_ram_bus_sel[3]);
end
assign basesoc_basesoc_ram_adr = basesoc_basesoc_ram_bus_ram_bus_adr[10:0];
assign basesoc_basesoc_ram_bus_ram_bus_dat_r = basesoc_basesoc_ram_dat_r;
assign basesoc_basesoc_ram_dat_w = basesoc_basesoc_ram_bus_ram_bus_dat_w;
assign basesoc_basesoc_zero_trigger = (basesoc_basesoc_value == 1'd0);
assign basesoc_basesoc_zero0 = basesoc_basesoc_zero_status;
assign basesoc_basesoc_zero1 = basesoc_basesoc_zero_pending;
always @(*) begin
    basesoc_basesoc_zero_clear <= 1'd0;
    if ((basesoc_basesoc_pending_re & basesoc_basesoc_pending_r)) begin
        basesoc_basesoc_zero_clear <= 1'd1;
    end
end
assign basesoc_basesoc_irq = (basesoc_basesoc_pending_status & basesoc_basesoc_enable_storage);
assign basesoc_basesoc_zero_status = basesoc_basesoc_zero_trigger;
always @(*) begin
    full_rate_phy_dfi_p0_act_n <= 1'd1;
    full_rate_phy_dfi_p0_address <= 13'd0;
    full_rate_phy_dfi_p0_bank <= 2'd0;
    full_rate_phy_dfi_p0_cas_n <= 1'd1;
    full_rate_phy_dfi_p0_cke <= 1'd0;
    full_rate_phy_dfi_p0_cs_n <= 1'd1;
    full_rate_phy_dfi_p0_odt <= 1'd0;
    full_rate_phy_dfi_p0_ras_n <= 1'd1;
    full_rate_phy_dfi_p0_rddata_en <= 1'd0;
    full_rate_phy_dfi_p0_reset_n <= 1'd0;
    full_rate_phy_dfi_p0_we_n <= 1'd1;
    full_rate_phy_dfi_p0_wrdata <= 16'd0;
    full_rate_phy_dfi_p0_wrdata_mask <= 2'd0;
    case (phase_sel)
        1'd0: begin
            full_rate_phy_dfi_p0_address <= dfi_dfi_p0_address;
            full_rate_phy_dfi_p0_bank <= dfi_dfi_p0_bank;
            full_rate_phy_dfi_p0_cas_n <= dfi_dfi_p0_cas_n;
            full_rate_phy_dfi_p0_cs_n <= dfi_dfi_p0_cs_n;
            full_rate_phy_dfi_p0_ras_n <= dfi_dfi_p0_ras_n;
            full_rate_phy_dfi_p0_we_n <= dfi_dfi_p0_we_n;
            full_rate_phy_dfi_p0_cke <= dfi_dfi_p0_cke;
            full_rate_phy_dfi_p0_odt <= dfi_dfi_p0_odt;
            full_rate_phy_dfi_p0_reset_n <= dfi_dfi_p0_reset_n;
            full_rate_phy_dfi_p0_act_n <= dfi_dfi_p0_act_n;
            full_rate_phy_dfi_p0_wrdata <= dfi_dfi_p0_wrdata;
            full_rate_phy_dfi_p0_wrdata_mask <= dfi_dfi_p0_wrdata_mask;
            full_rate_phy_dfi_p0_rddata_en <= dfi_dfi_p0_rddata_en;
        end
        1'd1: begin
            full_rate_phy_dfi_p0_address <= dfi_dfi_p1_address;
            full_rate_phy_dfi_p0_bank <= dfi_dfi_p1_bank;
            full_rate_phy_dfi_p0_cas_n <= dfi_dfi_p1_cas_n;
            full_rate_phy_dfi_p0_cs_n <= dfi_dfi_p1_cs_n;
            full_rate_phy_dfi_p0_ras_n <= dfi_dfi_p1_ras_n;
            full_rate_phy_dfi_p0_we_n <= dfi_dfi_p1_we_n;
            full_rate_phy_dfi_p0_cke <= dfi_dfi_p1_cke;
            full_rate_phy_dfi_p0_odt <= dfi_dfi_p1_odt;
            full_rate_phy_dfi_p0_reset_n <= dfi_dfi_p1_reset_n;
            full_rate_phy_dfi_p0_act_n <= dfi_dfi_p1_act_n;
            full_rate_phy_dfi_p0_wrdata <= dfi_dfi_p1_wrdata;
            full_rate_phy_dfi_p0_wrdata_mask <= dfi_dfi_p1_wrdata_mask;
            full_rate_phy_dfi_p0_rddata_en <= dfi_dfi_p1_rddata_en;
        end
    endcase
end
assign full_rate_phy_dfi_p0_wrdata_en = ((dfi_dfi_p0_wrdata_en & (phase_sel == 1'd0)) | wr_data_en_d);
assign dfi_dfi_p0_rddata = rddata_d;
assign dfi_dfi_p0_rddata_valid = full_rate_phy_dfi_p0_rddata_valid;
assign dfi_dfi_p1_rddata = full_rate_phy_dfi_p0_rddata;
assign dfi_dfi_p1_rddata_valid = full_rate_phy_dfi_p0_rddata_valid;
assign dfi_dfi_p0_address = basesoc_sdram_master_p0_address;
assign dfi_dfi_p0_bank = basesoc_sdram_master_p0_bank;
assign dfi_dfi_p0_cas_n = basesoc_sdram_master_p0_cas_n;
assign dfi_dfi_p0_cs_n = basesoc_sdram_master_p0_cs_n;
assign dfi_dfi_p0_ras_n = basesoc_sdram_master_p0_ras_n;
assign dfi_dfi_p0_we_n = basesoc_sdram_master_p0_we_n;
assign dfi_dfi_p0_cke = basesoc_sdram_master_p0_cke;
assign dfi_dfi_p0_odt = basesoc_sdram_master_p0_odt;
assign dfi_dfi_p0_reset_n = basesoc_sdram_master_p0_reset_n;
assign dfi_dfi_p0_act_n = basesoc_sdram_master_p0_act_n;
assign dfi_dfi_p0_wrdata = basesoc_sdram_master_p0_wrdata;
assign dfi_dfi_p0_wrdata_en = basesoc_sdram_master_p0_wrdata_en;
assign dfi_dfi_p0_wrdata_mask = basesoc_sdram_master_p0_wrdata_mask;
assign dfi_dfi_p0_rddata_en = basesoc_sdram_master_p0_rddata_en;
assign basesoc_sdram_master_p0_rddata = dfi_dfi_p0_rddata;
assign basesoc_sdram_master_p0_rddata_valid = dfi_dfi_p0_rddata_valid;
assign dfi_dfi_p1_address = basesoc_sdram_master_p1_address;
assign dfi_dfi_p1_bank = basesoc_sdram_master_p1_bank;
assign dfi_dfi_p1_cas_n = basesoc_sdram_master_p1_cas_n;
assign dfi_dfi_p1_cs_n = basesoc_sdram_master_p1_cs_n;
assign dfi_dfi_p1_ras_n = basesoc_sdram_master_p1_ras_n;
assign dfi_dfi_p1_we_n = basesoc_sdram_master_p1_we_n;
assign dfi_dfi_p1_cke = basesoc_sdram_master_p1_cke;
assign dfi_dfi_p1_odt = basesoc_sdram_master_p1_odt;
assign dfi_dfi_p1_reset_n = basesoc_sdram_master_p1_reset_n;
assign dfi_dfi_p1_act_n = basesoc_sdram_master_p1_act_n;
assign dfi_dfi_p1_wrdata = basesoc_sdram_master_p1_wrdata;
assign dfi_dfi_p1_wrdata_en = basesoc_sdram_master_p1_wrdata_en;
assign dfi_dfi_p1_wrdata_mask = basesoc_sdram_master_p1_wrdata_mask;
assign dfi_dfi_p1_rddata_en = basesoc_sdram_master_p1_rddata_en;
assign basesoc_sdram_master_p1_rddata = dfi_dfi_p1_rddata;
assign basesoc_sdram_master_p1_rddata_valid = dfi_dfi_p1_rddata_valid;
assign basesoc_sdram_slave_p0_address = basesoc_sdram_dfi_p0_address;
assign basesoc_sdram_slave_p0_bank = basesoc_sdram_dfi_p0_bank;
assign basesoc_sdram_slave_p0_cas_n = basesoc_sdram_dfi_p0_cas_n;
assign basesoc_sdram_slave_p0_cs_n = basesoc_sdram_dfi_p0_cs_n;
assign basesoc_sdram_slave_p0_ras_n = basesoc_sdram_dfi_p0_ras_n;
assign basesoc_sdram_slave_p0_we_n = basesoc_sdram_dfi_p0_we_n;
assign basesoc_sdram_slave_p0_cke = basesoc_sdram_dfi_p0_cke;
assign basesoc_sdram_slave_p0_odt = basesoc_sdram_dfi_p0_odt;
assign basesoc_sdram_slave_p0_reset_n = basesoc_sdram_dfi_p0_reset_n;
assign basesoc_sdram_slave_p0_act_n = basesoc_sdram_dfi_p0_act_n;
assign basesoc_sdram_slave_p0_wrdata = basesoc_sdram_dfi_p0_wrdata;
assign basesoc_sdram_slave_p0_wrdata_en = basesoc_sdram_dfi_p0_wrdata_en;
assign basesoc_sdram_slave_p0_wrdata_mask = basesoc_sdram_dfi_p0_wrdata_mask;
assign basesoc_sdram_slave_p0_rddata_en = basesoc_sdram_dfi_p0_rddata_en;
assign basesoc_sdram_dfi_p0_rddata = basesoc_sdram_slave_p0_rddata;
assign basesoc_sdram_dfi_p0_rddata_valid = basesoc_sdram_slave_p0_rddata_valid;
assign basesoc_sdram_slave_p1_address = basesoc_sdram_dfi_p1_address;
assign basesoc_sdram_slave_p1_bank = basesoc_sdram_dfi_p1_bank;
assign basesoc_sdram_slave_p1_cas_n = basesoc_sdram_dfi_p1_cas_n;
assign basesoc_sdram_slave_p1_cs_n = basesoc_sdram_dfi_p1_cs_n;
assign basesoc_sdram_slave_p1_ras_n = basesoc_sdram_dfi_p1_ras_n;
assign basesoc_sdram_slave_p1_we_n = basesoc_sdram_dfi_p1_we_n;
assign basesoc_sdram_slave_p1_cke = basesoc_sdram_dfi_p1_cke;
assign basesoc_sdram_slave_p1_odt = basesoc_sdram_dfi_p1_odt;
assign basesoc_sdram_slave_p1_reset_n = basesoc_sdram_dfi_p1_reset_n;
assign basesoc_sdram_slave_p1_act_n = basesoc_sdram_dfi_p1_act_n;
assign basesoc_sdram_slave_p1_wrdata = basesoc_sdram_dfi_p1_wrdata;
assign basesoc_sdram_slave_p1_wrdata_en = basesoc_sdram_dfi_p1_wrdata_en;
assign basesoc_sdram_slave_p1_wrdata_mask = basesoc_sdram_dfi_p1_wrdata_mask;
assign basesoc_sdram_slave_p1_rddata_en = basesoc_sdram_dfi_p1_rddata_en;
assign basesoc_sdram_dfi_p1_rddata = basesoc_sdram_slave_p1_rddata;
assign basesoc_sdram_dfi_p1_rddata_valid = basesoc_sdram_slave_p1_rddata_valid;
always @(*) begin
    basesoc_sdram_csr_dfi_p0_rddata <= 16'd0;
    basesoc_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    basesoc_sdram_csr_dfi_p1_rddata <= 16'd0;
    basesoc_sdram_csr_dfi_p1_rddata_valid <= 1'd0;
    basesoc_sdram_ext_dfi_p0_rddata <= 16'd0;
    basesoc_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    basesoc_sdram_ext_dfi_p1_rddata <= 16'd0;
    basesoc_sdram_ext_dfi_p1_rddata_valid <= 1'd0;
    basesoc_sdram_master_p0_act_n <= 1'd1;
    basesoc_sdram_master_p0_address <= 13'd0;
    basesoc_sdram_master_p0_bank <= 2'd0;
    basesoc_sdram_master_p0_cas_n <= 1'd1;
    basesoc_sdram_master_p0_cke <= 1'd0;
    basesoc_sdram_master_p0_cs_n <= 1'd1;
    basesoc_sdram_master_p0_odt <= 1'd0;
    basesoc_sdram_master_p0_ras_n <= 1'd1;
    basesoc_sdram_master_p0_rddata_en <= 1'd0;
    basesoc_sdram_master_p0_reset_n <= 1'd0;
    basesoc_sdram_master_p0_we_n <= 1'd1;
    basesoc_sdram_master_p0_wrdata <= 16'd0;
    basesoc_sdram_master_p0_wrdata_en <= 1'd0;
    basesoc_sdram_master_p0_wrdata_mask <= 2'd0;
    basesoc_sdram_master_p1_act_n <= 1'd1;
    basesoc_sdram_master_p1_address <= 13'd0;
    basesoc_sdram_master_p1_bank <= 2'd0;
    basesoc_sdram_master_p1_cas_n <= 1'd1;
    basesoc_sdram_master_p1_cke <= 1'd0;
    basesoc_sdram_master_p1_cs_n <= 1'd1;
    basesoc_sdram_master_p1_odt <= 1'd0;
    basesoc_sdram_master_p1_ras_n <= 1'd1;
    basesoc_sdram_master_p1_rddata_en <= 1'd0;
    basesoc_sdram_master_p1_reset_n <= 1'd0;
    basesoc_sdram_master_p1_we_n <= 1'd1;
    basesoc_sdram_master_p1_wrdata <= 16'd0;
    basesoc_sdram_master_p1_wrdata_en <= 1'd0;
    basesoc_sdram_master_p1_wrdata_mask <= 2'd0;
    basesoc_sdram_slave_p0_rddata <= 16'd0;
    basesoc_sdram_slave_p0_rddata_valid <= 1'd0;
    basesoc_sdram_slave_p1_rddata <= 16'd0;
    basesoc_sdram_slave_p1_rddata_valid <= 1'd0;
    if (basesoc_sdram_sel) begin
        if (basesoc_sdram_ext_dfi_sel) begin
            basesoc_sdram_master_p0_address <= basesoc_sdram_ext_dfi_p0_address;
            basesoc_sdram_master_p0_bank <= basesoc_sdram_ext_dfi_p0_bank;
            basesoc_sdram_master_p0_cas_n <= basesoc_sdram_ext_dfi_p0_cas_n;
            basesoc_sdram_master_p0_cs_n <= basesoc_sdram_ext_dfi_p0_cs_n;
            basesoc_sdram_master_p0_ras_n <= basesoc_sdram_ext_dfi_p0_ras_n;
            basesoc_sdram_master_p0_we_n <= basesoc_sdram_ext_dfi_p0_we_n;
            basesoc_sdram_master_p0_cke <= basesoc_sdram_ext_dfi_p0_cke;
            basesoc_sdram_master_p0_odt <= basesoc_sdram_ext_dfi_p0_odt;
            basesoc_sdram_master_p0_reset_n <= basesoc_sdram_ext_dfi_p0_reset_n;
            basesoc_sdram_master_p0_act_n <= basesoc_sdram_ext_dfi_p0_act_n;
            basesoc_sdram_master_p0_wrdata <= basesoc_sdram_ext_dfi_p0_wrdata;
            basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_ext_dfi_p0_wrdata_en;
            basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_ext_dfi_p0_wrdata_mask;
            basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_ext_dfi_p0_rddata_en;
            basesoc_sdram_ext_dfi_p0_rddata <= basesoc_sdram_master_p0_rddata;
            basesoc_sdram_ext_dfi_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
            basesoc_sdram_master_p1_address <= basesoc_sdram_ext_dfi_p1_address;
            basesoc_sdram_master_p1_bank <= basesoc_sdram_ext_dfi_p1_bank;
            basesoc_sdram_master_p1_cas_n <= basesoc_sdram_ext_dfi_p1_cas_n;
            basesoc_sdram_master_p1_cs_n <= basesoc_sdram_ext_dfi_p1_cs_n;
            basesoc_sdram_master_p1_ras_n <= basesoc_sdram_ext_dfi_p1_ras_n;
            basesoc_sdram_master_p1_we_n <= basesoc_sdram_ext_dfi_p1_we_n;
            basesoc_sdram_master_p1_cke <= basesoc_sdram_ext_dfi_p1_cke;
            basesoc_sdram_master_p1_odt <= basesoc_sdram_ext_dfi_p1_odt;
            basesoc_sdram_master_p1_reset_n <= basesoc_sdram_ext_dfi_p1_reset_n;
            basesoc_sdram_master_p1_act_n <= basesoc_sdram_ext_dfi_p1_act_n;
            basesoc_sdram_master_p1_wrdata <= basesoc_sdram_ext_dfi_p1_wrdata;
            basesoc_sdram_master_p1_wrdata_en <= basesoc_sdram_ext_dfi_p1_wrdata_en;
            basesoc_sdram_master_p1_wrdata_mask <= basesoc_sdram_ext_dfi_p1_wrdata_mask;
            basesoc_sdram_master_p1_rddata_en <= basesoc_sdram_ext_dfi_p1_rddata_en;
            basesoc_sdram_ext_dfi_p1_rddata <= basesoc_sdram_master_p1_rddata;
            basesoc_sdram_ext_dfi_p1_rddata_valid <= basesoc_sdram_master_p1_rddata_valid;
        end else begin
            basesoc_sdram_master_p0_address <= basesoc_sdram_slave_p0_address;
            basesoc_sdram_master_p0_bank <= basesoc_sdram_slave_p0_bank;
            basesoc_sdram_master_p0_cas_n <= basesoc_sdram_slave_p0_cas_n;
            basesoc_sdram_master_p0_cs_n <= basesoc_sdram_slave_p0_cs_n;
            basesoc_sdram_master_p0_ras_n <= basesoc_sdram_slave_p0_ras_n;
            basesoc_sdram_master_p0_we_n <= basesoc_sdram_slave_p0_we_n;
            basesoc_sdram_master_p0_cke <= basesoc_sdram_slave_p0_cke;
            basesoc_sdram_master_p0_odt <= basesoc_sdram_slave_p0_odt;
            basesoc_sdram_master_p0_reset_n <= basesoc_sdram_slave_p0_reset_n;
            basesoc_sdram_master_p0_act_n <= basesoc_sdram_slave_p0_act_n;
            basesoc_sdram_master_p0_wrdata <= basesoc_sdram_slave_p0_wrdata;
            basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_slave_p0_wrdata_en;
            basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_slave_p0_wrdata_mask;
            basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_slave_p0_rddata_en;
            basesoc_sdram_slave_p0_rddata <= basesoc_sdram_master_p0_rddata;
            basesoc_sdram_slave_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
            basesoc_sdram_master_p1_address <= basesoc_sdram_slave_p1_address;
            basesoc_sdram_master_p1_bank <= basesoc_sdram_slave_p1_bank;
            basesoc_sdram_master_p1_cas_n <= basesoc_sdram_slave_p1_cas_n;
            basesoc_sdram_master_p1_cs_n <= basesoc_sdram_slave_p1_cs_n;
            basesoc_sdram_master_p1_ras_n <= basesoc_sdram_slave_p1_ras_n;
            basesoc_sdram_master_p1_we_n <= basesoc_sdram_slave_p1_we_n;
            basesoc_sdram_master_p1_cke <= basesoc_sdram_slave_p1_cke;
            basesoc_sdram_master_p1_odt <= basesoc_sdram_slave_p1_odt;
            basesoc_sdram_master_p1_reset_n <= basesoc_sdram_slave_p1_reset_n;
            basesoc_sdram_master_p1_act_n <= basesoc_sdram_slave_p1_act_n;
            basesoc_sdram_master_p1_wrdata <= basesoc_sdram_slave_p1_wrdata;
            basesoc_sdram_master_p1_wrdata_en <= basesoc_sdram_slave_p1_wrdata_en;
            basesoc_sdram_master_p1_wrdata_mask <= basesoc_sdram_slave_p1_wrdata_mask;
            basesoc_sdram_master_p1_rddata_en <= basesoc_sdram_slave_p1_rddata_en;
            basesoc_sdram_slave_p1_rddata <= basesoc_sdram_master_p1_rddata;
            basesoc_sdram_slave_p1_rddata_valid <= basesoc_sdram_master_p1_rddata_valid;
            if (1'd0) begin
                basesoc_sdram_master_p0_cs_n <= {2{basesoc_sdram_slave_p0_cs_n}};
                basesoc_sdram_master_p1_cs_n <= {2{basesoc_sdram_slave_p1_cs_n}};
            end
        end
    end else begin
        basesoc_sdram_master_p0_address <= basesoc_sdram_csr_dfi_p0_address;
        basesoc_sdram_master_p0_bank <= basesoc_sdram_csr_dfi_p0_bank;
        basesoc_sdram_master_p0_cas_n <= basesoc_sdram_csr_dfi_p0_cas_n;
        basesoc_sdram_master_p0_cs_n <= basesoc_sdram_csr_dfi_p0_cs_n;
        basesoc_sdram_master_p0_ras_n <= basesoc_sdram_csr_dfi_p0_ras_n;
        basesoc_sdram_master_p0_we_n <= basesoc_sdram_csr_dfi_p0_we_n;
        basesoc_sdram_master_p0_cke <= basesoc_sdram_csr_dfi_p0_cke;
        basesoc_sdram_master_p0_odt <= basesoc_sdram_csr_dfi_p0_odt;
        basesoc_sdram_master_p0_reset_n <= basesoc_sdram_csr_dfi_p0_reset_n;
        basesoc_sdram_master_p0_act_n <= basesoc_sdram_csr_dfi_p0_act_n;
        basesoc_sdram_master_p0_wrdata <= basesoc_sdram_csr_dfi_p0_wrdata;
        basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_csr_dfi_p0_wrdata_en;
        basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_csr_dfi_p0_wrdata_mask;
        basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_csr_dfi_p0_rddata_en;
        basesoc_sdram_csr_dfi_p0_rddata <= basesoc_sdram_master_p0_rddata;
        basesoc_sdram_csr_dfi_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
        basesoc_sdram_master_p1_address <= basesoc_sdram_csr_dfi_p1_address;
        basesoc_sdram_master_p1_bank <= basesoc_sdram_csr_dfi_p1_bank;
        basesoc_sdram_master_p1_cas_n <= basesoc_sdram_csr_dfi_p1_cas_n;
        basesoc_sdram_master_p1_cs_n <= basesoc_sdram_csr_dfi_p1_cs_n;
        basesoc_sdram_master_p1_ras_n <= basesoc_sdram_csr_dfi_p1_ras_n;
        basesoc_sdram_master_p1_we_n <= basesoc_sdram_csr_dfi_p1_we_n;
        basesoc_sdram_master_p1_cke <= basesoc_sdram_csr_dfi_p1_cke;
        basesoc_sdram_master_p1_odt <= basesoc_sdram_csr_dfi_p1_odt;
        basesoc_sdram_master_p1_reset_n <= basesoc_sdram_csr_dfi_p1_reset_n;
        basesoc_sdram_master_p1_act_n <= basesoc_sdram_csr_dfi_p1_act_n;
        basesoc_sdram_master_p1_wrdata <= basesoc_sdram_csr_dfi_p1_wrdata;
        basesoc_sdram_master_p1_wrdata_en <= basesoc_sdram_csr_dfi_p1_wrdata_en;
        basesoc_sdram_master_p1_wrdata_mask <= basesoc_sdram_csr_dfi_p1_wrdata_mask;
        basesoc_sdram_master_p1_rddata_en <= basesoc_sdram_csr_dfi_p1_rddata_en;
        basesoc_sdram_csr_dfi_p1_rddata <= basesoc_sdram_master_p1_rddata;
        basesoc_sdram_csr_dfi_p1_rddata_valid <= basesoc_sdram_master_p1_rddata_valid;
    end
end
always @(*) begin
    basesoc_sdram_csr_dfi_p0_cke <= 1'd0;
    basesoc_sdram_csr_dfi_p0_cke <= basesoc_sdram_cke;
end
always @(*) begin
    basesoc_sdram_csr_dfi_p1_cke <= 1'd0;
    basesoc_sdram_csr_dfi_p1_cke <= basesoc_sdram_cke;
end
always @(*) begin
    basesoc_sdram_csr_dfi_p0_odt <= 1'd0;
    basesoc_sdram_csr_dfi_p0_odt <= basesoc_sdram_odt;
end
always @(*) begin
    basesoc_sdram_csr_dfi_p1_odt <= 1'd0;
    basesoc_sdram_csr_dfi_p1_odt <= basesoc_sdram_odt;
end
assign basesoc_sdram_csr_dfi_p0_reset_n = basesoc_sdram_reset_n;
assign basesoc_sdram_csr_dfi_p1_reset_n = basesoc_sdram_reset_n;
always @(*) begin
    basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (basesoc_sdram_phaseinjector0_command_issue_re) begin
        if (basesoc_sdram_phaseinjector0_csrfield_cs_top) begin
            basesoc_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (basesoc_sdram_phaseinjector0_csrfield_cs_bottom) begin
                basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                basesoc_sdram_csr_dfi_p0_cs_n <= {1{(~basesoc_sdram_phaseinjector0_csrfield_cs)}};
            end
        end
        basesoc_sdram_csr_dfi_p0_we_n <= (~basesoc_sdram_phaseinjector0_csrfield_we);
        basesoc_sdram_csr_dfi_p0_cas_n <= (~basesoc_sdram_phaseinjector0_csrfield_cas);
        basesoc_sdram_csr_dfi_p0_ras_n <= (~basesoc_sdram_phaseinjector0_csrfield_ras);
    end else begin
        basesoc_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
        basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
        basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign basesoc_sdram_csr_dfi_p0_address = basesoc_sdram_phaseinjector0_address_storage;
assign basesoc_sdram_csr_dfi_p0_bank = basesoc_sdram_phaseinjector0_baddress_storage;
assign basesoc_sdram_csr_dfi_p0_wrdata_en = (basesoc_sdram_phaseinjector0_command_issue_re & basesoc_sdram_phaseinjector0_csrfield_wren);
assign basesoc_sdram_csr_dfi_p0_rddata_en = (basesoc_sdram_phaseinjector0_command_issue_re & basesoc_sdram_phaseinjector0_csrfield_rden);
assign basesoc_sdram_csr_dfi_p0_wrdata = basesoc_sdram_phaseinjector0_wrdata_storage;
assign basesoc_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
always @(*) begin
    basesoc_sdram_csr_dfi_p1_cas_n <= 1'd1;
    basesoc_sdram_csr_dfi_p1_cs_n <= 1'd1;
    basesoc_sdram_csr_dfi_p1_ras_n <= 1'd1;
    basesoc_sdram_csr_dfi_p1_we_n <= 1'd1;
    if (basesoc_sdram_phaseinjector1_command_issue_re) begin
        if (basesoc_sdram_phaseinjector1_csrfield_cs_top) begin
            basesoc_sdram_csr_dfi_p1_cs_n <= 2'd2;
        end else begin
            if (basesoc_sdram_phaseinjector1_csrfield_cs_bottom) begin
                basesoc_sdram_csr_dfi_p1_cs_n <= 1'd1;
            end else begin
                basesoc_sdram_csr_dfi_p1_cs_n <= {1{(~basesoc_sdram_phaseinjector1_csrfield_cs)}};
            end
        end
        basesoc_sdram_csr_dfi_p1_we_n <= (~basesoc_sdram_phaseinjector1_csrfield_we);
        basesoc_sdram_csr_dfi_p1_cas_n <= (~basesoc_sdram_phaseinjector1_csrfield_cas);
        basesoc_sdram_csr_dfi_p1_ras_n <= (~basesoc_sdram_phaseinjector1_csrfield_ras);
    end else begin
        basesoc_sdram_csr_dfi_p1_cs_n <= {1{1'd1}};
        basesoc_sdram_csr_dfi_p1_we_n <= 1'd1;
        basesoc_sdram_csr_dfi_p1_cas_n <= 1'd1;
        basesoc_sdram_csr_dfi_p1_ras_n <= 1'd1;
    end
end
assign basesoc_sdram_csr_dfi_p1_address = basesoc_sdram_phaseinjector1_address_storage;
assign basesoc_sdram_csr_dfi_p1_bank = basesoc_sdram_phaseinjector1_baddress_storage;
assign basesoc_sdram_csr_dfi_p1_wrdata_en = (basesoc_sdram_phaseinjector1_command_issue_re & basesoc_sdram_phaseinjector1_csrfield_wren);
assign basesoc_sdram_csr_dfi_p1_rddata_en = (basesoc_sdram_phaseinjector1_command_issue_re & basesoc_sdram_phaseinjector1_csrfield_rden);
assign basesoc_sdram_csr_dfi_p1_wrdata = basesoc_sdram_phaseinjector1_wrdata_storage;
assign basesoc_sdram_csr_dfi_p1_wrdata_mask = 1'd0;
assign basesoc_sdram_bankmachine0_req_valid = basesoc_sdram_interface_bank0_valid;
assign basesoc_sdram_interface_bank0_ready = basesoc_sdram_bankmachine0_req_ready;
assign basesoc_sdram_bankmachine0_req_we = basesoc_sdram_interface_bank0_we;
assign basesoc_sdram_bankmachine0_req_addr = basesoc_sdram_interface_bank0_addr;
assign basesoc_sdram_interface_bank0_lock = basesoc_sdram_bankmachine0_req_lock;
assign basesoc_sdram_interface_bank0_wdata_ready = basesoc_sdram_bankmachine0_req_wdata_ready;
assign basesoc_sdram_interface_bank0_rdata_valid = basesoc_sdram_bankmachine0_req_rdata_valid;
assign basesoc_sdram_bankmachine1_req_valid = basesoc_sdram_interface_bank1_valid;
assign basesoc_sdram_interface_bank1_ready = basesoc_sdram_bankmachine1_req_ready;
assign basesoc_sdram_bankmachine1_req_we = basesoc_sdram_interface_bank1_we;
assign basesoc_sdram_bankmachine1_req_addr = basesoc_sdram_interface_bank1_addr;
assign basesoc_sdram_interface_bank1_lock = basesoc_sdram_bankmachine1_req_lock;
assign basesoc_sdram_interface_bank1_wdata_ready = basesoc_sdram_bankmachine1_req_wdata_ready;
assign basesoc_sdram_interface_bank1_rdata_valid = basesoc_sdram_bankmachine1_req_rdata_valid;
assign basesoc_sdram_bankmachine2_req_valid = basesoc_sdram_interface_bank2_valid;
assign basesoc_sdram_interface_bank2_ready = basesoc_sdram_bankmachine2_req_ready;
assign basesoc_sdram_bankmachine2_req_we = basesoc_sdram_interface_bank2_we;
assign basesoc_sdram_bankmachine2_req_addr = basesoc_sdram_interface_bank2_addr;
assign basesoc_sdram_interface_bank2_lock = basesoc_sdram_bankmachine2_req_lock;
assign basesoc_sdram_interface_bank2_wdata_ready = basesoc_sdram_bankmachine2_req_wdata_ready;
assign basesoc_sdram_interface_bank2_rdata_valid = basesoc_sdram_bankmachine2_req_rdata_valid;
assign basesoc_sdram_bankmachine3_req_valid = basesoc_sdram_interface_bank3_valid;
assign basesoc_sdram_interface_bank3_ready = basesoc_sdram_bankmachine3_req_ready;
assign basesoc_sdram_bankmachine3_req_we = basesoc_sdram_interface_bank3_we;
assign basesoc_sdram_bankmachine3_req_addr = basesoc_sdram_interface_bank3_addr;
assign basesoc_sdram_interface_bank3_lock = basesoc_sdram_bankmachine3_req_lock;
assign basesoc_sdram_interface_bank3_wdata_ready = basesoc_sdram_bankmachine3_req_wdata_ready;
assign basesoc_sdram_interface_bank3_rdata_valid = basesoc_sdram_bankmachine3_req_rdata_valid;
assign basesoc_sdram_timer_wait = (~basesoc_sdram_timer_done0);
assign basesoc_sdram_postponer_req_i = basesoc_sdram_timer_done0;
assign basesoc_sdram_wants_refresh = basesoc_sdram_postponer_req_o;
assign basesoc_sdram_timer_done1 = (basesoc_sdram_timer_count1 == 1'd0);
assign basesoc_sdram_timer_done0 = basesoc_sdram_timer_done1;
assign basesoc_sdram_timer_count0 = basesoc_sdram_timer_count1;
assign basesoc_sdram_sequencer_start1 = (basesoc_sdram_sequencer_start0 | (basesoc_sdram_sequencer_count != 1'd0));
assign basesoc_sdram_sequencer_done0 = (basesoc_sdram_sequencer_done1 & (basesoc_sdram_sequencer_count == 1'd0));
always @(*) begin
    basesoc_sdram_cmd_last <= 1'd0;
    basesoc_sdram_cmd_valid <= 1'd0;
    basesoc_sdram_sequencer_start0 <= 1'd0;
    refresher_next_state <= 2'd0;
    refresher_next_state <= refresher_state;
    case (refresher_state)
        1'd1: begin
            basesoc_sdram_cmd_valid <= 1'd1;
            if (basesoc_sdram_cmd_ready) begin
                basesoc_sdram_sequencer_start0 <= 1'd1;
                refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_sdram_cmd_valid <= 1'd1;
            if (basesoc_sdram_sequencer_done0) begin
                basesoc_sdram_cmd_valid <= 1'd0;
                basesoc_sdram_cmd_last <= 1'd1;
                refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (basesoc_sdram_wants_refresh) begin
                    refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine0_sink_valid = basesoc_sdram_bankmachine0_req_valid;
assign basesoc_sdram_bankmachine0_req_ready = basesoc_sdram_bankmachine0_sink_ready;
assign basesoc_sdram_bankmachine0_sink_payload_we = basesoc_sdram_bankmachine0_req_we;
assign basesoc_sdram_bankmachine0_sink_payload_addr = basesoc_sdram_bankmachine0_req_addr;
assign basesoc_sdram_bankmachine0_sink_sink_valid = basesoc_sdram_bankmachine0_source_valid;
assign basesoc_sdram_bankmachine0_source_ready = basesoc_sdram_bankmachine0_sink_sink_ready;
assign basesoc_sdram_bankmachine0_sink_sink_first = basesoc_sdram_bankmachine0_source_first;
assign basesoc_sdram_bankmachine0_sink_sink_last = basesoc_sdram_bankmachine0_source_last;
assign basesoc_sdram_bankmachine0_sink_sink_payload_we = basesoc_sdram_bankmachine0_source_payload_we;
assign basesoc_sdram_bankmachine0_sink_sink_payload_addr = basesoc_sdram_bankmachine0_source_payload_addr;
assign basesoc_sdram_bankmachine0_source_source_ready = (basesoc_sdram_bankmachine0_req_wdata_ready | basesoc_sdram_bankmachine0_req_rdata_valid);
assign basesoc_sdram_bankmachine0_req_lock = (basesoc_sdram_bankmachine0_source_valid | basesoc_sdram_bankmachine0_source_source_valid);
assign basesoc_sdram_bankmachine0_row_hit = (basesoc_sdram_bankmachine0_row == basesoc_sdram_bankmachine0_source_source_payload_addr[21:9]);
assign basesoc_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    basesoc_sdram_bankmachine0_cmd_payload_a <= 13'd0;
    if (basesoc_sdram_bankmachine0_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine0_cmd_payload_a <= basesoc_sdram_bankmachine0_source_source_payload_addr[21:9];
    end else begin
        basesoc_sdram_bankmachine0_cmd_payload_a <= ((basesoc_sdram_bankmachine0_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine0_source_source_payload_addr[8:0], {1{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine0_twtpcon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_cmd_payload_is_write);
assign basesoc_sdram_bankmachine0_trccon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_row_open);
assign basesoc_sdram_bankmachine0_trascon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_row_open);
always @(*) begin
    basesoc_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine0_source_valid & basesoc_sdram_bankmachine0_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine0_source_payload_addr[21:9] != basesoc_sdram_bankmachine0_source_source_payload_addr[21:9])) begin
            basesoc_sdram_bankmachine0_auto_precharge <= (basesoc_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine0_syncfifo0_din = {basesoc_sdram_bankmachine0_fifo_in_last, basesoc_sdram_bankmachine0_fifo_in_first, basesoc_sdram_bankmachine0_fifo_in_payload_addr, basesoc_sdram_bankmachine0_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine0_fifo_out_last, basesoc_sdram_bankmachine0_fifo_out_first, basesoc_sdram_bankmachine0_fifo_out_payload_addr, basesoc_sdram_bankmachine0_fifo_out_payload_we} = basesoc_sdram_bankmachine0_syncfifo0_dout;
assign basesoc_sdram_bankmachine0_sink_ready = basesoc_sdram_bankmachine0_syncfifo0_writable;
assign basesoc_sdram_bankmachine0_syncfifo0_we = basesoc_sdram_bankmachine0_sink_valid;
assign basesoc_sdram_bankmachine0_fifo_in_first = basesoc_sdram_bankmachine0_sink_first;
assign basesoc_sdram_bankmachine0_fifo_in_last = basesoc_sdram_bankmachine0_sink_last;
assign basesoc_sdram_bankmachine0_fifo_in_payload_we = basesoc_sdram_bankmachine0_sink_payload_we;
assign basesoc_sdram_bankmachine0_fifo_in_payload_addr = basesoc_sdram_bankmachine0_sink_payload_addr;
assign basesoc_sdram_bankmachine0_source_valid = basesoc_sdram_bankmachine0_syncfifo0_readable;
assign basesoc_sdram_bankmachine0_source_first = basesoc_sdram_bankmachine0_fifo_out_first;
assign basesoc_sdram_bankmachine0_source_last = basesoc_sdram_bankmachine0_fifo_out_last;
assign basesoc_sdram_bankmachine0_source_payload_we = basesoc_sdram_bankmachine0_fifo_out_payload_we;
assign basesoc_sdram_bankmachine0_source_payload_addr = basesoc_sdram_bankmachine0_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine0_syncfifo0_re = basesoc_sdram_bankmachine0_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine0_replace) begin
        basesoc_sdram_bankmachine0_wrport_adr <= (basesoc_sdram_bankmachine0_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine0_wrport_adr <= basesoc_sdram_bankmachine0_produce;
    end
end
assign basesoc_sdram_bankmachine0_wrport_dat_w = basesoc_sdram_bankmachine0_syncfifo0_din;
assign basesoc_sdram_bankmachine0_wrport_we = (basesoc_sdram_bankmachine0_syncfifo0_we & (basesoc_sdram_bankmachine0_syncfifo0_writable | basesoc_sdram_bankmachine0_replace));
assign basesoc_sdram_bankmachine0_do_read = (basesoc_sdram_bankmachine0_syncfifo0_readable & basesoc_sdram_bankmachine0_syncfifo0_re);
assign basesoc_sdram_bankmachine0_rdport_adr = basesoc_sdram_bankmachine0_consume;
assign basesoc_sdram_bankmachine0_syncfifo0_dout = basesoc_sdram_bankmachine0_rdport_dat_r;
assign basesoc_sdram_bankmachine0_syncfifo0_writable = (basesoc_sdram_bankmachine0_level != 4'd8);
assign basesoc_sdram_bankmachine0_syncfifo0_readable = (basesoc_sdram_bankmachine0_level != 1'd0);
assign basesoc_sdram_bankmachine0_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine0_pipe_valid_source_valid) | basesoc_sdram_bankmachine0_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine0_pipe_valid_sink_valid = basesoc_sdram_bankmachine0_sink_sink_valid;
assign basesoc_sdram_bankmachine0_sink_sink_ready = basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_first = basesoc_sdram_bankmachine0_sink_sink_first;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_last = basesoc_sdram_bankmachine0_sink_sink_last;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine0_sink_sink_payload_we;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine0_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine0_source_source_valid = basesoc_sdram_bankmachine0_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine0_pipe_valid_source_ready = basesoc_sdram_bankmachine0_source_source_ready;
assign basesoc_sdram_bankmachine0_source_source_first = basesoc_sdram_bankmachine0_pipe_valid_source_first;
assign basesoc_sdram_bankmachine0_source_source_last = basesoc_sdram_bankmachine0_pipe_valid_source_last;
assign basesoc_sdram_bankmachine0_source_source_payload_we = basesoc_sdram_bankmachine0_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine0_source_source_payload_addr = basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine0_next_state <= 3'd0;
    basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine0_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine0_row_close <= 1'd0;
    basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine0_row_open <= 1'd0;
    bankmachine0_next_state <= bankmachine0_state;
    case (bankmachine0_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine0_twtpcon_ready & basesoc_sdram_bankmachine0_trascon_ready)) begin
                basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine0_cmd_ready) begin
                    bankmachine0_next_state <= 3'd5;
                end
                basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine0_twtpcon_ready & basesoc_sdram_bankmachine0_trascon_ready)) begin
                bankmachine0_next_state <= 3'd5;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine0_trccon_ready) begin
                basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine0_row_open <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine0_cmd_ready) begin
                    bankmachine0_next_state <= 3'd6;
                end
                basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine0_twtpcon_ready) begin
                basesoc_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
            basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine0_refresh_req)) begin
                bankmachine0_next_state <= 1'd0;
            end
        end
        3'd5: begin
            bankmachine0_next_state <= 2'd3;
        end
        3'd6: begin
            bankmachine0_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_sdram_bankmachine0_refresh_req) begin
                bankmachine0_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine0_source_source_valid) begin
                    if (basesoc_sdram_bankmachine0_row_opened) begin
                        if (basesoc_sdram_bankmachine0_row_hit) begin
                            basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine0_source_source_payload_we) begin
                                basesoc_sdram_bankmachine0_req_wdata_ready <= basesoc_sdram_bankmachine0_cmd_ready;
                                basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine0_req_rdata_valid <= basesoc_sdram_bankmachine0_cmd_ready;
                                basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine0_cmd_ready & basesoc_sdram_bankmachine0_auto_precharge)) begin
                                bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine1_sink_valid = basesoc_sdram_bankmachine1_req_valid;
assign basesoc_sdram_bankmachine1_req_ready = basesoc_sdram_bankmachine1_sink_ready;
assign basesoc_sdram_bankmachine1_sink_payload_we = basesoc_sdram_bankmachine1_req_we;
assign basesoc_sdram_bankmachine1_sink_payload_addr = basesoc_sdram_bankmachine1_req_addr;
assign basesoc_sdram_bankmachine1_sink_sink_valid = basesoc_sdram_bankmachine1_source_valid;
assign basesoc_sdram_bankmachine1_source_ready = basesoc_sdram_bankmachine1_sink_sink_ready;
assign basesoc_sdram_bankmachine1_sink_sink_first = basesoc_sdram_bankmachine1_source_first;
assign basesoc_sdram_bankmachine1_sink_sink_last = basesoc_sdram_bankmachine1_source_last;
assign basesoc_sdram_bankmachine1_sink_sink_payload_we = basesoc_sdram_bankmachine1_source_payload_we;
assign basesoc_sdram_bankmachine1_sink_sink_payload_addr = basesoc_sdram_bankmachine1_source_payload_addr;
assign basesoc_sdram_bankmachine1_source_source_ready = (basesoc_sdram_bankmachine1_req_wdata_ready | basesoc_sdram_bankmachine1_req_rdata_valid);
assign basesoc_sdram_bankmachine1_req_lock = (basesoc_sdram_bankmachine1_source_valid | basesoc_sdram_bankmachine1_source_source_valid);
assign basesoc_sdram_bankmachine1_row_hit = (basesoc_sdram_bankmachine1_row == basesoc_sdram_bankmachine1_source_source_payload_addr[21:9]);
assign basesoc_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    basesoc_sdram_bankmachine1_cmd_payload_a <= 13'd0;
    if (basesoc_sdram_bankmachine1_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine1_cmd_payload_a <= basesoc_sdram_bankmachine1_source_source_payload_addr[21:9];
    end else begin
        basesoc_sdram_bankmachine1_cmd_payload_a <= ((basesoc_sdram_bankmachine1_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine1_source_source_payload_addr[8:0], {1{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine1_twtpcon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_cmd_payload_is_write);
assign basesoc_sdram_bankmachine1_trccon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_row_open);
assign basesoc_sdram_bankmachine1_trascon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_row_open);
always @(*) begin
    basesoc_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine1_source_valid & basesoc_sdram_bankmachine1_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine1_source_payload_addr[21:9] != basesoc_sdram_bankmachine1_source_source_payload_addr[21:9])) begin
            basesoc_sdram_bankmachine1_auto_precharge <= (basesoc_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine1_syncfifo1_din = {basesoc_sdram_bankmachine1_fifo_in_last, basesoc_sdram_bankmachine1_fifo_in_first, basesoc_sdram_bankmachine1_fifo_in_payload_addr, basesoc_sdram_bankmachine1_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine1_fifo_out_last, basesoc_sdram_bankmachine1_fifo_out_first, basesoc_sdram_bankmachine1_fifo_out_payload_addr, basesoc_sdram_bankmachine1_fifo_out_payload_we} = basesoc_sdram_bankmachine1_syncfifo1_dout;
assign basesoc_sdram_bankmachine1_sink_ready = basesoc_sdram_bankmachine1_syncfifo1_writable;
assign basesoc_sdram_bankmachine1_syncfifo1_we = basesoc_sdram_bankmachine1_sink_valid;
assign basesoc_sdram_bankmachine1_fifo_in_first = basesoc_sdram_bankmachine1_sink_first;
assign basesoc_sdram_bankmachine1_fifo_in_last = basesoc_sdram_bankmachine1_sink_last;
assign basesoc_sdram_bankmachine1_fifo_in_payload_we = basesoc_sdram_bankmachine1_sink_payload_we;
assign basesoc_sdram_bankmachine1_fifo_in_payload_addr = basesoc_sdram_bankmachine1_sink_payload_addr;
assign basesoc_sdram_bankmachine1_source_valid = basesoc_sdram_bankmachine1_syncfifo1_readable;
assign basesoc_sdram_bankmachine1_source_first = basesoc_sdram_bankmachine1_fifo_out_first;
assign basesoc_sdram_bankmachine1_source_last = basesoc_sdram_bankmachine1_fifo_out_last;
assign basesoc_sdram_bankmachine1_source_payload_we = basesoc_sdram_bankmachine1_fifo_out_payload_we;
assign basesoc_sdram_bankmachine1_source_payload_addr = basesoc_sdram_bankmachine1_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine1_syncfifo1_re = basesoc_sdram_bankmachine1_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine1_replace) begin
        basesoc_sdram_bankmachine1_wrport_adr <= (basesoc_sdram_bankmachine1_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine1_wrport_adr <= basesoc_sdram_bankmachine1_produce;
    end
end
assign basesoc_sdram_bankmachine1_wrport_dat_w = basesoc_sdram_bankmachine1_syncfifo1_din;
assign basesoc_sdram_bankmachine1_wrport_we = (basesoc_sdram_bankmachine1_syncfifo1_we & (basesoc_sdram_bankmachine1_syncfifo1_writable | basesoc_sdram_bankmachine1_replace));
assign basesoc_sdram_bankmachine1_do_read = (basesoc_sdram_bankmachine1_syncfifo1_readable & basesoc_sdram_bankmachine1_syncfifo1_re);
assign basesoc_sdram_bankmachine1_rdport_adr = basesoc_sdram_bankmachine1_consume;
assign basesoc_sdram_bankmachine1_syncfifo1_dout = basesoc_sdram_bankmachine1_rdport_dat_r;
assign basesoc_sdram_bankmachine1_syncfifo1_writable = (basesoc_sdram_bankmachine1_level != 4'd8);
assign basesoc_sdram_bankmachine1_syncfifo1_readable = (basesoc_sdram_bankmachine1_level != 1'd0);
assign basesoc_sdram_bankmachine1_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine1_pipe_valid_source_valid) | basesoc_sdram_bankmachine1_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine1_pipe_valid_sink_valid = basesoc_sdram_bankmachine1_sink_sink_valid;
assign basesoc_sdram_bankmachine1_sink_sink_ready = basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_first = basesoc_sdram_bankmachine1_sink_sink_first;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_last = basesoc_sdram_bankmachine1_sink_sink_last;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine1_sink_sink_payload_we;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine1_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine1_source_source_valid = basesoc_sdram_bankmachine1_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine1_pipe_valid_source_ready = basesoc_sdram_bankmachine1_source_source_ready;
assign basesoc_sdram_bankmachine1_source_source_first = basesoc_sdram_bankmachine1_pipe_valid_source_first;
assign basesoc_sdram_bankmachine1_source_source_last = basesoc_sdram_bankmachine1_pipe_valid_source_last;
assign basesoc_sdram_bankmachine1_source_source_payload_we = basesoc_sdram_bankmachine1_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine1_source_source_payload_addr = basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine1_next_state <= 3'd0;
    basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine1_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine1_row_close <= 1'd0;
    basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine1_row_open <= 1'd0;
    bankmachine1_next_state <= bankmachine1_state;
    case (bankmachine1_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine1_twtpcon_ready & basesoc_sdram_bankmachine1_trascon_ready)) begin
                basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine1_cmd_ready) begin
                    bankmachine1_next_state <= 3'd5;
                end
                basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine1_twtpcon_ready & basesoc_sdram_bankmachine1_trascon_ready)) begin
                bankmachine1_next_state <= 3'd5;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine1_trccon_ready) begin
                basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine1_row_open <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine1_cmd_ready) begin
                    bankmachine1_next_state <= 3'd6;
                end
                basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine1_twtpcon_ready) begin
                basesoc_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
            basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine1_refresh_req)) begin
                bankmachine1_next_state <= 1'd0;
            end
        end
        3'd5: begin
            bankmachine1_next_state <= 2'd3;
        end
        3'd6: begin
            bankmachine1_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_sdram_bankmachine1_refresh_req) begin
                bankmachine1_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine1_source_source_valid) begin
                    if (basesoc_sdram_bankmachine1_row_opened) begin
                        if (basesoc_sdram_bankmachine1_row_hit) begin
                            basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine1_source_source_payload_we) begin
                                basesoc_sdram_bankmachine1_req_wdata_ready <= basesoc_sdram_bankmachine1_cmd_ready;
                                basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine1_req_rdata_valid <= basesoc_sdram_bankmachine1_cmd_ready;
                                basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine1_cmd_ready & basesoc_sdram_bankmachine1_auto_precharge)) begin
                                bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine2_sink_valid = basesoc_sdram_bankmachine2_req_valid;
assign basesoc_sdram_bankmachine2_req_ready = basesoc_sdram_bankmachine2_sink_ready;
assign basesoc_sdram_bankmachine2_sink_payload_we = basesoc_sdram_bankmachine2_req_we;
assign basesoc_sdram_bankmachine2_sink_payload_addr = basesoc_sdram_bankmachine2_req_addr;
assign basesoc_sdram_bankmachine2_sink_sink_valid = basesoc_sdram_bankmachine2_source_valid;
assign basesoc_sdram_bankmachine2_source_ready = basesoc_sdram_bankmachine2_sink_sink_ready;
assign basesoc_sdram_bankmachine2_sink_sink_first = basesoc_sdram_bankmachine2_source_first;
assign basesoc_sdram_bankmachine2_sink_sink_last = basesoc_sdram_bankmachine2_source_last;
assign basesoc_sdram_bankmachine2_sink_sink_payload_we = basesoc_sdram_bankmachine2_source_payload_we;
assign basesoc_sdram_bankmachine2_sink_sink_payload_addr = basesoc_sdram_bankmachine2_source_payload_addr;
assign basesoc_sdram_bankmachine2_source_source_ready = (basesoc_sdram_bankmachine2_req_wdata_ready | basesoc_sdram_bankmachine2_req_rdata_valid);
assign basesoc_sdram_bankmachine2_req_lock = (basesoc_sdram_bankmachine2_source_valid | basesoc_sdram_bankmachine2_source_source_valid);
assign basesoc_sdram_bankmachine2_row_hit = (basesoc_sdram_bankmachine2_row == basesoc_sdram_bankmachine2_source_source_payload_addr[21:9]);
assign basesoc_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    basesoc_sdram_bankmachine2_cmd_payload_a <= 13'd0;
    if (basesoc_sdram_bankmachine2_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine2_cmd_payload_a <= basesoc_sdram_bankmachine2_source_source_payload_addr[21:9];
    end else begin
        basesoc_sdram_bankmachine2_cmd_payload_a <= ((basesoc_sdram_bankmachine2_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine2_source_source_payload_addr[8:0], {1{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine2_twtpcon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_cmd_payload_is_write);
assign basesoc_sdram_bankmachine2_trccon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_row_open);
assign basesoc_sdram_bankmachine2_trascon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_row_open);
always @(*) begin
    basesoc_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine2_source_valid & basesoc_sdram_bankmachine2_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine2_source_payload_addr[21:9] != basesoc_sdram_bankmachine2_source_source_payload_addr[21:9])) begin
            basesoc_sdram_bankmachine2_auto_precharge <= (basesoc_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine2_syncfifo2_din = {basesoc_sdram_bankmachine2_fifo_in_last, basesoc_sdram_bankmachine2_fifo_in_first, basesoc_sdram_bankmachine2_fifo_in_payload_addr, basesoc_sdram_bankmachine2_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine2_fifo_out_last, basesoc_sdram_bankmachine2_fifo_out_first, basesoc_sdram_bankmachine2_fifo_out_payload_addr, basesoc_sdram_bankmachine2_fifo_out_payload_we} = basesoc_sdram_bankmachine2_syncfifo2_dout;
assign basesoc_sdram_bankmachine2_sink_ready = basesoc_sdram_bankmachine2_syncfifo2_writable;
assign basesoc_sdram_bankmachine2_syncfifo2_we = basesoc_sdram_bankmachine2_sink_valid;
assign basesoc_sdram_bankmachine2_fifo_in_first = basesoc_sdram_bankmachine2_sink_first;
assign basesoc_sdram_bankmachine2_fifo_in_last = basesoc_sdram_bankmachine2_sink_last;
assign basesoc_sdram_bankmachine2_fifo_in_payload_we = basesoc_sdram_bankmachine2_sink_payload_we;
assign basesoc_sdram_bankmachine2_fifo_in_payload_addr = basesoc_sdram_bankmachine2_sink_payload_addr;
assign basesoc_sdram_bankmachine2_source_valid = basesoc_sdram_bankmachine2_syncfifo2_readable;
assign basesoc_sdram_bankmachine2_source_first = basesoc_sdram_bankmachine2_fifo_out_first;
assign basesoc_sdram_bankmachine2_source_last = basesoc_sdram_bankmachine2_fifo_out_last;
assign basesoc_sdram_bankmachine2_source_payload_we = basesoc_sdram_bankmachine2_fifo_out_payload_we;
assign basesoc_sdram_bankmachine2_source_payload_addr = basesoc_sdram_bankmachine2_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine2_syncfifo2_re = basesoc_sdram_bankmachine2_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine2_replace) begin
        basesoc_sdram_bankmachine2_wrport_adr <= (basesoc_sdram_bankmachine2_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine2_wrport_adr <= basesoc_sdram_bankmachine2_produce;
    end
end
assign basesoc_sdram_bankmachine2_wrport_dat_w = basesoc_sdram_bankmachine2_syncfifo2_din;
assign basesoc_sdram_bankmachine2_wrport_we = (basesoc_sdram_bankmachine2_syncfifo2_we & (basesoc_sdram_bankmachine2_syncfifo2_writable | basesoc_sdram_bankmachine2_replace));
assign basesoc_sdram_bankmachine2_do_read = (basesoc_sdram_bankmachine2_syncfifo2_readable & basesoc_sdram_bankmachine2_syncfifo2_re);
assign basesoc_sdram_bankmachine2_rdport_adr = basesoc_sdram_bankmachine2_consume;
assign basesoc_sdram_bankmachine2_syncfifo2_dout = basesoc_sdram_bankmachine2_rdport_dat_r;
assign basesoc_sdram_bankmachine2_syncfifo2_writable = (basesoc_sdram_bankmachine2_level != 4'd8);
assign basesoc_sdram_bankmachine2_syncfifo2_readable = (basesoc_sdram_bankmachine2_level != 1'd0);
assign basesoc_sdram_bankmachine2_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine2_pipe_valid_source_valid) | basesoc_sdram_bankmachine2_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine2_pipe_valid_sink_valid = basesoc_sdram_bankmachine2_sink_sink_valid;
assign basesoc_sdram_bankmachine2_sink_sink_ready = basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_first = basesoc_sdram_bankmachine2_sink_sink_first;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_last = basesoc_sdram_bankmachine2_sink_sink_last;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine2_sink_sink_payload_we;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine2_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine2_source_source_valid = basesoc_sdram_bankmachine2_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine2_pipe_valid_source_ready = basesoc_sdram_bankmachine2_source_source_ready;
assign basesoc_sdram_bankmachine2_source_source_first = basesoc_sdram_bankmachine2_pipe_valid_source_first;
assign basesoc_sdram_bankmachine2_source_source_last = basesoc_sdram_bankmachine2_pipe_valid_source_last;
assign basesoc_sdram_bankmachine2_source_source_payload_we = basesoc_sdram_bankmachine2_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine2_source_source_payload_addr = basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine2_next_state <= 3'd0;
    basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine2_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine2_row_close <= 1'd0;
    basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine2_row_open <= 1'd0;
    bankmachine2_next_state <= bankmachine2_state;
    case (bankmachine2_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine2_twtpcon_ready & basesoc_sdram_bankmachine2_trascon_ready)) begin
                basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine2_cmd_ready) begin
                    bankmachine2_next_state <= 3'd5;
                end
                basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine2_twtpcon_ready & basesoc_sdram_bankmachine2_trascon_ready)) begin
                bankmachine2_next_state <= 3'd5;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine2_trccon_ready) begin
                basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine2_row_open <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine2_cmd_ready) begin
                    bankmachine2_next_state <= 3'd6;
                end
                basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine2_twtpcon_ready) begin
                basesoc_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
            basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine2_refresh_req)) begin
                bankmachine2_next_state <= 1'd0;
            end
        end
        3'd5: begin
            bankmachine2_next_state <= 2'd3;
        end
        3'd6: begin
            bankmachine2_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_sdram_bankmachine2_refresh_req) begin
                bankmachine2_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine2_source_source_valid) begin
                    if (basesoc_sdram_bankmachine2_row_opened) begin
                        if (basesoc_sdram_bankmachine2_row_hit) begin
                            basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine2_source_source_payload_we) begin
                                basesoc_sdram_bankmachine2_req_wdata_ready <= basesoc_sdram_bankmachine2_cmd_ready;
                                basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine2_req_rdata_valid <= basesoc_sdram_bankmachine2_cmd_ready;
                                basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine2_cmd_ready & basesoc_sdram_bankmachine2_auto_precharge)) begin
                                bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine3_sink_valid = basesoc_sdram_bankmachine3_req_valid;
assign basesoc_sdram_bankmachine3_req_ready = basesoc_sdram_bankmachine3_sink_ready;
assign basesoc_sdram_bankmachine3_sink_payload_we = basesoc_sdram_bankmachine3_req_we;
assign basesoc_sdram_bankmachine3_sink_payload_addr = basesoc_sdram_bankmachine3_req_addr;
assign basesoc_sdram_bankmachine3_sink_sink_valid = basesoc_sdram_bankmachine3_source_valid;
assign basesoc_sdram_bankmachine3_source_ready = basesoc_sdram_bankmachine3_sink_sink_ready;
assign basesoc_sdram_bankmachine3_sink_sink_first = basesoc_sdram_bankmachine3_source_first;
assign basesoc_sdram_bankmachine3_sink_sink_last = basesoc_sdram_bankmachine3_source_last;
assign basesoc_sdram_bankmachine3_sink_sink_payload_we = basesoc_sdram_bankmachine3_source_payload_we;
assign basesoc_sdram_bankmachine3_sink_sink_payload_addr = basesoc_sdram_bankmachine3_source_payload_addr;
assign basesoc_sdram_bankmachine3_source_source_ready = (basesoc_sdram_bankmachine3_req_wdata_ready | basesoc_sdram_bankmachine3_req_rdata_valid);
assign basesoc_sdram_bankmachine3_req_lock = (basesoc_sdram_bankmachine3_source_valid | basesoc_sdram_bankmachine3_source_source_valid);
assign basesoc_sdram_bankmachine3_row_hit = (basesoc_sdram_bankmachine3_row == basesoc_sdram_bankmachine3_source_source_payload_addr[21:9]);
assign basesoc_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    basesoc_sdram_bankmachine3_cmd_payload_a <= 13'd0;
    if (basesoc_sdram_bankmachine3_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine3_cmd_payload_a <= basesoc_sdram_bankmachine3_source_source_payload_addr[21:9];
    end else begin
        basesoc_sdram_bankmachine3_cmd_payload_a <= ((basesoc_sdram_bankmachine3_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine3_source_source_payload_addr[8:0], {1{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine3_twtpcon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_cmd_payload_is_write);
assign basesoc_sdram_bankmachine3_trccon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_row_open);
assign basesoc_sdram_bankmachine3_trascon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_row_open);
always @(*) begin
    basesoc_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine3_source_valid & basesoc_sdram_bankmachine3_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine3_source_payload_addr[21:9] != basesoc_sdram_bankmachine3_source_source_payload_addr[21:9])) begin
            basesoc_sdram_bankmachine3_auto_precharge <= (basesoc_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine3_syncfifo3_din = {basesoc_sdram_bankmachine3_fifo_in_last, basesoc_sdram_bankmachine3_fifo_in_first, basesoc_sdram_bankmachine3_fifo_in_payload_addr, basesoc_sdram_bankmachine3_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine3_fifo_out_last, basesoc_sdram_bankmachine3_fifo_out_first, basesoc_sdram_bankmachine3_fifo_out_payload_addr, basesoc_sdram_bankmachine3_fifo_out_payload_we} = basesoc_sdram_bankmachine3_syncfifo3_dout;
assign basesoc_sdram_bankmachine3_sink_ready = basesoc_sdram_bankmachine3_syncfifo3_writable;
assign basesoc_sdram_bankmachine3_syncfifo3_we = basesoc_sdram_bankmachine3_sink_valid;
assign basesoc_sdram_bankmachine3_fifo_in_first = basesoc_sdram_bankmachine3_sink_first;
assign basesoc_sdram_bankmachine3_fifo_in_last = basesoc_sdram_bankmachine3_sink_last;
assign basesoc_sdram_bankmachine3_fifo_in_payload_we = basesoc_sdram_bankmachine3_sink_payload_we;
assign basesoc_sdram_bankmachine3_fifo_in_payload_addr = basesoc_sdram_bankmachine3_sink_payload_addr;
assign basesoc_sdram_bankmachine3_source_valid = basesoc_sdram_bankmachine3_syncfifo3_readable;
assign basesoc_sdram_bankmachine3_source_first = basesoc_sdram_bankmachine3_fifo_out_first;
assign basesoc_sdram_bankmachine3_source_last = basesoc_sdram_bankmachine3_fifo_out_last;
assign basesoc_sdram_bankmachine3_source_payload_we = basesoc_sdram_bankmachine3_fifo_out_payload_we;
assign basesoc_sdram_bankmachine3_source_payload_addr = basesoc_sdram_bankmachine3_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine3_syncfifo3_re = basesoc_sdram_bankmachine3_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine3_replace) begin
        basesoc_sdram_bankmachine3_wrport_adr <= (basesoc_sdram_bankmachine3_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine3_wrport_adr <= basesoc_sdram_bankmachine3_produce;
    end
end
assign basesoc_sdram_bankmachine3_wrport_dat_w = basesoc_sdram_bankmachine3_syncfifo3_din;
assign basesoc_sdram_bankmachine3_wrport_we = (basesoc_sdram_bankmachine3_syncfifo3_we & (basesoc_sdram_bankmachine3_syncfifo3_writable | basesoc_sdram_bankmachine3_replace));
assign basesoc_sdram_bankmachine3_do_read = (basesoc_sdram_bankmachine3_syncfifo3_readable & basesoc_sdram_bankmachine3_syncfifo3_re);
assign basesoc_sdram_bankmachine3_rdport_adr = basesoc_sdram_bankmachine3_consume;
assign basesoc_sdram_bankmachine3_syncfifo3_dout = basesoc_sdram_bankmachine3_rdport_dat_r;
assign basesoc_sdram_bankmachine3_syncfifo3_writable = (basesoc_sdram_bankmachine3_level != 4'd8);
assign basesoc_sdram_bankmachine3_syncfifo3_readable = (basesoc_sdram_bankmachine3_level != 1'd0);
assign basesoc_sdram_bankmachine3_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine3_pipe_valid_source_valid) | basesoc_sdram_bankmachine3_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine3_pipe_valid_sink_valid = basesoc_sdram_bankmachine3_sink_sink_valid;
assign basesoc_sdram_bankmachine3_sink_sink_ready = basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_first = basesoc_sdram_bankmachine3_sink_sink_first;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_last = basesoc_sdram_bankmachine3_sink_sink_last;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine3_sink_sink_payload_we;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine3_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine3_source_source_valid = basesoc_sdram_bankmachine3_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine3_pipe_valid_source_ready = basesoc_sdram_bankmachine3_source_source_ready;
assign basesoc_sdram_bankmachine3_source_source_first = basesoc_sdram_bankmachine3_pipe_valid_source_first;
assign basesoc_sdram_bankmachine3_source_source_last = basesoc_sdram_bankmachine3_pipe_valid_source_last;
assign basesoc_sdram_bankmachine3_source_source_payload_we = basesoc_sdram_bankmachine3_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine3_source_source_payload_addr = basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine3_next_state <= 3'd0;
    basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine3_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine3_row_close <= 1'd0;
    basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine3_row_open <= 1'd0;
    bankmachine3_next_state <= bankmachine3_state;
    case (bankmachine3_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine3_twtpcon_ready & basesoc_sdram_bankmachine3_trascon_ready)) begin
                basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine3_cmd_ready) begin
                    bankmachine3_next_state <= 3'd5;
                end
                basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine3_twtpcon_ready & basesoc_sdram_bankmachine3_trascon_ready)) begin
                bankmachine3_next_state <= 3'd5;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine3_trccon_ready) begin
                basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine3_row_open <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine3_cmd_ready) begin
                    bankmachine3_next_state <= 3'd6;
                end
                basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine3_twtpcon_ready) begin
                basesoc_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
            basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine3_refresh_req)) begin
                bankmachine3_next_state <= 1'd0;
            end
        end
        3'd5: begin
            bankmachine3_next_state <= 2'd3;
        end
        3'd6: begin
            bankmachine3_next_state <= 1'd0;
        end
        default: begin
            if (basesoc_sdram_bankmachine3_refresh_req) begin
                bankmachine3_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine3_source_source_valid) begin
                    if (basesoc_sdram_bankmachine3_row_opened) begin
                        if (basesoc_sdram_bankmachine3_row_hit) begin
                            basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine3_source_source_payload_we) begin
                                basesoc_sdram_bankmachine3_req_wdata_ready <= basesoc_sdram_bankmachine3_cmd_ready;
                                basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine3_req_rdata_valid <= basesoc_sdram_bankmachine3_cmd_ready;
                                basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine3_cmd_ready & basesoc_sdram_bankmachine3_auto_precharge)) begin
                                bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_trrdcon_valid = ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & ((basesoc_sdram_choose_cmd_cmd_payload_ras & (~basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~basesoc_sdram_choose_cmd_cmd_payload_we)));
assign basesoc_sdram_tfawcon_valid = ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & ((basesoc_sdram_choose_cmd_cmd_payload_ras & (~basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~basesoc_sdram_choose_cmd_cmd_payload_we)));
assign basesoc_sdram_ras_allowed = (basesoc_sdram_trrdcon_ready & basesoc_sdram_tfawcon_ready);
assign basesoc_sdram_tccdcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_cmd_payload_is_write | basesoc_sdram_choose_req_cmd_payload_is_read));
assign basesoc_sdram_cas_allowed = basesoc_sdram_tccdcon_ready;
assign basesoc_sdram_twtrcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
assign basesoc_sdram_read_available = ((((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_payload_is_read) | (basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_payload_is_read)) | (basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_payload_is_read)) | (basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_payload_is_read));
assign basesoc_sdram_write_available = ((((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_payload_is_write) | (basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_payload_is_write)) | (basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_payload_is_write)) | (basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_payload_is_write));
assign basesoc_sdram_max_time0 = (basesoc_sdram_time0 == 1'd0);
assign basesoc_sdram_max_time1 = (basesoc_sdram_time1 == 1'd0);
assign basesoc_sdram_bankmachine0_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine1_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine2_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine3_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_go_to_refresh = (((basesoc_sdram_bankmachine0_refresh_gnt & basesoc_sdram_bankmachine1_refresh_gnt) & basesoc_sdram_bankmachine2_refresh_gnt) & basesoc_sdram_bankmachine3_refresh_gnt);
assign basesoc_sdram_interface_rdata = {basesoc_sdram_dfi_p1_rddata, basesoc_sdram_dfi_p0_rddata};
assign {basesoc_sdram_dfi_p1_wrdata, basesoc_sdram_dfi_p0_wrdata} = basesoc_sdram_interface_wdata;
assign {basesoc_sdram_dfi_p1_wrdata_mask, basesoc_sdram_dfi_p0_wrdata_mask} = (~basesoc_sdram_interface_wdata_we);
always @(*) begin
    basesoc_sdram_choose_cmd_valids <= 4'd0;
    basesoc_sdram_choose_cmd_valids[0] <= (basesoc_sdram_bankmachine0_cmd_valid & (((basesoc_sdram_bankmachine0_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine0_cmd_payload_ras & (~basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~basesoc_sdram_bankmachine0_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine0_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine0_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[1] <= (basesoc_sdram_bankmachine1_cmd_valid & (((basesoc_sdram_bankmachine1_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine1_cmd_payload_ras & (~basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~basesoc_sdram_bankmachine1_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine1_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine1_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[2] <= (basesoc_sdram_bankmachine2_cmd_valid & (((basesoc_sdram_bankmachine2_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine2_cmd_payload_ras & (~basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~basesoc_sdram_bankmachine2_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine2_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine2_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[3] <= (basesoc_sdram_bankmachine3_cmd_valid & (((basesoc_sdram_bankmachine3_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine3_cmd_payload_ras & (~basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~basesoc_sdram_bankmachine3_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine3_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine3_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
end
assign basesoc_sdram_choose_cmd_request = basesoc_sdram_choose_cmd_valids;
assign basesoc_sdram_choose_cmd_cmd_valid = rhs_self8;
assign basesoc_sdram_choose_cmd_cmd_payload_a = rhs_self9;
assign basesoc_sdram_choose_cmd_cmd_payload_ba = rhs_self10;
assign basesoc_sdram_choose_cmd_cmd_payload_is_read = rhs_self11;
assign basesoc_sdram_choose_cmd_cmd_payload_is_write = rhs_self12;
assign basesoc_sdram_choose_cmd_cmd_payload_is_cmd = rhs_self13;
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_cas <= t_self0;
    end
end
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_ras <= t_self1;
    end
end
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_we <= t_self2;
    end
end
assign basesoc_sdram_choose_cmd_ce = (basesoc_sdram_choose_cmd_cmd_ready | (~basesoc_sdram_choose_cmd_cmd_valid));
always @(*) begin
    basesoc_sdram_choose_req_valids <= 4'd0;
    basesoc_sdram_choose_req_valids[0] <= (basesoc_sdram_bankmachine0_cmd_valid & (((basesoc_sdram_bankmachine0_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine0_cmd_payload_ras & (~basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~basesoc_sdram_bankmachine0_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine0_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine0_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[1] <= (basesoc_sdram_bankmachine1_cmd_valid & (((basesoc_sdram_bankmachine1_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine1_cmd_payload_ras & (~basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~basesoc_sdram_bankmachine1_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine1_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine1_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[2] <= (basesoc_sdram_bankmachine2_cmd_valid & (((basesoc_sdram_bankmachine2_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine2_cmd_payload_ras & (~basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~basesoc_sdram_bankmachine2_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine2_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine2_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[3] <= (basesoc_sdram_bankmachine3_cmd_valid & (((basesoc_sdram_bankmachine3_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine3_cmd_payload_ras & (~basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~basesoc_sdram_bankmachine3_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine3_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine3_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
end
assign basesoc_sdram_choose_req_request = basesoc_sdram_choose_req_valids;
assign basesoc_sdram_choose_req_cmd_valid = rhs_self14;
assign basesoc_sdram_choose_req_cmd_payload_a = rhs_self15;
assign basesoc_sdram_choose_req_cmd_payload_ba = rhs_self16;
assign basesoc_sdram_choose_req_cmd_payload_is_read = rhs_self17;
assign basesoc_sdram_choose_req_cmd_payload_is_write = rhs_self18;
assign basesoc_sdram_choose_req_cmd_payload_is_cmd = rhs_self19;
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_cas <= t_self3;
    end
end
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_ras <= t_self4;
    end
end
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_we <= t_self5;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 1'd0))) begin
        basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 1'd0))) begin
        basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 1'd1))) begin
        basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 1'd1))) begin
        basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 2'd2))) begin
        basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 2'd2))) begin
        basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 2'd3))) begin
        basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 2'd3))) begin
        basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
assign basesoc_sdram_choose_req_ce = (basesoc_sdram_choose_req_cmd_ready | (~basesoc_sdram_choose_req_cmd_valid));
assign basesoc_sdram_dfi_p0_reset_n = 1'd1;
assign basesoc_sdram_dfi_p0_cke = {1{basesoc_sdram_steerer0}};
assign basesoc_sdram_dfi_p0_odt = {1{basesoc_sdram_steerer1}};
assign basesoc_sdram_dfi_p1_reset_n = 1'd1;
assign basesoc_sdram_dfi_p1_cke = {1{basesoc_sdram_steerer2}};
assign basesoc_sdram_dfi_p1_odt = {1{basesoc_sdram_steerer3}};
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_ready <= 1'd0;
    basesoc_sdram_choose_cmd_want_activates <= 1'd0;
    basesoc_sdram_choose_req_cmd_ready <= 1'd0;
    basesoc_sdram_choose_req_want_reads <= 1'd0;
    basesoc_sdram_choose_req_want_writes <= 1'd0;
    basesoc_sdram_cmd_ready <= 1'd0;
    basesoc_sdram_en0 <= 1'd0;
    basesoc_sdram_en1 <= 1'd0;
    basesoc_sdram_steerer_sel0 <= 2'd0;
    basesoc_sdram_steerer_sel1 <= 2'd0;
    multiplexer_next_state <= 3'd0;
    multiplexer_next_state <= multiplexer_state;
    case (multiplexer_state)
        1'd1: begin
            basesoc_sdram_en1 <= 1'd1;
            basesoc_sdram_choose_req_want_writes <= 1'd1;
            if (1'd0) begin
                basesoc_sdram_choose_req_cmd_ready <= (basesoc_sdram_cas_allowed & ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed));
            end else begin
                basesoc_sdram_choose_cmd_want_activates <= basesoc_sdram_ras_allowed;
                basesoc_sdram_choose_cmd_cmd_ready <= ((~((basesoc_sdram_choose_cmd_cmd_payload_ras & (~basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~basesoc_sdram_choose_cmd_cmd_payload_we))) | basesoc_sdram_ras_allowed);
                basesoc_sdram_choose_req_cmd_ready <= basesoc_sdram_cas_allowed;
            end
            basesoc_sdram_steerer_sel0 <= 1'd0;
            if (1'd1) begin
                basesoc_sdram_steerer_sel0 <= 2'd2;
            end
            if (1'd0) begin
                basesoc_sdram_steerer_sel0 <= 1'd1;
            end
            basesoc_sdram_steerer_sel1 <= 1'd0;
            if (1'd0) begin
                basesoc_sdram_steerer_sel1 <= 2'd2;
            end
            if (1'd1) begin
                basesoc_sdram_steerer_sel1 <= 1'd1;
            end
            if (basesoc_sdram_read_available) begin
                if (((~basesoc_sdram_write_available) | basesoc_sdram_max_time1)) begin
                    multiplexer_next_state <= 2'd3;
                end
            end
            if (basesoc_sdram_go_to_refresh) begin
                multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_sdram_steerer_sel0 <= 2'd3;
            basesoc_sdram_cmd_ready <= 1'd1;
            if (basesoc_sdram_cmd_last) begin
                multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (basesoc_sdram_twtrcon_ready) begin
                multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            multiplexer_next_state <= 1'd1;
        end
        default: begin
            basesoc_sdram_en0 <= 1'd1;
            basesoc_sdram_choose_req_want_reads <= 1'd1;
            if (1'd0) begin
                basesoc_sdram_choose_req_cmd_ready <= (basesoc_sdram_cas_allowed & ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed));
            end else begin
                basesoc_sdram_choose_cmd_want_activates <= basesoc_sdram_ras_allowed;
                basesoc_sdram_choose_cmd_cmd_ready <= ((~((basesoc_sdram_choose_cmd_cmd_payload_ras & (~basesoc_sdram_choose_cmd_cmd_payload_cas)) & (~basesoc_sdram_choose_cmd_cmd_payload_we))) | basesoc_sdram_ras_allowed);
                basesoc_sdram_choose_req_cmd_ready <= basesoc_sdram_cas_allowed;
            end
            basesoc_sdram_steerer_sel0 <= 1'd0;
            if (1'd1) begin
                basesoc_sdram_steerer_sel0 <= 2'd2;
            end
            if (1'd0) begin
                basesoc_sdram_steerer_sel0 <= 1'd1;
            end
            basesoc_sdram_steerer_sel1 <= 1'd0;
            if (1'd0) begin
                basesoc_sdram_steerer_sel1 <= 2'd2;
            end
            if (1'd1) begin
                basesoc_sdram_steerer_sel1 <= 1'd1;
            end
            if (basesoc_sdram_write_available) begin
                if (((~basesoc_sdram_read_available) | basesoc_sdram_max_time0)) begin
                    multiplexer_next_state <= 3'd4;
                end
            end
            if (basesoc_sdram_go_to_refresh) begin
                multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign roundrobin0_request = {(((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 1'd0) & (~(((locked3 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid), (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 1'd0) & (~(((locked2 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid), (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 1'd0) & (~(((locked1 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid), (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 1'd0) & (~(((locked0 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid)};
assign roundrobin0_ce = ((~basesoc_sdram_interface_bank0_valid) & (~basesoc_sdram_interface_bank0_lock));
assign basesoc_sdram_interface_bank0_addr = rhs_self20;
assign basesoc_sdram_interface_bank0_we = rhs_self21;
assign basesoc_sdram_interface_bank0_valid = rhs_self22;
assign roundrobin1_request = {(((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 1'd1) & (~(((locked7 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid), (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 1'd1) & (~(((locked6 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid), (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 1'd1) & (~(((locked5 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid), (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 1'd1) & (~(((locked4 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid)};
assign roundrobin1_ce = ((~basesoc_sdram_interface_bank1_valid) & (~basesoc_sdram_interface_bank1_lock));
assign basesoc_sdram_interface_bank1_addr = rhs_self23;
assign basesoc_sdram_interface_bank1_we = rhs_self24;
assign basesoc_sdram_interface_bank1_valid = rhs_self25;
assign roundrobin2_request = {(((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 2'd2) & (~(((locked11 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid), (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 2'd2) & (~(((locked10 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid), (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 2'd2) & (~(((locked9 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid), (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 2'd2) & (~(((locked8 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid)};
assign roundrobin2_ce = ((~basesoc_sdram_interface_bank2_valid) & (~basesoc_sdram_interface_bank2_lock));
assign basesoc_sdram_interface_bank2_addr = rhs_self26;
assign basesoc_sdram_interface_bank2_we = rhs_self27;
assign basesoc_sdram_interface_bank2_valid = rhs_self28;
assign roundrobin3_request = {(((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 2'd3) & (~(((locked15 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid), (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 2'd3) & (~(((locked14 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid), (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 2'd3) & (~(((locked13 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid), (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 2'd3) & (~(((locked12 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid)};
assign roundrobin3_ce = ((~basesoc_sdram_interface_bank3_valid) & (~basesoc_sdram_interface_bank3_lock));
assign basesoc_sdram_interface_bank3_addr = rhs_self29;
assign basesoc_sdram_interface_bank3_we = rhs_self30;
assign basesoc_sdram_interface_bank3_valid = rhs_self31;
assign basesoc_litedramnativeport0_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 1'd0) & ((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 1'd0) & (~(((locked0 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 1'd0) & ((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 1'd1) & (~(((locked4 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 1'd0) & ((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 2'd2) & (~(((locked8 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 1'd0) & ((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 2'd3) & (~(((locked12 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0)))))) & basesoc_sdram_interface_bank3_ready));
assign basesoc_litedramnativeport1_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 1'd1) & ((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 1'd0) & (~(((locked1 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1)))))) & basesoc_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 1'd1) & ((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 1'd1) & (~(((locked5 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1)))))) & basesoc_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 1'd1) & ((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 2'd2) & (~(((locked9 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1)))))) & basesoc_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 1'd1) & ((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 2'd3) & (~(((locked13 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1)))))) & basesoc_sdram_interface_bank3_ready));
assign basesoc_litedramnativeport2_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 2'd2) & ((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 1'd0) & (~(((locked2 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2)))))) & basesoc_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 2'd2) & ((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 1'd1) & (~(((locked6 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2)))))) & basesoc_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 2'd2) & ((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 2'd2) & (~(((locked10 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2)))))) & basesoc_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 2'd2) & ((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 2'd3) & (~(((locked14 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2)))))) & basesoc_sdram_interface_bank3_ready));
assign basesoc_litedramcrossbar_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 2'd3) & ((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 1'd0) & (~(((locked3 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3)))))) & basesoc_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 2'd3) & ((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 1'd1) & (~(((locked7 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3)))))) & basesoc_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 2'd3) & ((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 2'd2) & (~(((locked11 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3)))))) & basesoc_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 2'd3) & ((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 2'd3) & (~(((locked15 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3)))))) & basesoc_sdram_interface_bank3_ready));
assign basesoc_litedramnativeport0_wdata_ready = new_master_wdata_ready0;
assign basesoc_litedramnativeport1_wdata_ready = new_master_wdata_ready1;
assign basesoc_litedramnativeport2_wdata_ready = new_master_wdata_ready2;
assign basesoc_litedramcrossbar_wdata_ready = new_master_wdata_ready3;
assign basesoc_litedramnativeport0_rdata_valid = new_master_rdata_valid3;
assign basesoc_litedramnativeport1_rdata_valid = new_master_rdata_valid7;
assign basesoc_litedramnativeport2_rdata_valid = new_master_rdata_valid11;
assign basesoc_litedramcrossbar_rdata_valid = new_master_rdata_valid15;
always @(*) begin
    basesoc_sdram_interface_wdata <= 32'd0;
    basesoc_sdram_interface_wdata_we <= 4'd0;
    case ({new_master_wdata_ready3, new_master_wdata_ready2, new_master_wdata_ready1, new_master_wdata_ready0})
        1'd1: begin
            basesoc_sdram_interface_wdata <= basesoc_litedramnativeport0_wdata_payload_data;
            basesoc_sdram_interface_wdata_we <= basesoc_litedramnativeport0_wdata_payload_we;
        end
        2'd2: begin
            basesoc_sdram_interface_wdata <= basesoc_litedramnativeport1_wdata_payload_data;
            basesoc_sdram_interface_wdata_we <= basesoc_litedramnativeport1_wdata_payload_we;
        end
        3'd4: begin
            basesoc_sdram_interface_wdata <= basesoc_litedramnativeport2_wdata_payload_data;
            basesoc_sdram_interface_wdata_we <= basesoc_litedramnativeport2_wdata_payload_we;
        end
        4'd8: begin
            basesoc_sdram_interface_wdata <= basesoc_litedramcrossbar_wdata_payload_data;
            basesoc_sdram_interface_wdata_we <= basesoc_litedramcrossbar_wdata_payload_we;
        end
        default: begin
            basesoc_sdram_interface_wdata <= 1'd0;
            basesoc_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign basesoc_litedramnativeport0_rdata_payload_data = basesoc_sdram_interface_rdata;
assign basesoc_litedramnativeport1_rdata_payload_data = basesoc_sdram_interface_rdata;
assign basesoc_litedramnativeport2_rdata_payload_data = basesoc_sdram_interface_rdata;
assign basesoc_litedramcrossbar_rdata_payload_data = basesoc_sdram_interface_rdata;
assign basesoc_litedram_wb_adr = basesoc_wb_sdram_adr;
assign basesoc_litedram_wb_dat_w = basesoc_wb_sdram_dat_w;
assign basesoc_wb_sdram_dat_r = basesoc_litedram_wb_dat_r;
assign basesoc_litedram_wb_sel = basesoc_wb_sdram_sel;
assign basesoc_litedram_wb_cyc = basesoc_wb_sdram_cyc;
assign basesoc_litedram_wb_stb = basesoc_wb_sdram_stb;
assign basesoc_wb_sdram_ack = basesoc_litedram_wb_ack;
assign basesoc_litedram_wb_we = basesoc_wb_sdram_we;
assign basesoc_litedram_wb_cti = basesoc_wb_sdram_cti;
assign basesoc_litedram_wb_bte = basesoc_wb_sdram_bte;
assign basesoc_wb_sdram_err = basesoc_litedram_wb_err;
assign basesoc_litedramnativeport2_cmd_payload_addr = (basesoc_litedram_wb_adr - 29'd268435456);
assign basesoc_litedramnativeport2_cmd_payload_we = basesoc_litedram_wb_we;
assign basesoc_litedramnativeport2_cmd_last = (~basesoc_litedram_wb_we);
assign basesoc_litedramnativeport2_flush = (~basesoc_litedram_wb_cyc);
always @(*) begin
    basesoc_litedramnativeport2_wdata_valid <= 1'd0;
    basesoc_litedramnativeport2_wdata_valid <= (basesoc_litedram_wb_stb & basesoc_litedram_wb_we);
    if (1'd1) begin
        if ((~basesoc_is_ongoing)) begin
            basesoc_litedramnativeport2_wdata_valid <= 1'd0;
        end
    end
end
assign basesoc_litedramnativeport2_wdata_payload_data = basesoc_litedram_wb_dat_w;
assign basesoc_litedramnativeport2_wdata_payload_we = basesoc_litedram_wb_sel;
assign basesoc_litedramnativeport2_rdata_ready = 1'd1;
always @(*) begin
    basesoc_aborted_litedramwishbone2native_next_value <= 1'd0;
    basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd0;
    basesoc_is_ongoing <= 1'd0;
    basesoc_litedram_wb_ack <= 1'd0;
    basesoc_litedram_wb_dat_r <= 32'd0;
    basesoc_litedramnativeport2_cmd_valid <= 1'd0;
    litedramwishbone2native_next_state <= 2'd0;
    litedramwishbone2native_next_state <= litedramwishbone2native_state;
    case (litedramwishbone2native_state)
        1'd1: begin
            basesoc_is_ongoing <= 1'd1;
            basesoc_aborted_litedramwishbone2native_next_value <= ((~basesoc_litedram_wb_cyc) | basesoc_aborted);
            basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
            if ((basesoc_litedramnativeport2_wdata_valid & basesoc_litedramnativeport2_wdata_ready)) begin
                basesoc_litedram_wb_ack <= (basesoc_litedram_wb_cyc & (~basesoc_aborted));
                litedramwishbone2native_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_aborted_litedramwishbone2native_next_value <= ((~basesoc_litedram_wb_cyc) | basesoc_aborted);
            basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
            if (basesoc_litedramnativeport2_rdata_valid) begin
                basesoc_litedram_wb_ack <= (basesoc_litedram_wb_cyc & (~basesoc_aborted));
                basesoc_litedram_wb_dat_r <= basesoc_litedramnativeport2_rdata_payload_data;
                litedramwishbone2native_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_litedramnativeport2_cmd_valid <= (basesoc_litedram_wb_cyc & basesoc_litedram_wb_stb);
            if (((basesoc_litedramnativeport2_cmd_valid & basesoc_litedramnativeport2_cmd_ready) & basesoc_litedram_wb_we)) begin
                litedramwishbone2native_next_state <= 1'd1;
            end
            if (((basesoc_litedramnativeport2_cmd_valid & basesoc_litedramnativeport2_cmd_ready) & (~basesoc_litedram_wb_we))) begin
                litedramwishbone2native_next_state <= 2'd2;
            end
            basesoc_aborted_litedramwishbone2native_next_value <= 1'd0;
            basesoc_aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
    endcase
end
assign sink_ready = 1'd1;
assign vga_de = sink_payload_de;
assign vga_hsync = sink_payload_hsync;
assign vga_vsync = sink_payload_vsync;
always @(*) begin
    vga_r <= 5'd0;
    vga_r[0] <= (sink_payload_r[3] & sink_payload_de);
    vga_r[1] <= (sink_payload_r[4] & sink_payload_de);
    vga_r[2] <= (sink_payload_r[5] & sink_payload_de);
    vga_r[3] <= (sink_payload_r[6] & sink_payload_de);
    vga_r[4] <= (sink_payload_r[7] & sink_payload_de);
end
always @(*) begin
    vga_g <= 6'd0;
    vga_g[0] <= (sink_payload_g[2] & sink_payload_de);
    vga_g[1] <= (sink_payload_g[3] & sink_payload_de);
    vga_g[2] <= (sink_payload_g[4] & sink_payload_de);
    vga_g[3] <= (sink_payload_g[5] & sink_payload_de);
    vga_g[4] <= (sink_payload_g[6] & sink_payload_de);
    vga_g[5] <= (sink_payload_g[7] & sink_payload_de);
end
always @(*) begin
    vga_b <= 5'd0;
    vga_b[0] <= (sink_payload_b[3] & sink_payload_de);
    vga_b[1] <= (sink_payload_b[4] & sink_payload_de);
    vga_b[2] <= (sink_payload_b[5] & sink_payload_de);
    vga_b[3] <= (sink_payload_b[6] & sink_payload_de);
    vga_b[4] <= (sink_payload_b[7] & sink_payload_de);
end
assign basesoc_vtg_reset = (~basesoc_vtg_enable);
assign basesoc_vtg_source_payload_de = (basesoc_vtg_hactive & basesoc_vtg_vactive);
always @(*) begin
    basesoc_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
    basesoc_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd0;
    basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 12'd0;
    basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd0;
    basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= 12'd0;
    basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd0;
    basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
    basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd0;
    basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 12'd0;
    basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd0;
    basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= 12'd0;
    basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd0;
    basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
    basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd0;
    basesoc_vtg_source_valid <= 1'd0;
    basesoc_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
    basesoc_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd0;
    clockdomainsrenamer_next_state <= 1'd0;
    clockdomainsrenamer_next_state <= clockdomainsrenamer_state;
    case (clockdomainsrenamer_state)
        1'd1: begin
            basesoc_vtg_source_valid <= 1'd1;
            if (basesoc_vtg_source_ready) begin
                basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= (basesoc_vtg_source_payload_hcount + 1'd1);
                basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
                if ((basesoc_vtg_source_payload_hcount == 1'd0)) begin
                    basesoc_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd1;
                    basesoc_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                end
                if ((basesoc_vtg_source_payload_hcount == basesoc_vtg_hres)) begin
                    basesoc_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
                    basesoc_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
                end
                if ((basesoc_vtg_source_payload_hcount == basesoc_vtg_hsync_start)) begin
                    basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd1;
                    basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
                end
                if ((basesoc_vtg_source_payload_hcount == basesoc_vtg_hsync_end)) begin
                    basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value6 <= 1'd0;
                    basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6 <= 1'd1;
                end
                if ((basesoc_vtg_source_payload_hcount == basesoc_vtg_hscan)) begin
                    basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
                    basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
                end
                if ((basesoc_vtg_source_payload_hcount == basesoc_vtg_hsync_start)) begin
                    basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= (basesoc_vtg_source_payload_vcount + 1'd1);
                    basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
                    if ((basesoc_vtg_source_payload_vcount == 1'd0)) begin
                        basesoc_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd1;
                        basesoc_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                    end
                    if ((basesoc_vtg_source_payload_vcount == basesoc_vtg_vres)) begin
                        basesoc_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
                        basesoc_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
                    end
                    if ((basesoc_vtg_source_payload_vcount == basesoc_vtg_vsync_start)) begin
                        basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd1;
                        basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
                    end
                    if ((basesoc_vtg_source_payload_vcount == basesoc_vtg_vsync_end)) begin
                        basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value7 <= 1'd0;
                        basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7 <= 1'd1;
                    end
                    if ((basesoc_vtg_source_payload_vcount == basesoc_vtg_vscan)) begin
                        basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
                        basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
                    end
                end
            end
        end
        default: begin
            basesoc_vtg_hactive_clockdomainsrenamer_next_value0 <= 1'd0;
            basesoc_vtg_hactive_clockdomainsrenamer_next_value_ce0 <= 1'd1;
            basesoc_vtg_vactive_clockdomainsrenamer_next_value1 <= 1'd0;
            basesoc_vtg_vactive_clockdomainsrenamer_next_value_ce1 <= 1'd1;
            basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value2 <= basesoc_vtg_hres;
            basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2 <= 1'd1;
            basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value3 <= basesoc_vtg_vres;
            basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3 <= 1'd1;
            basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value4 <= 1'd0;
            basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4 <= 1'd1;
            basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value5 <= 1'd0;
            basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5 <= 1'd1;
            clockdomainsrenamer_next_state <= 1'd1;
        end
    endcase
end
assign basesoc_videoframebuffer_conv_converter_sink_valid = basesoc_videoframebuffer_dma_source_source_valid;
assign basesoc_videoframebuffer_dma_source_source_ready = basesoc_videoframebuffer_conv_converter_sink_ready;
assign basesoc_videoframebuffer_conv_converter_sink_first = basesoc_videoframebuffer_dma_source_source_first;
assign basesoc_videoframebuffer_conv_converter_sink_last = basesoc_videoframebuffer_dma_source_source_last;
assign basesoc_videoframebuffer_conv_converter_sink_payload_data = basesoc_videoframebuffer_dma_source_source_payload_data;
assign basesoc_videoframebuffer_cdc_sink_sink_valid = basesoc_videoframebuffer_conv_source_source_valid;
assign basesoc_videoframebuffer_conv_source_source_ready = basesoc_videoframebuffer_cdc_sink_sink_ready;
assign basesoc_videoframebuffer_cdc_sink_sink_first = basesoc_videoframebuffer_conv_source_source_first;
assign basesoc_videoframebuffer_cdc_sink_sink_last = basesoc_videoframebuffer_conv_source_source_last;
assign basesoc_videoframebuffer_cdc_sink_sink_payload_data = basesoc_videoframebuffer_conv_source_source_payload_data;
assign basesoc_videoframebuffer_source_payload_r = {basesoc_videoframebuffer_cdc_source_source_payload_data[15:11], basesoc_videoframebuffer0};
assign basesoc_videoframebuffer_source_payload_g = {basesoc_videoframebuffer_cdc_source_source_payload_data[10:5], basesoc_videoframebuffer1};
assign basesoc_videoframebuffer_source_payload_b = {basesoc_videoframebuffer_cdc_source_source_payload_data[4:0], basesoc_videoframebuffer2};
assign basesoc_videoframebuffer_underflow = (~basesoc_videoframebuffer_source_valid);
assign basesoc_litedramcrossbar_cmd_payload_we = 1'd0;
assign basesoc_litedramcrossbar_cmd_payload_addr = basesoc_videoframebuffer_dma_sink_sink_payload_address;
assign basesoc_litedramcrossbar_cmd_last = basesoc_videoframebuffer_dma_sink_sink_last;
assign basesoc_litedramcrossbar_cmd_valid = ((basesoc_videoframebuffer_dma_enable & basesoc_videoframebuffer_dma_sink_sink_valid) & basesoc_videoframebuffer_dma_res_fifo_sink_ready);
assign basesoc_videoframebuffer_dma_sink_sink_ready = ((basesoc_videoframebuffer_dma_enable & basesoc_litedramcrossbar_cmd_ready) & basesoc_videoframebuffer_dma_res_fifo_sink_ready);
assign basesoc_videoframebuffer_dma_res_fifo_sink_valid = (basesoc_litedramcrossbar_cmd_valid & basesoc_litedramcrossbar_cmd_ready);
assign basesoc_videoframebuffer_dma_res_fifo_sink_last = basesoc_litedramcrossbar_cmd_last;
assign basesoc_videoframebuffer_dma_fifo_sink_valid = basesoc_litedramcrossbar_rdata_valid;
assign basesoc_litedramcrossbar_rdata_ready = basesoc_videoframebuffer_dma_fifo_sink_ready;
assign basesoc_videoframebuffer_dma_fifo_sink_first = basesoc_litedramcrossbar_rdata_first;
assign basesoc_videoframebuffer_dma_fifo_sink_last = basesoc_litedramcrossbar_rdata_last;
assign basesoc_videoframebuffer_dma_fifo_sink_payload_data = basesoc_litedramcrossbar_rdata_payload_data;
assign basesoc_videoframebuffer_dma_source_source_first = basesoc_videoframebuffer_dma_fifo_source_first;
assign basesoc_videoframebuffer_dma_source_source_payload_data = basesoc_videoframebuffer_dma_fifo_source_payload_data;
always @(*) begin
    basesoc_videoframebuffer_dma_source_source_last <= 1'd0;
    basesoc_videoframebuffer_dma_source_source_valid <= 1'd0;
    if (basesoc_videoframebuffer_dma_res_fifo_source_valid) begin
        basesoc_videoframebuffer_dma_source_source_valid <= basesoc_videoframebuffer_dma_fifo_source_valid;
        basesoc_videoframebuffer_dma_source_source_last <= basesoc_videoframebuffer_dma_res_fifo_source_last;
    end
end
assign basesoc_videoframebuffer_dma_fifo_source_ready = (basesoc_videoframebuffer_dma_source_source_ready | (~basesoc_videoframebuffer_dma_enable));
assign basesoc_videoframebuffer_dma_res_fifo_source_ready = (basesoc_videoframebuffer_dma_fifo_source_valid & basesoc_videoframebuffer_dma_fifo_source_ready);
assign basesoc_videoframebuffer_dma_enable = basesoc_videoframebuffer_litedramdmareader_enable_storage;
assign basesoc_videoframebuffer_litedramdmareader_base = basesoc_videoframebuffer_litedramdmareader_base_storage[31:2];
assign basesoc_videoframebuffer_litedramdmareader_length = basesoc_videoframebuffer_litedramdmareader_length_storage[31:2];
assign basesoc_videoframebuffer_litedramdmareader_offset_status = basesoc_videoframebuffer_litedramdmareader_offset;
assign basesoc_videoframebuffer_litedramdmareader_reset = (~basesoc_videoframebuffer_litedramdmareader_enable_storage);
assign basesoc_videoframebuffer_dma_res_fifo_syncfifo_din = {basesoc_videoframebuffer_dma_res_fifo_fifo_in_last, basesoc_videoframebuffer_dma_res_fifo_fifo_in_first, basesoc_videoframebuffer_dma_res_fifo_fifo_in_payload_dummy};
assign {basesoc_videoframebuffer_dma_res_fifo_fifo_out_last, basesoc_videoframebuffer_dma_res_fifo_fifo_out_first, basesoc_videoframebuffer_dma_res_fifo_fifo_out_payload_dummy} = basesoc_videoframebuffer_dma_res_fifo_syncfifo_dout;
assign basesoc_videoframebuffer_dma_res_fifo_sink_ready = basesoc_videoframebuffer_dma_res_fifo_syncfifo_writable;
assign basesoc_videoframebuffer_dma_res_fifo_syncfifo_we = basesoc_videoframebuffer_dma_res_fifo_sink_valid;
assign basesoc_videoframebuffer_dma_res_fifo_fifo_in_first = basesoc_videoframebuffer_dma_res_fifo_sink_first;
assign basesoc_videoframebuffer_dma_res_fifo_fifo_in_last = basesoc_videoframebuffer_dma_res_fifo_sink_last;
assign basesoc_videoframebuffer_dma_res_fifo_fifo_in_payload_dummy = basesoc_videoframebuffer_dma_res_fifo_sink_payload_dummy;
assign basesoc_videoframebuffer_dma_res_fifo_source_valid = basesoc_videoframebuffer_dma_res_fifo_syncfifo_readable;
assign basesoc_videoframebuffer_dma_res_fifo_source_first = basesoc_videoframebuffer_dma_res_fifo_fifo_out_first;
assign basesoc_videoframebuffer_dma_res_fifo_source_last = basesoc_videoframebuffer_dma_res_fifo_fifo_out_last;
assign basesoc_videoframebuffer_dma_res_fifo_source_payload_dummy = basesoc_videoframebuffer_dma_res_fifo_fifo_out_payload_dummy;
assign basesoc_videoframebuffer_dma_res_fifo_syncfifo_re = basesoc_videoframebuffer_dma_res_fifo_source_ready;
always @(*) begin
    basesoc_videoframebuffer_dma_res_fifo_wrport_adr <= 14'd0;
    if (basesoc_videoframebuffer_dma_res_fifo_replace) begin
        basesoc_videoframebuffer_dma_res_fifo_wrport_adr <= (basesoc_videoframebuffer_dma_res_fifo_produce - 1'd1);
    end else begin
        basesoc_videoframebuffer_dma_res_fifo_wrport_adr <= basesoc_videoframebuffer_dma_res_fifo_produce;
    end
end
assign basesoc_videoframebuffer_dma_res_fifo_wrport_dat_w = basesoc_videoframebuffer_dma_res_fifo_syncfifo_din;
assign basesoc_videoframebuffer_dma_res_fifo_wrport_we = (basesoc_videoframebuffer_dma_res_fifo_syncfifo_we & (basesoc_videoframebuffer_dma_res_fifo_syncfifo_writable | basesoc_videoframebuffer_dma_res_fifo_replace));
assign basesoc_videoframebuffer_dma_res_fifo_do_read = (basesoc_videoframebuffer_dma_res_fifo_syncfifo_readable & basesoc_videoframebuffer_dma_res_fifo_syncfifo_re);
assign basesoc_videoframebuffer_dma_res_fifo_rdport_adr = basesoc_videoframebuffer_dma_res_fifo_consume;
assign basesoc_videoframebuffer_dma_res_fifo_syncfifo_dout = basesoc_videoframebuffer_dma_res_fifo_rdport_dat_r;
assign basesoc_videoframebuffer_dma_res_fifo_syncfifo_writable = (basesoc_videoframebuffer_dma_res_fifo_level != 15'd16384);
assign basesoc_videoframebuffer_dma_res_fifo_syncfifo_readable = (basesoc_videoframebuffer_dma_res_fifo_level != 1'd0);
assign basesoc_videoframebuffer_dma_fifo_syncfifo_din = {basesoc_videoframebuffer_dma_fifo_fifo_in_last, basesoc_videoframebuffer_dma_fifo_fifo_in_first, basesoc_videoframebuffer_dma_fifo_fifo_in_payload_data};
assign {basesoc_videoframebuffer_dma_fifo_fifo_out_last, basesoc_videoframebuffer_dma_fifo_fifo_out_first, basesoc_videoframebuffer_dma_fifo_fifo_out_payload_data} = basesoc_videoframebuffer_dma_fifo_syncfifo_dout;
assign basesoc_videoframebuffer_dma_fifo_sink_ready = basesoc_videoframebuffer_dma_fifo_syncfifo_writable;
assign basesoc_videoframebuffer_dma_fifo_syncfifo_we = basesoc_videoframebuffer_dma_fifo_sink_valid;
assign basesoc_videoframebuffer_dma_fifo_fifo_in_first = basesoc_videoframebuffer_dma_fifo_sink_first;
assign basesoc_videoframebuffer_dma_fifo_fifo_in_last = basesoc_videoframebuffer_dma_fifo_sink_last;
assign basesoc_videoframebuffer_dma_fifo_fifo_in_payload_data = basesoc_videoframebuffer_dma_fifo_sink_payload_data;
assign basesoc_videoframebuffer_dma_fifo_source_valid = basesoc_videoframebuffer_dma_fifo_readable;
assign basesoc_videoframebuffer_dma_fifo_source_first = basesoc_videoframebuffer_dma_fifo_fifo_out_first;
assign basesoc_videoframebuffer_dma_fifo_source_last = basesoc_videoframebuffer_dma_fifo_fifo_out_last;
assign basesoc_videoframebuffer_dma_fifo_source_payload_data = basesoc_videoframebuffer_dma_fifo_fifo_out_payload_data;
assign basesoc_videoframebuffer_dma_fifo_re = basesoc_videoframebuffer_dma_fifo_source_ready;
assign basesoc_videoframebuffer_dma_fifo_syncfifo_re = (basesoc_videoframebuffer_dma_fifo_syncfifo_readable & ((~basesoc_videoframebuffer_dma_fifo_readable) | basesoc_videoframebuffer_dma_fifo_re));
assign basesoc_videoframebuffer_dma_fifo_level1 = (basesoc_videoframebuffer_dma_fifo_level0 + basesoc_videoframebuffer_dma_fifo_readable);
always @(*) begin
    basesoc_videoframebuffer_dma_fifo_wrport_adr <= 14'd0;
    if (basesoc_videoframebuffer_dma_fifo_replace) begin
        basesoc_videoframebuffer_dma_fifo_wrport_adr <= (basesoc_videoframebuffer_dma_fifo_produce - 1'd1);
    end else begin
        basesoc_videoframebuffer_dma_fifo_wrport_adr <= basesoc_videoframebuffer_dma_fifo_produce;
    end
end
assign basesoc_videoframebuffer_dma_fifo_wrport_dat_w = basesoc_videoframebuffer_dma_fifo_syncfifo_din;
assign basesoc_videoframebuffer_dma_fifo_wrport_we = (basesoc_videoframebuffer_dma_fifo_syncfifo_we & (basesoc_videoframebuffer_dma_fifo_syncfifo_writable | basesoc_videoframebuffer_dma_fifo_replace));
assign basesoc_videoframebuffer_dma_fifo_do_read = (basesoc_videoframebuffer_dma_fifo_syncfifo_readable & basesoc_videoframebuffer_dma_fifo_syncfifo_re);
assign basesoc_videoframebuffer_dma_fifo_rdport_adr = basesoc_videoframebuffer_dma_fifo_consume;
assign basesoc_videoframebuffer_dma_fifo_syncfifo_dout = basesoc_videoframebuffer_dma_fifo_rdport_dat_r;
assign basesoc_videoframebuffer_dma_fifo_rdport_re = basesoc_videoframebuffer_dma_fifo_do_read;
assign basesoc_videoframebuffer_dma_fifo_syncfifo_writable = (basesoc_videoframebuffer_dma_fifo_level0 != 15'd16384);
assign basesoc_videoframebuffer_dma_fifo_syncfifo_readable = (basesoc_videoframebuffer_dma_fifo_level0 != 1'd0);
always @(*) begin
    basesoc_videoframebuffer_dma_sink_sink_last <= 1'd0;
    basesoc_videoframebuffer_dma_sink_sink_payload_address <= 24'd0;
    basesoc_videoframebuffer_dma_sink_sink_valid <= 1'd0;
    basesoc_videoframebuffer_litedramdmareader_done_status <= 1'd0;
    basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value <= 24'd0;
    basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd0;
    videoframebuffer_litedramdmareader_next_state <= 2'd0;
    videoframebuffer_litedramdmareader_next_state <= videoframebuffer_litedramdmareader_state;
    case (videoframebuffer_litedramdmareader_state)
        1'd1: begin
            basesoc_videoframebuffer_dma_sink_sink_valid <= 1'd1;
            basesoc_videoframebuffer_dma_sink_sink_last <= (basesoc_videoframebuffer_litedramdmareader_offset == (basesoc_videoframebuffer_litedramdmareader_length - 1'd1));
            basesoc_videoframebuffer_dma_sink_sink_payload_address <= (basesoc_videoframebuffer_litedramdmareader_base + basesoc_videoframebuffer_litedramdmareader_offset);
            if (basesoc_videoframebuffer_dma_sink_sink_ready) begin
                basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value <= (basesoc_videoframebuffer_litedramdmareader_offset + 1'd1);
                basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd1;
                if (basesoc_videoframebuffer_dma_sink_sink_last) begin
                    if (basesoc_videoframebuffer_litedramdmareader_loop_storage) begin
                        basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value <= 1'd0;
                        basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd1;
                    end else begin
                        videoframebuffer_litedramdmareader_next_state <= 2'd2;
                    end
                end
            end
        end
        2'd2: begin
            basesoc_videoframebuffer_litedramdmareader_done_status <= 1'd1;
        end
        default: begin
            basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value <= 1'd0;
            basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value_ce <= 1'd1;
            videoframebuffer_litedramdmareader_next_state <= 1'd1;
        end
    endcase
end
assign basesoc_videoframebuffer_conv_source_source_valid = basesoc_videoframebuffer_conv_converter_source_valid;
assign basesoc_videoframebuffer_conv_converter_source_ready = basesoc_videoframebuffer_conv_source_source_ready;
assign basesoc_videoframebuffer_conv_source_source_first = basesoc_videoframebuffer_conv_converter_source_first;
assign basesoc_videoframebuffer_conv_source_source_last = basesoc_videoframebuffer_conv_converter_source_last;
assign basesoc_videoframebuffer_conv_source_source_payload_data = basesoc_videoframebuffer_conv_converter_source_payload_data;
assign basesoc_videoframebuffer_conv_converter_first = (basesoc_videoframebuffer_conv_converter_mux == 1'd0);
assign basesoc_videoframebuffer_conv_converter_last = (basesoc_videoframebuffer_conv_converter_mux == 1'd1);
assign basesoc_videoframebuffer_conv_converter_source_valid = basesoc_videoframebuffer_conv_converter_sink_valid;
assign basesoc_videoframebuffer_conv_converter_source_first = (basesoc_videoframebuffer_conv_converter_sink_first & basesoc_videoframebuffer_conv_converter_first);
assign basesoc_videoframebuffer_conv_converter_source_last = (basesoc_videoframebuffer_conv_converter_sink_last & basesoc_videoframebuffer_conv_converter_last);
assign basesoc_videoframebuffer_conv_converter_sink_ready = (basesoc_videoframebuffer_conv_converter_last & basesoc_videoframebuffer_conv_converter_source_ready);
always @(*) begin
    basesoc_videoframebuffer_conv_converter_source_payload_data <= 16'd0;
    case (basesoc_videoframebuffer_conv_converter_mux)
        1'd0: begin
            basesoc_videoframebuffer_conv_converter_source_payload_data <= basesoc_videoframebuffer_conv_converter_sink_payload_data[15:0];
        end
        default: begin
            basesoc_videoframebuffer_conv_converter_source_payload_data <= basesoc_videoframebuffer_conv_converter_sink_payload_data[31:16];
        end
    endcase
end
assign basesoc_videoframebuffer_conv_converter_source_payload_valid_token_count = basesoc_videoframebuffer_conv_converter_last;
assign basesoc_videoframebuffer_cdc_cdc_sink_valid = basesoc_videoframebuffer_cdc_sink_sink_valid;
assign basesoc_videoframebuffer_cdc_sink_sink_ready = basesoc_videoframebuffer_cdc_cdc_sink_ready;
assign basesoc_videoframebuffer_cdc_cdc_sink_first = basesoc_videoframebuffer_cdc_sink_sink_first;
assign basesoc_videoframebuffer_cdc_cdc_sink_last = basesoc_videoframebuffer_cdc_sink_sink_last;
assign basesoc_videoframebuffer_cdc_cdc_sink_payload_data = basesoc_videoframebuffer_cdc_sink_sink_payload_data;
assign basesoc_videoframebuffer_cdc_source_source_valid = basesoc_videoframebuffer_cdc_cdc_source_valid;
assign basesoc_videoframebuffer_cdc_cdc_source_ready = basesoc_videoframebuffer_cdc_source_source_ready;
assign basesoc_videoframebuffer_cdc_source_source_first = basesoc_videoframebuffer_cdc_cdc_source_first;
assign basesoc_videoframebuffer_cdc_source_source_last = basesoc_videoframebuffer_cdc_cdc_source_last;
assign basesoc_videoframebuffer_cdc_source_source_payload_data = basesoc_videoframebuffer_cdc_cdc_source_payload_data;
assign basesoc_videoframebuffer_cdc_cdc_asyncfifo_din = {basesoc_videoframebuffer_cdc_cdc_fifo_in_last, basesoc_videoframebuffer_cdc_cdc_fifo_in_first, basesoc_videoframebuffer_cdc_cdc_fifo_in_payload_data};
assign {basesoc_videoframebuffer_cdc_cdc_fifo_out_last, basesoc_videoframebuffer_cdc_cdc_fifo_out_first, basesoc_videoframebuffer_cdc_cdc_fifo_out_payload_data} = basesoc_videoframebuffer_cdc_cdc_asyncfifo_dout;
assign basesoc_videoframebuffer_cdc_cdc_sink_ready = basesoc_videoframebuffer_cdc_cdc_asyncfifo_writable;
assign basesoc_videoframebuffer_cdc_cdc_asyncfifo_we = basesoc_videoframebuffer_cdc_cdc_sink_valid;
assign basesoc_videoframebuffer_cdc_cdc_fifo_in_first = basesoc_videoframebuffer_cdc_cdc_sink_first;
assign basesoc_videoframebuffer_cdc_cdc_fifo_in_last = basesoc_videoframebuffer_cdc_cdc_sink_last;
assign basesoc_videoframebuffer_cdc_cdc_fifo_in_payload_data = basesoc_videoframebuffer_cdc_cdc_sink_payload_data;
assign basesoc_videoframebuffer_cdc_cdc_source_valid = basesoc_videoframebuffer_cdc_cdc_asyncfifo_readable;
assign basesoc_videoframebuffer_cdc_cdc_source_first = basesoc_videoframebuffer_cdc_cdc_fifo_out_first;
assign basesoc_videoframebuffer_cdc_cdc_source_last = basesoc_videoframebuffer_cdc_cdc_fifo_out_last;
assign basesoc_videoframebuffer_cdc_cdc_source_payload_data = basesoc_videoframebuffer_cdc_cdc_fifo_out_payload_data;
assign basesoc_videoframebuffer_cdc_cdc_asyncfifo_re = basesoc_videoframebuffer_cdc_cdc_source_ready;
assign basesoc_videoframebuffer_cdc_cdc_graycounter0_ce = (basesoc_videoframebuffer_cdc_cdc_asyncfifo_writable & basesoc_videoframebuffer_cdc_cdc_asyncfifo_we);
assign basesoc_videoframebuffer_cdc_cdc_graycounter1_ce = (basesoc_videoframebuffer_cdc_cdc_asyncfifo_readable & basesoc_videoframebuffer_cdc_cdc_asyncfifo_re);
assign basesoc_videoframebuffer_cdc_cdc_asyncfifo_writable = (((basesoc_videoframebuffer_cdc_cdc_graycounter0_q[2] == basesoc_videoframebuffer_cdc_cdc_consume_wdomain[2]) | (basesoc_videoframebuffer_cdc_cdc_graycounter0_q[1] == basesoc_videoframebuffer_cdc_cdc_consume_wdomain[1])) | (basesoc_videoframebuffer_cdc_cdc_graycounter0_q[0] != basesoc_videoframebuffer_cdc_cdc_consume_wdomain[0]));
assign basesoc_videoframebuffer_cdc_cdc_asyncfifo_readable = (basesoc_videoframebuffer_cdc_cdc_graycounter1_q != basesoc_videoframebuffer_cdc_cdc_produce_rdomain);
assign basesoc_videoframebuffer_cdc_cdc_wrport_adr = basesoc_videoframebuffer_cdc_cdc_graycounter0_q_binary[1:0];
assign basesoc_videoframebuffer_cdc_cdc_wrport_dat_w = basesoc_videoframebuffer_cdc_cdc_asyncfifo_din;
assign basesoc_videoframebuffer_cdc_cdc_wrport_we = basesoc_videoframebuffer_cdc_cdc_graycounter0_ce;
assign basesoc_videoframebuffer_cdc_cdc_rdport_adr = basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary[1:0];
assign basesoc_videoframebuffer_cdc_cdc_asyncfifo_dout = basesoc_videoframebuffer_cdc_cdc_rdport_dat_r;
always @(*) begin
    basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (basesoc_videoframebuffer_cdc_cdc_graycounter0_ce) begin
        basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary <= (basesoc_videoframebuffer_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary <= basesoc_videoframebuffer_cdc_cdc_graycounter0_q_binary;
    end
end
assign basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next = (basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary ^ basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (basesoc_videoframebuffer_cdc_cdc_graycounter1_ce) begin
        basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary <= (basesoc_videoframebuffer_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary <= basesoc_videoframebuffer_cdc_cdc_graycounter1_q_binary;
    end
end
assign basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next = (basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary ^ basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary[2:1]);
always @(*) begin
    basesoc_videoframebuffer_cdc_source_source_ready <= 1'd0;
    basesoc_videoframebuffer_first_resetinserter_next_value <= 1'd0;
    basesoc_videoframebuffer_first_resetinserter_next_value_ce <= 1'd0;
    basesoc_videoframebuffer_source_payload_de <= 1'd0;
    basesoc_videoframebuffer_source_payload_hsync <= 1'd0;
    basesoc_videoframebuffer_source_payload_vsync <= 1'd0;
    basesoc_videoframebuffer_source_valid <= 1'd0;
    basesoc_videoframebuffer_vtg_sink_ready <= 1'd0;
    videoframebuffer_resetinserter_next_state <= 1'd0;
    videoframebuffer_resetinserter_next_state <= videoframebuffer_resetinserter_state;
    case (videoframebuffer_resetinserter_state)
        1'd1: begin
            basesoc_videoframebuffer_vtg_sink_ready <= 1'd1;
            if ((basesoc_videoframebuffer_vtg_sink_valid & basesoc_videoframebuffer_vtg_sink_payload_de)) begin
                basesoc_videoframebuffer_source_valid <= basesoc_videoframebuffer_cdc_source_source_valid;
                basesoc_videoframebuffer_cdc_source_source_ready <= basesoc_videoframebuffer_source_ready;
                if (basesoc_videoframebuffer_first) begin
                    basesoc_videoframebuffer_source_valid <= 1'd0;
                end
                basesoc_videoframebuffer_vtg_sink_ready <= (basesoc_videoframebuffer_source_valid & basesoc_videoframebuffer_source_ready);
                if ((basesoc_videoframebuffer_cdc_source_source_valid & basesoc_videoframebuffer_cdc_source_source_last)) begin
                    basesoc_videoframebuffer_first_resetinserter_next_value <= 1'd0;
                    basesoc_videoframebuffer_first_resetinserter_next_value_ce <= 1'd1;
                    videoframebuffer_resetinserter_next_state <= 1'd0;
                end
            end
            basesoc_videoframebuffer_source_payload_hsync <= basesoc_videoframebuffer_vtg_sink_payload_hsync;
            basesoc_videoframebuffer_source_payload_vsync <= basesoc_videoframebuffer_vtg_sink_payload_vsync;
            basesoc_videoframebuffer_source_payload_de <= basesoc_videoframebuffer_vtg_sink_payload_de;
        end
        default: begin
            basesoc_videoframebuffer_vtg_sink_ready <= 1'd1;
            if (basesoc_videoframebuffer_fsm_reset) begin
                basesoc_videoframebuffer_vtg_sink_ready <= 1'd0;
                basesoc_videoframebuffer_first_resetinserter_next_value <= 1'd1;
                basesoc_videoframebuffer_first_resetinserter_next_value_ce <= 1'd1;
            end
            if ((basesoc_videoframebuffer_vtg_sink_valid & basesoc_videoframebuffer_vtg_sink_last)) begin
                videoframebuffer_resetinserter_next_state <= 1'd1;
            end
            basesoc_videoframebuffer_source_payload_hsync <= basesoc_videoframebuffer_vtg_sink_payload_hsync;
            basesoc_videoframebuffer_source_payload_vsync <= basesoc_videoframebuffer_vtg_sink_payload_vsync;
        end
    endcase
end
assign apf_audio_bus_out = out_r;
assign apf_audio_bus_wr = out_re;
assign apf_audio_playback_en = playback_en_storage;
assign apf_audio_flush = buffer_flush_re;
assign buffer_fill_status = apf_audio_buffer_fill;
assign apf_bridge_request_read = request_read_re;
assign apf_bridge_request_write = request_write_re;
assign apf_bridge_request_getfile = request_getfile_re;
assign apf_bridge_request_openfile = request_openfile_re;
assign apf_bridge_slot_id = slot_id_storage;
assign apf_bridge_data_offset = data_offset_storage;
assign apf_bridge_length = transfer_length_storage;
assign apf_bridge_ram_data_address = ram_data_address_storage;
assign command_result_code_status = apf_bridge_command_result_code;
assign apf_bridge_scaler_slot = scaler_slot_storage;
assign file_size_w = apf_bridge_file_size;
assign apf_bridge_file_size_wr = file_size_re;
assign apf_bridge_new_file_size_data = file_size_r;
assign current_address_status = apf_bridge_current_address;
assign apfid_status = apf_id_chip_id;
assign cont1_key_status = apf_input_cont1_key;
assign cont2_key_status = apf_input_cont2_key;
assign cont3_key_status = apf_input_cont3_key;
assign cont4_key_status = apf_input_cont4_key;
assign cont1_joy_status = apf_input_cont1_joy;
assign cont2_joy_status = apf_input_cont2_joy;
assign cont3_joy_status = apf_input_cont3_joy;
assign cont4_joy_status = apf_input_cont4_joy;
assign cont1_trig_status = apf_input_cont1_trig;
assign cont2_trig_status = apf_input_cont2_trig;
assign cont3_trig_status = apf_input_cont3_trig;
assign cont4_trig_status = apf_input_cont4_trig;
assign csr0_interact_csr_w = interact_storage0;
assign csr1_interact_csr_w = interact_storage1;
assign csr2_interact_csr_w = interact_storage2;
assign csr3_interact_csr_w = interact_storage3;
assign csr4_interact_csr_w = interact_storage4;
assign csr5_interact_csr_w = interact_storage5;
assign csr6_interact_csr_w = interact_storage6;
assign csr7_interact_csr_w = interact_storage7;
assign csr8_interact_csr_w = interact_storage8;
assign csr9_interact_csr_w = interact_storage9;
assign csr10_interact_csr_w = interact_storage10;
assign csr11_interact_csr_w = interact_storage11;
assign csr12_interact_csr_w = interact_storage12;
assign csr13_interact_csr_w = interact_storage13;
assign csr14_interact_csr_w = interact_storage14;
assign csr15_interact_csr_w = interact_storage15;
assign unix_seconds_status = apf_rtc_unix_seconds;
assign date_bcd_status = apf_rtc_date_bcd;
assign time_bcd_status = apf_rtc_time_bcd;
assign jtag_clk = basesoc_jtag_uart_phy_jtag_tck;
assign basesoc_jtag_uart_phy_tx_cdc_sink_sink_valid = basesoc_jtag_uart_phy_sink_valid;
assign basesoc_jtag_uart_phy_tx_cdc_sink_sink_first = basesoc_jtag_uart_phy_sink_first;
assign basesoc_jtag_uart_phy_tx_cdc_sink_sink_last = basesoc_jtag_uart_phy_sink_last;
assign basesoc_jtag_uart_phy_tx_cdc_sink_sink_payload_data = basesoc_jtag_uart_phy_sink_payload_data;
assign basesoc_jtag_uart_phy_source_valid = basesoc_jtag_uart_phy_rx_cdc_source_source_valid;
assign basesoc_jtag_uart_phy_rx_cdc_source_source_ready = basesoc_jtag_uart_phy_source_ready;
assign basesoc_jtag_uart_phy_source_first = basesoc_jtag_uart_phy_rx_cdc_source_source_first;
assign basesoc_jtag_uart_phy_source_last = basesoc_jtag_uart_phy_rx_cdc_source_source_last;
assign basesoc_jtag_uart_phy_source_payload_data = basesoc_jtag_uart_phy_rx_cdc_source_source_payload_data;
assign basesoc_jtag_uart_phy_fsm_reset = (basesoc_jtag_uart_phy_jtag_reset | basesoc_jtag_uart_phy_jtag_capture);
assign jtag_inv_clk = (~jtag_clk);
assign jtag_inv_rst = jtag_rst;
assign basesoc_jtag_uart_phy_jtag_altera_reserved_tms = altera_reserved_tms;
assign basesoc_jtag_uart_phy_jtag_altera_reserved_tck = altera_reserved_tck;
assign basesoc_jtag_uart_phy_jtag_altera_reserved_tdi = altera_reserved_tdi;
assign altera_reserved_tdo = basesoc_jtag_uart_phy_jtag_altera_reserved_tdo;
assign basesoc_jtag_uart_phy_jtag_tck = basesoc_jtag_uart_phy_jtag_tckutap;
assign basesoc_jtag_uart_phy_jtag_tms = basesoc_jtag_uart_phy_jtag_tmsutap;
assign basesoc_jtag_uart_phy_jtag_tdi = basesoc_jtag_uart_phy_jtag_tdiutap;
always @(*) begin
    basesoc_jtag_uart_phy_jtag_ongoing0 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing1 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing10 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing11 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing12 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing13 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing14 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing15 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing2 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing3 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing4 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing5 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing6 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing7 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing8 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_ongoing9 <= 1'd0;
    jtagphy_alterajtag_next_state <= 4'd0;
    jtagphy_alterajtag_next_state <= jtagphy_alterajtag_state;
    case (jtagphy_alterajtag_state)
        1'd1: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 1'd1;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 2'd2;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing1 <= 1'd1;
        end
        2'd2: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 2'd3;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd9;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing2 <= 1'd1;
        end
        2'd3: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 3'd4;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 3'd5;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing3 <= 1'd1;
        end
        3'd4: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 3'd4;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 3'd5;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing4 <= 1'd1;
        end
        3'd5: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 3'd6;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd8;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing5 <= 1'd1;
        end
        3'd6: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 3'd6;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 3'd7;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing6 <= 1'd1;
        end
        3'd7: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 3'd4;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd8;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing7 <= 1'd1;
        end
        4'd8: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 1'd1;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 2'd2;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing8 <= 1'd1;
        end
        4'd9: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 4'd10;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 1'd0;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing9 <= 1'd1;
        end
        4'd10: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 4'd11;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd12;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing10 <= 1'd1;
        end
        4'd11: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 4'd11;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd12;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing11 <= 1'd1;
        end
        4'd12: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 4'd13;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd15;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing12 <= 1'd1;
        end
        4'd13: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 4'd13;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd14;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing13 <= 1'd1;
        end
        4'd14: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 4'd11;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 4'd15;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing14 <= 1'd1;
        end
        4'd15: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 1'd1;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 2'd2;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing15 <= 1'd1;
        end
        default: begin
            case (basesoc_jtag_uart_phy_jtag_tms)
                1'd0: begin
                    jtagphy_alterajtag_next_state <= 1'd1;
                end
                1'd1: begin
                    jtagphy_alterajtag_next_state <= 1'd0;
                end
            endcase
            basesoc_jtag_uart_phy_jtag_ongoing0 <= 1'd1;
        end
    endcase
end
assign from10223_clk = sys_jtag_clk;
assign to10223_clk = jtag_clk;
assign basesoc_jtag_uart_phy_tx_cdc_cd_rst = (sys_jtag_rst | jtag_rst);
assign basesoc_jtag_uart_phy_tx_cdc_cdc_sink_valid = basesoc_jtag_uart_phy_tx_cdc_sink_sink_valid;
assign basesoc_jtag_uart_phy_tx_cdc_sink_sink_ready = basesoc_jtag_uart_phy_tx_cdc_cdc_sink_ready;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_sink_first = basesoc_jtag_uart_phy_tx_cdc_sink_sink_first;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_sink_last = basesoc_jtag_uart_phy_tx_cdc_sink_sink_last;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_sink_payload_data = basesoc_jtag_uart_phy_tx_cdc_sink_sink_payload_data;
assign basesoc_jtag_uart_phy_tx_cdc_source_source_valid = basesoc_jtag_uart_phy_tx_cdc_cdc_source_valid;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_source_ready = basesoc_jtag_uart_phy_tx_cdc_source_source_ready;
assign basesoc_jtag_uart_phy_tx_cdc_source_source_first = basesoc_jtag_uart_phy_tx_cdc_cdc_source_first;
assign basesoc_jtag_uart_phy_tx_cdc_source_source_last = basesoc_jtag_uart_phy_tx_cdc_cdc_source_last;
assign basesoc_jtag_uart_phy_tx_cdc_source_source_payload_data = basesoc_jtag_uart_phy_tx_cdc_cdc_source_payload_data;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_din = {basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_last, basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_first, basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_payload_data};
assign {basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_last, basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_first, basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_payload_data} = basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_dout;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_sink_ready = basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_writable;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_we = basesoc_jtag_uart_phy_tx_cdc_cdc_sink_valid;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_first = basesoc_jtag_uart_phy_tx_cdc_cdc_sink_first;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_last = basesoc_jtag_uart_phy_tx_cdc_cdc_sink_last;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_in_payload_data = basesoc_jtag_uart_phy_tx_cdc_cdc_sink_payload_data;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_source_valid = basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_readable;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_source_first = basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_first;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_source_last = basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_last;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_source_payload_data = basesoc_jtag_uart_phy_tx_cdc_cdc_fifo_out_payload_data;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_re = basesoc_jtag_uart_phy_tx_cdc_cdc_source_ready;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_ce = (basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_writable & basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_we);
assign basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_ce = (basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_readable & basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_re);
assign basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_writable = (((basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q[2] == basesoc_jtag_uart_phy_tx_cdc_cdc_consume_wdomain[2]) | (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q[1] == basesoc_jtag_uart_phy_tx_cdc_cdc_consume_wdomain[1])) | (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q[0] != basesoc_jtag_uart_phy_tx_cdc_cdc_consume_wdomain[0]));
assign basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_readable = (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q != basesoc_jtag_uart_phy_tx_cdc_cdc_produce_rdomain);
assign basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_adr = basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_binary[1:0];
assign basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_dat_w = basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_din;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_we = basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_ce;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_rdport_adr = basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary[1:0];
assign basesoc_jtag_uart_phy_tx_cdc_cdc_asyncfifo_dout = basesoc_jtag_uart_phy_tx_cdc_cdc_rdport_dat_r;
always @(*) begin
    basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_ce) begin
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary <= (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_binary;
    end
end
assign basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next = (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary ^ basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_ce) begin
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary <= (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_binary;
    end
end
assign basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next = (basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary ^ basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary[2:1]);
assign from10374_clk = jtag_clk;
assign to10374_clk = sys_jtag_clk;
assign basesoc_jtag_uart_phy_rx_cdc_cd_rst = (jtag_rst | sys_jtag_rst);
assign basesoc_jtag_uart_phy_rx_cdc_cdc_sink_valid = basesoc_jtag_uart_phy_rx_cdc_sink_sink_valid;
assign basesoc_jtag_uart_phy_rx_cdc_sink_sink_ready = basesoc_jtag_uart_phy_rx_cdc_cdc_sink_ready;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_sink_first = basesoc_jtag_uart_phy_rx_cdc_sink_sink_first;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_sink_last = basesoc_jtag_uart_phy_rx_cdc_sink_sink_last;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_sink_payload_data = basesoc_jtag_uart_phy_rx_cdc_sink_sink_payload_data;
assign basesoc_jtag_uart_phy_rx_cdc_source_source_valid = basesoc_jtag_uart_phy_rx_cdc_cdc_source_valid;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_source_ready = basesoc_jtag_uart_phy_rx_cdc_source_source_ready;
assign basesoc_jtag_uart_phy_rx_cdc_source_source_first = basesoc_jtag_uart_phy_rx_cdc_cdc_source_first;
assign basesoc_jtag_uart_phy_rx_cdc_source_source_last = basesoc_jtag_uart_phy_rx_cdc_cdc_source_last;
assign basesoc_jtag_uart_phy_rx_cdc_source_source_payload_data = basesoc_jtag_uart_phy_rx_cdc_cdc_source_payload_data;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_din = {basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_last, basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_first, basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_payload_data};
assign {basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_last, basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_first, basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_payload_data} = basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_dout;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_sink_ready = basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_writable;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_we = basesoc_jtag_uart_phy_rx_cdc_cdc_sink_valid;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_first = basesoc_jtag_uart_phy_rx_cdc_cdc_sink_first;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_last = basesoc_jtag_uart_phy_rx_cdc_cdc_sink_last;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_in_payload_data = basesoc_jtag_uart_phy_rx_cdc_cdc_sink_payload_data;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_source_valid = basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_readable;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_source_first = basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_first;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_source_last = basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_last;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_source_payload_data = basesoc_jtag_uart_phy_rx_cdc_cdc_fifo_out_payload_data;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_re = basesoc_jtag_uart_phy_rx_cdc_cdc_source_ready;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_ce = (basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_writable & basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_we);
assign basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_ce = (basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_readable & basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_re);
assign basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_writable = (((basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q[2] == basesoc_jtag_uart_phy_rx_cdc_cdc_consume_wdomain[2]) | (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q[1] == basesoc_jtag_uart_phy_rx_cdc_cdc_consume_wdomain[1])) | (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q[0] != basesoc_jtag_uart_phy_rx_cdc_cdc_consume_wdomain[0]));
assign basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_readable = (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q != basesoc_jtag_uart_phy_rx_cdc_cdc_produce_rdomain);
assign basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_adr = basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_binary[1:0];
assign basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_dat_w = basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_din;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_we = basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_ce;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_rdport_adr = basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary[1:0];
assign basesoc_jtag_uart_phy_rx_cdc_cdc_asyncfifo_dout = basesoc_jtag_uart_phy_rx_cdc_cdc_rdport_dat_r;
always @(*) begin
    basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary <= 3'd0;
    if (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_ce) begin
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary <= (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_binary + 1'd1);
    end else begin
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_binary;
    end
end
assign basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next = (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary ^ basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary[2:1]);
always @(*) begin
    basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary <= 3'd0;
    if (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_ce) begin
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary <= (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_binary + 1'd1);
    end else begin
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_binary;
    end
end
assign basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next = (basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary ^ basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary[2:1]);
always @(*) begin
    basesoc_jtag_uart_phy_count_jtagphy_next_value2 <= 3'd0;
    basesoc_jtag_uart_phy_count_jtagphy_next_value_ce2 <= 1'd0;
    basesoc_jtag_uart_phy_data_jtagphy_next_value1 <= 8'd0;
    basesoc_jtag_uart_phy_data_jtagphy_next_value_ce1 <= 1'd0;
    basesoc_jtag_uart_phy_jtag_tdo <= 1'd0;
    basesoc_jtag_uart_phy_ready_jtagphy_next_value3 <= 1'd0;
    basesoc_jtag_uart_phy_ready_jtagphy_next_value_ce3 <= 1'd0;
    basesoc_jtag_uart_phy_rx_cdc_sink_sink_payload_data <= 8'd0;
    basesoc_jtag_uart_phy_rx_cdc_sink_sink_valid <= 1'd0;
    basesoc_jtag_uart_phy_tx_cdc_source_source_ready <= 1'd0;
    basesoc_jtag_uart_phy_valid_jtagphy_next_value0 <= 1'd0;
    basesoc_jtag_uart_phy_valid_jtagphy_next_value_ce0 <= 1'd0;
    jtagphy_resetinserter_next_state <= 2'd0;
    jtagphy_resetinserter_next_state <= jtagphy_resetinserter_state;
    case (jtagphy_resetinserter_state)
        1'd1: begin
            basesoc_jtag_uart_phy_jtag_tdo <= basesoc_jtag_uart_phy_data;
            if (basesoc_jtag_uart_phy_jtag_shift) begin
                basesoc_jtag_uart_phy_count_jtagphy_next_value2 <= (basesoc_jtag_uart_phy_count + 1'd1);
                basesoc_jtag_uart_phy_count_jtagphy_next_value_ce2 <= 1'd1;
                basesoc_jtag_uart_phy_data_jtagphy_next_value1 <= {basesoc_jtag_uart_phy_jtag_tdi, basesoc_jtag_uart_phy_data[7:1]};
                basesoc_jtag_uart_phy_data_jtagphy_next_value_ce1 <= 1'd1;
                if ((basesoc_jtag_uart_phy_count == 3'd7)) begin
                    jtagphy_resetinserter_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            basesoc_jtag_uart_phy_jtag_tdo <= basesoc_jtag_uart_phy_valid;
            if (basesoc_jtag_uart_phy_jtag_shift) begin
                basesoc_jtag_uart_phy_rx_cdc_sink_sink_valid <= basesoc_jtag_uart_phy_jtag_tdi;
                basesoc_jtag_uart_phy_rx_cdc_sink_sink_payload_data <= basesoc_jtag_uart_phy_data;
                basesoc_jtag_uart_phy_ready_jtagphy_next_value3 <= basesoc_jtag_uart_phy_rx_cdc_sink_sink_ready;
                basesoc_jtag_uart_phy_ready_jtagphy_next_value_ce3 <= 1'd1;
                jtagphy_resetinserter_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_jtag_uart_phy_jtag_tdo <= basesoc_jtag_uart_phy_ready;
            if (basesoc_jtag_uart_phy_jtag_shift) begin
                basesoc_jtag_uart_phy_tx_cdc_source_source_ready <= basesoc_jtag_uart_phy_jtag_tdi;
                basesoc_jtag_uart_phy_valid_jtagphy_next_value0 <= basesoc_jtag_uart_phy_tx_cdc_source_source_valid;
                basesoc_jtag_uart_phy_valid_jtagphy_next_value_ce0 <= 1'd1;
                basesoc_jtag_uart_phy_data_jtagphy_next_value1 <= basesoc_jtag_uart_phy_tx_cdc_source_source_payload_data;
                basesoc_jtag_uart_phy_data_jtagphy_next_value_ce1 <= 1'd1;
                basesoc_jtag_uart_phy_count_jtagphy_next_value2 <= 1'd0;
                basesoc_jtag_uart_phy_count_jtagphy_next_value_ce2 <= 1'd1;
                jtagphy_resetinserter_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    basesoc_rx_enable <= 1'd0;
    basesoc_rx_source_payload_data <= 8'd0;
    basesoc_rx_source_valid <= 1'd0;
    rs232phyrx_next_state <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            basesoc_rx_enable <= 1'd1;
            if (basesoc_rx_tick) begin
                basesoc_rx_count_rs232phyrx_next_value0 <= (basesoc_rx_count + 1'd1);
                basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                basesoc_rx_data_rs232phyrx_next_value1 <= {basesoc_rx_rx, basesoc_rx_data[7:1]};
                basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((basesoc_rx_count == 4'd9)) begin
                    basesoc_rx_source_valid <= (basesoc_rx_rx == 1'd1);
                    basesoc_rx_source_payload_data <= basesoc_rx_data;
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((basesoc_rx_rx == 1'd0) & (basesoc_rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_jtag_uart_phy_sink_first <= 1'd0;
    basesoc_jtag_uart_phy_sink_last <= 1'd0;
    basesoc_jtag_uart_phy_sink_payload_data <= 8'd0;
    basesoc_jtag_uart_phy_sink_ready <= 1'd0;
    basesoc_jtag_uart_phy_sink_valid <= 1'd0;
    basesoc_jtag_uart_phy_source_ready <= 1'd0;
    basesoc_rx_source_ready <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    basesoc_tx_enable <= 1'd0;
    basesoc_tx_sink_first <= 1'd0;
    basesoc_tx_sink_last <= 1'd0;
    basesoc_tx_sink_payload_data <= 8'd0;
    basesoc_tx_sink_ready <= 1'd0;
    basesoc_tx_sink_valid <= 1'd0;
    basesoc_uart_phy_sink_ready <= 1'd0;
    basesoc_uart_phy_source_first <= 1'd0;
    basesoc_uart_phy_source_last <= 1'd0;
    basesoc_uart_phy_source_payload_data <= 8'd0;
    basesoc_uart_phy_source_valid <= 1'd0;
    rs232phytx_next_state <= 1'd0;
    basesoc_jtag_uart_phy_sink_ready <= basesoc_jtag_uart_phy_tx_cdc_sink_sink_ready;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            basesoc_tx_enable <= 1'd1;
            if (basesoc_tx_tick) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= basesoc_tx_data;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_count_rs232phytx_next_value0 <= (basesoc_tx_count + 1'd1);
                basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, basesoc_tx_data[7:1]};
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((basesoc_tx_count == 4'd9)) begin
                    basesoc_tx_sink_ready <= 1'd1;
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (basesoc_tx_sink_valid) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= basesoc_tx_sink_payload_data;
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
    case (basesoc_uart_phy_sel)
        1'd0: begin
            basesoc_jtag_uart_phy_sink_valid <= basesoc_uart_phy_sink_valid;
            basesoc_uart_phy_sink_ready <= basesoc_jtag_uart_phy_sink_ready;
            basesoc_jtag_uart_phy_sink_first <= basesoc_uart_phy_sink_first;
            basesoc_jtag_uart_phy_sink_last <= basesoc_uart_phy_sink_last;
            basesoc_jtag_uart_phy_sink_payload_data <= basesoc_uart_phy_sink_payload_data;
            basesoc_uart_phy_source_valid <= basesoc_jtag_uart_phy_source_valid;
            basesoc_jtag_uart_phy_source_ready <= basesoc_uart_phy_source_ready;
            basesoc_uart_phy_source_first <= basesoc_jtag_uart_phy_source_first;
            basesoc_uart_phy_source_last <= basesoc_jtag_uart_phy_source_last;
            basesoc_uart_phy_source_payload_data <= basesoc_jtag_uart_phy_source_payload_data;
            basesoc_tx_sink_ready <= 1'd1;
        end
        1'd1: begin
            basesoc_tx_sink_valid <= basesoc_uart_phy_sink_valid;
            basesoc_uart_phy_sink_ready <= basesoc_tx_sink_ready;
            basesoc_tx_sink_first <= basesoc_uart_phy_sink_first;
            basesoc_tx_sink_last <= basesoc_uart_phy_sink_last;
            basesoc_tx_sink_payload_data <= basesoc_uart_phy_sink_payload_data;
            basesoc_uart_phy_source_valid <= basesoc_rx_source_valid;
            basesoc_rx_source_ready <= basesoc_uart_phy_source_ready;
            basesoc_uart_phy_source_first <= basesoc_rx_source_first;
            basesoc_uart_phy_source_last <= basesoc_rx_source_last;
            basesoc_uart_phy_source_payload_data <= basesoc_rx_source_payload_data;
            basesoc_jtag_uart_phy_sink_ready <= 1'd1;
        end
    endcase
end
assign basesoc_uart_uart_sink_valid = basesoc_uart_phy_source_valid;
assign basesoc_uart_phy_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_uart_phy_source_first;
assign basesoc_uart_uart_sink_last = basesoc_uart_phy_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_uart_phy_source_payload_data;
assign basesoc_uart_phy_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_uart_phy_sink_ready;
assign basesoc_uart_phy_sink_first = basesoc_uart_uart_source_first;
assign basesoc_uart_phy_sink_last = basesoc_uart_uart_source_last;
assign basesoc_uart_phy_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_txempty_status = (~basesoc_uart_tx_fifo_source_valid);
assign basesoc_uart_tx_trigger = basesoc_uart_tx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = (basesoc_uart_rx_clear | (1'd0 & basesoc_uart_rxtx_we));
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxfull_status = (~basesoc_uart_rx_fifo_sink_ready);
assign basesoc_uart_rx_trigger = basesoc_uart_rx_fifo_source_valid;
assign basesoc_uart_tx0 = basesoc_uart_tx_status;
assign basesoc_uart_tx1 = basesoc_uart_tx_pending;
always @(*) begin
    basesoc_uart_tx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[0])) begin
        basesoc_uart_tx_clear <= 1'd1;
    end
end
assign basesoc_uart_rx0 = basesoc_uart_rx_status;
assign basesoc_uart_rx1 = basesoc_uart_rx_pending;
always @(*) begin
    basesoc_uart_rx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[1])) begin
        basesoc_uart_rx_clear <= 1'd1;
    end
end
assign basesoc_uart_irq = ((basesoc_uart_pending_status[0] & basesoc_uart_enable_storage[0]) | (basesoc_uart_pending_status[1] & basesoc_uart_enable_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
    basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_tx_fifo_replace) begin
        basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
    end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
    basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_rx_fifo_replace) begin
        basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
    end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
always @(*) begin
    interface0_ack <= 1'd0;
    interface0_dat_r <= 32'd0;
    interface1_adr_wishbone2csr_next_value1 <= 14'd0;
    interface1_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    interface1_dat_w_wishbone2csr_next_value0 <= 32'd0;
    interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    interface1_we_wishbone2csr_next_value2 <= 1'd0;
    interface1_we_wishbone2csr_next_value_ce2 <= 1'd0;
    wishbone2csr_next_state <= 2'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            interface1_adr_wishbone2csr_next_value1 <= 1'd0;
            interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            interface1_we_wishbone2csr_next_value2 <= 1'd0;
            interface1_we_wishbone2csr_next_value_ce2 <= 1'd1;
            wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            interface0_ack <= 1'd1;
            interface0_dat_r <= interface1_dat_r;
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w_wishbone2csr_next_value0 <= interface0_dat_w;
            interface1_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr_wishbone2csr_next_value1 <= interface0_adr[29:0];
                interface1_adr_wishbone2csr_next_value_ce1 <= 1'd1;
                interface1_we_wishbone2csr_next_value2 <= (interface0_we & (interface0_sel != 1'd0));
                interface1_we_wishbone2csr_next_value_ce2 <= 1'd1;
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign out_r = csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
    out_re <= 1'd0;
    out_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        out_re <= csr_bankarray_interface0_bank_bus_we;
        out_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_playback_en0_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank0_playback_en0_re <= 1'd0;
    csr_bankarray_csrbank0_playback_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_playback_en0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_playback_en0_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign buffer_flush_r = csr_bankarray_interface0_bank_bus_dat_w[0];
always @(*) begin
    buffer_flush_re <= 1'd0;
    buffer_flush_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        buffer_flush_re <= csr_bankarray_interface0_bank_bus_we;
        buffer_flush_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_buffer_fill_r = csr_bankarray_interface0_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank0_buffer_fill_re <= 1'd0;
    csr_bankarray_csrbank0_buffer_fill_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank0_buffer_fill_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_buffer_fill_we <= (~csr_bankarray_interface0_bank_bus_we);
    end
end
assign csr_bankarray_csrbank0_playback_en0_w = playback_en_storage;
assign csr_bankarray_csrbank0_buffer_fill_w = buffer_fill_status[11:0];
assign buffer_fill_we = csr_bankarray_csrbank0_buffer_fill_we;
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign request_read_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    request_read_re <= 1'd0;
    request_read_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        request_read_re <= csr_bankarray_interface1_bank_bus_we;
        request_read_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign request_write_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    request_write_re <= 1'd0;
    request_write_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        request_write_re <= csr_bankarray_interface1_bank_bus_we;
        request_write_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign request_getfile_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    request_getfile_re <= 1'd0;
    request_getfile_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        request_getfile_re <= csr_bankarray_interface1_bank_bus_we;
        request_getfile_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign request_openfile_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    request_openfile_re <= 1'd0;
    request_openfile_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        request_openfile_re <= csr_bankarray_interface1_bank_bus_we;
        request_openfile_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_slot_id0_r = csr_bankarray_interface1_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank1_slot_id0_re <= 1'd0;
    csr_bankarray_csrbank1_slot_id0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_slot_id0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_slot_id0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_data_offset0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_data_offset0_re <= 1'd0;
    csr_bankarray_csrbank1_data_offset0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank1_data_offset0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_data_offset0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_transfer_length0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_transfer_length0_re <= 1'd0;
    csr_bankarray_csrbank1_transfer_length0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank1_transfer_length0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_transfer_length0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_ram_data_address0_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_ram_data_address0_re <= 1'd0;
    csr_bankarray_csrbank1_ram_data_address0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank1_ram_data_address0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ram_data_address0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign file_size_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    file_size_re <= 1'd0;
    file_size_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd8))) begin
        file_size_re <= csr_bankarray_interface1_bank_bus_we;
        file_size_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_status_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_status_re <= 1'd0;
    csr_bankarray_csrbank1_status_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd9))) begin
        csr_bankarray_csrbank1_status_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_status_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_current_address_r = csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank1_current_address_re <= 1'd0;
    csr_bankarray_csrbank1_current_address_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd10))) begin
        csr_bankarray_csrbank1_current_address_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_current_address_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_command_result_code_r = csr_bankarray_interface1_bank_bus_dat_w[2:0];
always @(*) begin
    csr_bankarray_csrbank1_command_result_code_re <= 1'd0;
    csr_bankarray_csrbank1_command_result_code_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd11))) begin
        csr_bankarray_csrbank1_command_result_code_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_command_result_code_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_scaler_slot0_r = csr_bankarray_interface1_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank1_scaler_slot0_re <= 1'd0;
    csr_bankarray_csrbank1_scaler_slot0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 4'd12))) begin
        csr_bankarray_csrbank1_scaler_slot0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_scaler_slot0_we <= (~csr_bankarray_interface1_bank_bus_we);
    end
end
assign csr_bankarray_csrbank1_slot_id0_w = slot_id_storage[15:0];
assign csr_bankarray_csrbank1_data_offset0_w = data_offset_storage[31:0];
assign csr_bankarray_csrbank1_transfer_length0_w = transfer_length_storage[31:0];
assign csr_bankarray_csrbank1_ram_data_address0_w = ram_data_address_storage[31:0];
assign csr_bankarray_csrbank1_status_w = status_status;
assign status_we = csr_bankarray_csrbank1_status_we;
assign csr_bankarray_csrbank1_current_address_w = current_address_status[31:0];
assign current_address_we = csr_bankarray_csrbank1_current_address_we;
assign csr_bankarray_csrbank1_command_result_code_w = command_result_code_status[2:0];
assign command_result_code_we = csr_bankarray_csrbank1_command_result_code_we;
assign csr_bankarray_csrbank1_scaler_slot0_w = scaler_slot_storage[3:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank2_id1_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_id1_re <= 1'd0;
    csr_bankarray_csrbank2_id1_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_id1_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_id1_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_id0_r = csr_bankarray_interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank2_id0_re <= 1'd0;
    csr_bankarray_csrbank2_id0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_id0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_id0_we <= (~csr_bankarray_interface2_bank_bus_we);
    end
end
assign csr_bankarray_csrbank2_id1_w = apfid_status[63:32];
assign csr_bankarray_csrbank2_id0_w = apfid_status[31:0];
assign apfid_we = csr_bankarray_csrbank2_id0_we;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank3_cont1_key_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont1_key_re <= 1'd0;
    csr_bankarray_csrbank3_cont1_key_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_cont1_key_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont1_key_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont2_key_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont2_key_re <= 1'd0;
    csr_bankarray_csrbank3_cont2_key_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_cont2_key_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont2_key_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont3_key_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont3_key_re <= 1'd0;
    csr_bankarray_csrbank3_cont3_key_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank3_cont3_key_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont3_key_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont4_key_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont4_key_re <= 1'd0;
    csr_bankarray_csrbank3_cont4_key_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_cont4_key_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont4_key_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont1_joy_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont1_joy_re <= 1'd0;
    csr_bankarray_csrbank3_cont1_joy_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_cont1_joy_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont1_joy_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont2_joy_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont2_joy_re <= 1'd0;
    csr_bankarray_csrbank3_cont2_joy_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_cont2_joy_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont2_joy_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont3_joy_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont3_joy_re <= 1'd0;
    csr_bankarray_csrbank3_cont3_joy_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_cont3_joy_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont3_joy_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont4_joy_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont4_joy_re <= 1'd0;
    csr_bankarray_csrbank3_cont4_joy_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank3_cont4_joy_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont4_joy_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont1_trig_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont1_trig_re <= 1'd0;
    csr_bankarray_csrbank3_cont1_trig_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd8))) begin
        csr_bankarray_csrbank3_cont1_trig_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont1_trig_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont2_trig_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont2_trig_re <= 1'd0;
    csr_bankarray_csrbank3_cont2_trig_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd9))) begin
        csr_bankarray_csrbank3_cont2_trig_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont2_trig_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont3_trig_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont3_trig_re <= 1'd0;
    csr_bankarray_csrbank3_cont3_trig_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd10))) begin
        csr_bankarray_csrbank3_cont3_trig_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont3_trig_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont4_trig_r = csr_bankarray_interface3_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank3_cont4_trig_re <= 1'd0;
    csr_bankarray_csrbank3_cont4_trig_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 4'd11))) begin
        csr_bankarray_csrbank3_cont4_trig_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_cont4_trig_we <= (~csr_bankarray_interface3_bank_bus_we);
    end
end
assign csr_bankarray_csrbank3_cont1_key_w = cont1_key_status[31:0];
assign cont1_key_we = csr_bankarray_csrbank3_cont1_key_we;
assign csr_bankarray_csrbank3_cont2_key_w = cont2_key_status[31:0];
assign cont2_key_we = csr_bankarray_csrbank3_cont2_key_we;
assign csr_bankarray_csrbank3_cont3_key_w = cont3_key_status[31:0];
assign cont3_key_we = csr_bankarray_csrbank3_cont3_key_we;
assign csr_bankarray_csrbank3_cont4_key_w = cont4_key_status[31:0];
assign cont4_key_we = csr_bankarray_csrbank3_cont4_key_we;
assign csr_bankarray_csrbank3_cont1_joy_w = cont1_joy_status[31:0];
assign cont1_joy_we = csr_bankarray_csrbank3_cont1_joy_we;
assign csr_bankarray_csrbank3_cont2_joy_w = cont2_joy_status[31:0];
assign cont2_joy_we = csr_bankarray_csrbank3_cont2_joy_we;
assign csr_bankarray_csrbank3_cont3_joy_w = cont3_joy_status[31:0];
assign cont3_joy_we = csr_bankarray_csrbank3_cont3_joy_we;
assign csr_bankarray_csrbank3_cont4_joy_w = cont4_joy_status[31:0];
assign cont4_joy_we = csr_bankarray_csrbank3_cont4_joy_we;
assign csr_bankarray_csrbank3_cont1_trig_w = cont1_trig_status[31:0];
assign cont1_trig_we = csr_bankarray_csrbank3_cont1_trig_we;
assign csr_bankarray_csrbank3_cont2_trig_w = cont2_trig_status[31:0];
assign cont2_trig_we = csr_bankarray_csrbank3_cont2_trig_we;
assign csr_bankarray_csrbank3_cont3_trig_w = cont3_trig_status[31:0];
assign cont3_trig_we = csr_bankarray_csrbank3_cont3_trig_we;
assign csr_bankarray_csrbank3_cont4_trig_w = cont4_trig_status[31:0];
assign cont4_trig_we = csr_bankarray_csrbank3_cont4_trig_we;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd4);
assign csr0_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr0_interact_csr_re <= 1'd0;
    csr0_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr0_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr0_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed0_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_interact_changed0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed0_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr1_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr1_interact_csr_re <= 1'd0;
    csr1_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr1_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr1_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed1_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed1_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed1_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_interact_changed1_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed1_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr2_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr2_interact_csr_re <= 1'd0;
    csr2_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr2_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr2_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed2_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed2_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed2_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_interact_changed2_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed2_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr3_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr3_interact_csr_re <= 1'd0;
    csr3_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr3_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr3_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed3_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed3_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed3_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_interact_changed3_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed3_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr4_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr4_interact_csr_re <= 1'd0;
    csr4_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd8))) begin
        csr4_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr4_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed4_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed4_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed4_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd9))) begin
        csr_bankarray_csrbank4_interact_changed4_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed4_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr5_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr5_interact_csr_re <= 1'd0;
    csr5_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd10))) begin
        csr5_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr5_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed5_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed5_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed5_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd11))) begin
        csr_bankarray_csrbank4_interact_changed5_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed5_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr6_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr6_interact_csr_re <= 1'd0;
    csr6_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd12))) begin
        csr6_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr6_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed6_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed6_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed6_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd13))) begin
        csr_bankarray_csrbank4_interact_changed6_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed6_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr7_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr7_interact_csr_re <= 1'd0;
    csr7_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd14))) begin
        csr7_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr7_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed7_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed7_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed7_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 4'd15))) begin
        csr_bankarray_csrbank4_interact_changed7_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed7_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr8_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr8_interact_csr_re <= 1'd0;
    csr8_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd16))) begin
        csr8_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr8_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed8_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed8_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed8_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd17))) begin
        csr_bankarray_csrbank4_interact_changed8_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed8_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr9_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr9_interact_csr_re <= 1'd0;
    csr9_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd18))) begin
        csr9_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr9_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed9_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed9_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed9_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd19))) begin
        csr_bankarray_csrbank4_interact_changed9_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed9_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr10_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr10_interact_csr_re <= 1'd0;
    csr10_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd20))) begin
        csr10_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr10_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed10_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed10_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed10_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd21))) begin
        csr_bankarray_csrbank4_interact_changed10_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed10_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr11_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr11_interact_csr_re <= 1'd0;
    csr11_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd22))) begin
        csr11_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr11_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed11_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed11_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed11_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd23))) begin
        csr_bankarray_csrbank4_interact_changed11_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed11_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr12_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr12_interact_csr_re <= 1'd0;
    csr12_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd24))) begin
        csr12_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr12_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed12_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed12_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed12_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd25))) begin
        csr_bankarray_csrbank4_interact_changed12_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed12_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr13_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr13_interact_csr_re <= 1'd0;
    csr13_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd26))) begin
        csr13_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr13_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed13_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed13_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed13_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd27))) begin
        csr_bankarray_csrbank4_interact_changed13_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed13_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr14_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr14_interact_csr_re <= 1'd0;
    csr14_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd28))) begin
        csr14_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr14_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed14_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed14_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed14_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd29))) begin
        csr_bankarray_csrbank4_interact_changed14_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed14_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr15_interact_csr_r = csr_bankarray_interface4_bank_bus_dat_w[31:0];
always @(*) begin
    csr15_interact_csr_re <= 1'd0;
    csr15_interact_csr_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd30))) begin
        csr15_interact_csr_re <= csr_bankarray_interface4_bank_bus_we;
        csr15_interact_csr_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed15_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_interact_changed15_re <= 1'd0;
    csr_bankarray_csrbank4_interact_changed15_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 5'd31))) begin
        csr_bankarray_csrbank4_interact_changed15_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_interact_changed15_we <= (~csr_bankarray_interface4_bank_bus_we);
    end
end
assign csr_bankarray_csrbank4_interact_changed0_w = csrstatus0_status;
assign csrstatus0_we = csr_bankarray_csrbank4_interact_changed0_we;
assign csr_bankarray_csrbank4_interact_changed1_w = csrstatus1_status;
assign csrstatus1_we = csr_bankarray_csrbank4_interact_changed1_we;
assign csr_bankarray_csrbank4_interact_changed2_w = csrstatus2_status;
assign csrstatus2_we = csr_bankarray_csrbank4_interact_changed2_we;
assign csr_bankarray_csrbank4_interact_changed3_w = csrstatus3_status;
assign csrstatus3_we = csr_bankarray_csrbank4_interact_changed3_we;
assign csr_bankarray_csrbank4_interact_changed4_w = csrstatus4_status;
assign csrstatus4_we = csr_bankarray_csrbank4_interact_changed4_we;
assign csr_bankarray_csrbank4_interact_changed5_w = csrstatus5_status;
assign csrstatus5_we = csr_bankarray_csrbank4_interact_changed5_we;
assign csr_bankarray_csrbank4_interact_changed6_w = csrstatus6_status;
assign csrstatus6_we = csr_bankarray_csrbank4_interact_changed6_we;
assign csr_bankarray_csrbank4_interact_changed7_w = csrstatus7_status;
assign csrstatus7_we = csr_bankarray_csrbank4_interact_changed7_we;
assign csr_bankarray_csrbank4_interact_changed8_w = csrstatus8_status;
assign csrstatus8_we = csr_bankarray_csrbank4_interact_changed8_we;
assign csr_bankarray_csrbank4_interact_changed9_w = csrstatus9_status;
assign csrstatus9_we = csr_bankarray_csrbank4_interact_changed9_we;
assign csr_bankarray_csrbank4_interact_changed10_w = csrstatus10_status;
assign csrstatus10_we = csr_bankarray_csrbank4_interact_changed10_we;
assign csr_bankarray_csrbank4_interact_changed11_w = csrstatus11_status;
assign csrstatus11_we = csr_bankarray_csrbank4_interact_changed11_we;
assign csr_bankarray_csrbank4_interact_changed12_w = csrstatus12_status;
assign csrstatus12_we = csr_bankarray_csrbank4_interact_changed12_we;
assign csr_bankarray_csrbank4_interact_changed13_w = csrstatus13_status;
assign csrstatus13_we = csr_bankarray_csrbank4_interact_changed13_we;
assign csr_bankarray_csrbank4_interact_changed14_w = csrstatus14_status;
assign csrstatus14_we = csr_bankarray_csrbank4_interact_changed14_we;
assign csr_bankarray_csrbank4_interact_changed15_w = csrstatus15_status;
assign csrstatus15_we = csr_bankarray_csrbank4_interact_changed15_we;
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank5_unix_seconds_r = csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank5_unix_seconds_re <= 1'd0;
    csr_bankarray_csrbank5_unix_seconds_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank5_unix_seconds_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_unix_seconds_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_date_bcd_r = csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank5_date_bcd_re <= 1'd0;
    csr_bankarray_csrbank5_date_bcd_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank5_date_bcd_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_date_bcd_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_time_bcd_r = csr_bankarray_interface5_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank5_time_bcd_re <= 1'd0;
    csr_bankarray_csrbank5_time_bcd_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank5_time_bcd_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_time_bcd_we <= (~csr_bankarray_interface5_bank_bus_we);
    end
end
assign csr_bankarray_csrbank5_unix_seconds_w = unix_seconds_status[31:0];
assign unix_seconds_we = csr_bankarray_csrbank5_unix_seconds_we;
assign csr_bankarray_csrbank5_date_bcd_w = date_bcd_status[31:0];
assign date_bcd_we = csr_bankarray_csrbank5_date_bcd_we;
assign csr_bankarray_csrbank5_time_bcd_w = time_bcd_status[31:0];
assign time_bcd_we = csr_bankarray_csrbank5_time_bcd_we;
assign csr_bankarray_csrbank6_sel = (csr_bankarray_interface6_bank_bus_adr[13:9] == 3'd6);
assign csr_bankarray_csrbank6_video_r = csr_bankarray_interface6_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank6_video_re <= 1'd0;
    csr_bankarray_csrbank6_video_we <= 1'd0;
    if ((csr_bankarray_csrbank6_sel & (csr_bankarray_interface6_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank6_video_re <= csr_bankarray_interface6_bank_bus_we;
        csr_bankarray_csrbank6_video_we <= (~csr_bankarray_interface6_bank_bus_we);
    end
end
always @(*) begin
    apfvideo_status <= 32'd0;
    apfvideo_status[0] <= apfvideo_vblank_status;
    apfvideo_status[1] <= apfvideo_vblank_triggered;
    apfvideo_status[31:2] <= apfvideo_frame_counter;
end
assign csr_bankarray_csrbank6_video_w = apfvideo_status[31:0];
assign apfvideo_we = csr_bankarray_csrbank6_video_we;
assign csr_bankarray_csrbank7_sel = (csr_bankarray_interface7_bank_bus_adr[13:9] == 3'd7);
assign csr_bankarray_csrbank7_reset0_r = csr_bankarray_interface7_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank7_reset0_re <= 1'd0;
    csr_bankarray_csrbank7_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank7_reset0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_reset0_we <= (~csr_bankarray_interface7_bank_bus_we);
    end
end
assign csr_bankarray_csrbank7_scratch0_r = csr_bankarray_interface7_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank7_scratch0_re <= 1'd0;
    csr_bankarray_csrbank7_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank7_scratch0_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_scratch0_we <= (~csr_bankarray_interface7_bank_bus_we);
    end
end
assign csr_bankarray_csrbank7_bus_errors_r = csr_bankarray_interface7_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank7_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank7_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank7_sel & (csr_bankarray_interface7_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank7_bus_errors_re <= csr_bankarray_interface7_bank_bus_we;
        csr_bankarray_csrbank7_bus_errors_we <= (~csr_bankarray_interface7_bank_bus_we);
    end
end
always @(*) begin
    basesoc_basesoc_soc_rst <= 1'd0;
    if (basesoc_basesoc_reset_re) begin
        basesoc_basesoc_soc_rst <= basesoc_basesoc_reset_storage[0];
    end
end
assign basesoc_basesoc_cpu_rst = basesoc_basesoc_reset_storage[1];
assign csr_bankarray_csrbank7_reset0_w = basesoc_basesoc_reset_storage[1:0];
assign csr_bankarray_csrbank7_scratch0_w = basesoc_basesoc_scratch_storage[31:0];
assign csr_bankarray_csrbank7_bus_errors_w = basesoc_basesoc_bus_errors_status[31:0];
assign basesoc_basesoc_bus_errors_we = csr_bankarray_csrbank7_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 4'd8);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank8_sel = (csr_bankarray_interface8_bank_bus_adr[13:9] == 4'd9);
assign csr_bankarray_csrbank8_dfii_control0_r = csr_bankarray_interface8_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_control0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_control0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank8_dfii_control0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_control0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi0_command0_r = csr_bankarray_interface8_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi0_command0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi0_command0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank8_dfii_pi0_command0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi0_command0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign basesoc_sdram_phaseinjector0_command_issue_r = csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    basesoc_sdram_phaseinjector0_command_issue_re <= 1'd0;
    basesoc_sdram_phaseinjector0_command_issue_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd2))) begin
        basesoc_sdram_phaseinjector0_command_issue_re <= csr_bankarray_interface8_bank_bus_we;
        basesoc_sdram_phaseinjector0_command_issue_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi0_address0_r = csr_bankarray_interface8_bank_bus_dat_w[12:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi0_address0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi0_address0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank8_dfii_pi0_address0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi0_address0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi0_baddress0_r = csr_bankarray_interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi0_baddress0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi0_baddress0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank8_dfii_pi0_baddress0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi0_baddress0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi0_wrdata0_r = csr_bankarray_interface8_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi0_wrdata0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi0_wrdata0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank8_dfii_pi0_wrdata0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi0_wrdata0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi0_rddata_r = csr_bankarray_interface8_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi0_rddata_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi0_rddata_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank8_dfii_pi0_rddata_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi0_rddata_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi1_command0_r = csr_bankarray_interface8_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi1_command0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi1_command0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank8_dfii_pi1_command0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi1_command0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign basesoc_sdram_phaseinjector1_command_issue_r = csr_bankarray_interface8_bank_bus_dat_w[0];
always @(*) begin
    basesoc_sdram_phaseinjector1_command_issue_re <= 1'd0;
    basesoc_sdram_phaseinjector1_command_issue_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 4'd8))) begin
        basesoc_sdram_phaseinjector1_command_issue_re <= csr_bankarray_interface8_bank_bus_we;
        basesoc_sdram_phaseinjector1_command_issue_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi1_address0_r = csr_bankarray_interface8_bank_bus_dat_w[12:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi1_address0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi1_address0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 4'd9))) begin
        csr_bankarray_csrbank8_dfii_pi1_address0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi1_address0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi1_baddress0_r = csr_bankarray_interface8_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi1_baddress0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi1_baddress0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 4'd10))) begin
        csr_bankarray_csrbank8_dfii_pi1_baddress0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi1_baddress0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi1_wrdata0_r = csr_bankarray_interface8_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi1_wrdata0_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi1_wrdata0_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 4'd11))) begin
        csr_bankarray_csrbank8_dfii_pi1_wrdata0_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi1_wrdata0_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign csr_bankarray_csrbank8_dfii_pi1_rddata_r = csr_bankarray_interface8_bank_bus_dat_w[15:0];
always @(*) begin
    csr_bankarray_csrbank8_dfii_pi1_rddata_re <= 1'd0;
    csr_bankarray_csrbank8_dfii_pi1_rddata_we <= 1'd0;
    if ((csr_bankarray_csrbank8_sel & (csr_bankarray_interface8_bank_bus_adr[8:0] == 4'd12))) begin
        csr_bankarray_csrbank8_dfii_pi1_rddata_re <= csr_bankarray_interface8_bank_bus_we;
        csr_bankarray_csrbank8_dfii_pi1_rddata_we <= (~csr_bankarray_interface8_bank_bus_we);
    end
end
assign basesoc_sdram_sel = basesoc_sdram_storage[0];
assign basesoc_sdram_cke = basesoc_sdram_storage[1];
assign basesoc_sdram_odt = basesoc_sdram_storage[2];
assign basesoc_sdram_reset_n = basesoc_sdram_storage[3];
assign csr_bankarray_csrbank8_dfii_control0_w = basesoc_sdram_storage[3:0];
assign basesoc_sdram_phaseinjector0_csrfield_cs = basesoc_sdram_phaseinjector0_command_storage[0];
assign basesoc_sdram_phaseinjector0_csrfield_we = basesoc_sdram_phaseinjector0_command_storage[1];
assign basesoc_sdram_phaseinjector0_csrfield_cas = basesoc_sdram_phaseinjector0_command_storage[2];
assign basesoc_sdram_phaseinjector0_csrfield_ras = basesoc_sdram_phaseinjector0_command_storage[3];
assign basesoc_sdram_phaseinjector0_csrfield_wren = basesoc_sdram_phaseinjector0_command_storage[4];
assign basesoc_sdram_phaseinjector0_csrfield_rden = basesoc_sdram_phaseinjector0_command_storage[5];
assign basesoc_sdram_phaseinjector0_csrfield_cs_top = basesoc_sdram_phaseinjector0_command_storage[6];
assign basesoc_sdram_phaseinjector0_csrfield_cs_bottom = basesoc_sdram_phaseinjector0_command_storage[7];
assign csr_bankarray_csrbank8_dfii_pi0_command0_w = basesoc_sdram_phaseinjector0_command_storage[7:0];
assign csr_bankarray_csrbank8_dfii_pi0_address0_w = basesoc_sdram_phaseinjector0_address_storage[12:0];
assign csr_bankarray_csrbank8_dfii_pi0_baddress0_w = basesoc_sdram_phaseinjector0_baddress_storage[1:0];
assign csr_bankarray_csrbank8_dfii_pi0_wrdata0_w = basesoc_sdram_phaseinjector0_wrdata_storage[15:0];
assign csr_bankarray_csrbank8_dfii_pi0_rddata_w = basesoc_sdram_phaseinjector0_rddata_status[15:0];
assign basesoc_sdram_phaseinjector0_rddata_we = csr_bankarray_csrbank8_dfii_pi0_rddata_we;
assign basesoc_sdram_phaseinjector1_csrfield_cs = basesoc_sdram_phaseinjector1_command_storage[0];
assign basesoc_sdram_phaseinjector1_csrfield_we = basesoc_sdram_phaseinjector1_command_storage[1];
assign basesoc_sdram_phaseinjector1_csrfield_cas = basesoc_sdram_phaseinjector1_command_storage[2];
assign basesoc_sdram_phaseinjector1_csrfield_ras = basesoc_sdram_phaseinjector1_command_storage[3];
assign basesoc_sdram_phaseinjector1_csrfield_wren = basesoc_sdram_phaseinjector1_command_storage[4];
assign basesoc_sdram_phaseinjector1_csrfield_rden = basesoc_sdram_phaseinjector1_command_storage[5];
assign basesoc_sdram_phaseinjector1_csrfield_cs_top = basesoc_sdram_phaseinjector1_command_storage[6];
assign basesoc_sdram_phaseinjector1_csrfield_cs_bottom = basesoc_sdram_phaseinjector1_command_storage[7];
assign csr_bankarray_csrbank8_dfii_pi1_command0_w = basesoc_sdram_phaseinjector1_command_storage[7:0];
assign csr_bankarray_csrbank8_dfii_pi1_address0_w = basesoc_sdram_phaseinjector1_address_storage[12:0];
assign csr_bankarray_csrbank8_dfii_pi1_baddress0_w = basesoc_sdram_phaseinjector1_baddress_storage[1:0];
assign csr_bankarray_csrbank8_dfii_pi1_wrdata0_w = basesoc_sdram_phaseinjector1_wrdata_storage[15:0];
assign csr_bankarray_csrbank8_dfii_pi1_rddata_w = basesoc_sdram_phaseinjector1_rddata_status[15:0];
assign basesoc_sdram_phaseinjector1_rddata_we = csr_bankarray_csrbank8_dfii_pi1_rddata_we;
assign csr_bankarray_csrbank9_sel = (csr_bankarray_interface9_bank_bus_adr[13:9] == 4'd10);
assign csr_bankarray_csrbank9_load0_r = csr_bankarray_interface9_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank9_load0_re <= 1'd0;
    csr_bankarray_csrbank9_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank9_load0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_load0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_reload0_r = csr_bankarray_interface9_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank9_reload0_re <= 1'd0;
    csr_bankarray_csrbank9_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank9_reload0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_reload0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_en0_r = csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank9_en0_re <= 1'd0;
    csr_bankarray_csrbank9_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank9_en0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_en0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_update_value0_r = csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank9_update_value0_re <= 1'd0;
    csr_bankarray_csrbank9_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank9_update_value0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_update_value0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_value_r = csr_bankarray_interface9_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank9_value_re <= 1'd0;
    csr_bankarray_csrbank9_value_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank9_value_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_value_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_ev_status_r = csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank9_ev_status_re <= 1'd0;
    csr_bankarray_csrbank9_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank9_ev_status_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_ev_status_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_ev_pending_r = csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank9_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank9_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank9_ev_pending_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_ev_pending_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_ev_enable0_r = csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank9_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank9_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank9_ev_enable0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_ev_enable0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_uptime_latch0_r = csr_bankarray_interface9_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank9_uptime_latch0_re <= 1'd0;
    csr_bankarray_csrbank9_uptime_latch0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 4'd8))) begin
        csr_bankarray_csrbank9_uptime_latch0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_uptime_latch0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_uptime_cycles1_r = csr_bankarray_interface9_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank9_uptime_cycles1_re <= 1'd0;
    csr_bankarray_csrbank9_uptime_cycles1_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 4'd9))) begin
        csr_bankarray_csrbank9_uptime_cycles1_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_uptime_cycles1_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_uptime_cycles0_r = csr_bankarray_interface9_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank9_uptime_cycles0_re <= 1'd0;
    csr_bankarray_csrbank9_uptime_cycles0_we <= 1'd0;
    if ((csr_bankarray_csrbank9_sel & (csr_bankarray_interface9_bank_bus_adr[8:0] == 4'd10))) begin
        csr_bankarray_csrbank9_uptime_cycles0_re <= csr_bankarray_interface9_bank_bus_we;
        csr_bankarray_csrbank9_uptime_cycles0_we <= (~csr_bankarray_interface9_bank_bus_we);
    end
end
assign csr_bankarray_csrbank9_load0_w = basesoc_basesoc_load_storage[31:0];
assign csr_bankarray_csrbank9_reload0_w = basesoc_basesoc_reload_storage[31:0];
assign csr_bankarray_csrbank9_en0_w = basesoc_basesoc_en_storage;
assign csr_bankarray_csrbank9_update_value0_w = basesoc_basesoc_update_value_storage;
assign csr_bankarray_csrbank9_value_w = basesoc_basesoc_value_status[31:0];
assign basesoc_basesoc_value_we = csr_bankarray_csrbank9_value_we;
always @(*) begin
    basesoc_basesoc_status_status <= 1'd0;
    basesoc_basesoc_status_status <= basesoc_basesoc_zero0;
end
assign csr_bankarray_csrbank9_ev_status_w = basesoc_basesoc_status_status;
assign basesoc_basesoc_status_we = csr_bankarray_csrbank9_ev_status_we;
always @(*) begin
    basesoc_basesoc_pending_status <= 1'd0;
    basesoc_basesoc_pending_status <= basesoc_basesoc_zero1;
end
assign csr_bankarray_csrbank9_ev_pending_w = basesoc_basesoc_pending_status;
assign basesoc_basesoc_pending_we = csr_bankarray_csrbank9_ev_pending_we;
assign basesoc_basesoc_zero2 = basesoc_basesoc_enable_storage;
assign csr_bankarray_csrbank9_ev_enable0_w = basesoc_basesoc_enable_storage;
assign csr_bankarray_csrbank9_uptime_latch0_w = basesoc_uptime_latch_storage;
assign csr_bankarray_csrbank9_uptime_cycles1_w = basesoc_uptime_cycles_status[63:32];
assign csr_bankarray_csrbank9_uptime_cycles0_w = basesoc_uptime_cycles_status[31:0];
assign basesoc_uptime_cycles_we = csr_bankarray_csrbank9_uptime_cycles0_we;
assign csr_bankarray_csrbank10_sel = (csr_bankarray_interface10_bank_bus_adr[13:9] == 4'd11);
assign basesoc_uart_rxtx_r = csr_bankarray_interface10_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_uart_rxtx_re <= 1'd0;
    basesoc_uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_uart_rxtx_re <= csr_bankarray_interface10_bank_bus_we;
        basesoc_uart_rxtx_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_txfull_r = csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank10_txfull_re <= 1'd0;
    csr_bankarray_csrbank10_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank10_txfull_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_txfull_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_rxempty_r = csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank10_rxempty_re <= 1'd0;
    csr_bankarray_csrbank10_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank10_rxempty_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_rxempty_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_ev_status_r = csr_bankarray_interface10_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank10_ev_status_re <= 1'd0;
    csr_bankarray_csrbank10_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank10_ev_status_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_ev_status_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_ev_pending_r = csr_bankarray_interface10_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank10_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank10_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank10_ev_pending_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_ev_pending_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_ev_enable0_r = csr_bankarray_interface10_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank10_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank10_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank10_ev_enable0_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_ev_enable0_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_txempty_r = csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank10_txempty_re <= 1'd0;
    csr_bankarray_csrbank10_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank10_txempty_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_txempty_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_rxfull_r = csr_bankarray_interface10_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank10_rxfull_re <= 1'd0;
    csr_bankarray_csrbank10_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank10_sel & (csr_bankarray_interface10_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank10_rxfull_re <= csr_bankarray_interface10_bank_bus_we;
        csr_bankarray_csrbank10_rxfull_we <= (~csr_bankarray_interface10_bank_bus_we);
    end
end
assign csr_bankarray_csrbank10_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csr_bankarray_csrbank10_txfull_we;
assign csr_bankarray_csrbank10_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csr_bankarray_csrbank10_rxempty_we;
always @(*) begin
    basesoc_uart_status_status <= 2'd0;
    basesoc_uart_status_status[0] <= basesoc_uart_tx0;
    basesoc_uart_status_status[1] <= basesoc_uart_rx0;
end
assign csr_bankarray_csrbank10_ev_status_w = basesoc_uart_status_status[1:0];
assign basesoc_uart_status_we = csr_bankarray_csrbank10_ev_status_we;
always @(*) begin
    basesoc_uart_pending_status <= 2'd0;
    basesoc_uart_pending_status[0] <= basesoc_uart_tx1;
    basesoc_uart_pending_status[1] <= basesoc_uart_rx1;
end
assign csr_bankarray_csrbank10_ev_pending_w = basesoc_uart_pending_status[1:0];
assign basesoc_uart_pending_we = csr_bankarray_csrbank10_ev_pending_we;
assign basesoc_uart_tx2 = basesoc_uart_enable_storage[0];
assign basesoc_uart_rx2 = basesoc_uart_enable_storage[1];
assign csr_bankarray_csrbank10_ev_enable0_w = basesoc_uart_enable_storage[1:0];
assign csr_bankarray_csrbank10_txempty_w = basesoc_uart_txempty_status;
assign basesoc_uart_txempty_we = csr_bankarray_csrbank10_txempty_we;
assign csr_bankarray_csrbank10_rxfull_w = basesoc_uart_rxfull_status;
assign basesoc_uart_rxfull_we = csr_bankarray_csrbank10_rxfull_we;
assign csr_bankarray_csrbank11_sel = (csr_bankarray_interface11_bank_bus_adr[13:9] == 4'd12);
assign csr_bankarray_csrbank11_dma_base0_r = csr_bankarray_interface11_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank11_dma_base0_re <= 1'd0;
    csr_bankarray_csrbank11_dma_base0_we <= 1'd0;
    if ((csr_bankarray_csrbank11_sel & (csr_bankarray_interface11_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank11_dma_base0_re <= csr_bankarray_interface11_bank_bus_we;
        csr_bankarray_csrbank11_dma_base0_we <= (~csr_bankarray_interface11_bank_bus_we);
    end
end
assign csr_bankarray_csrbank11_dma_length0_r = csr_bankarray_interface11_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank11_dma_length0_re <= 1'd0;
    csr_bankarray_csrbank11_dma_length0_we <= 1'd0;
    if ((csr_bankarray_csrbank11_sel & (csr_bankarray_interface11_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank11_dma_length0_re <= csr_bankarray_interface11_bank_bus_we;
        csr_bankarray_csrbank11_dma_length0_we <= (~csr_bankarray_interface11_bank_bus_we);
    end
end
assign csr_bankarray_csrbank11_dma_enable0_r = csr_bankarray_interface11_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank11_dma_enable0_re <= 1'd0;
    csr_bankarray_csrbank11_dma_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank11_sel & (csr_bankarray_interface11_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank11_dma_enable0_re <= csr_bankarray_interface11_bank_bus_we;
        csr_bankarray_csrbank11_dma_enable0_we <= (~csr_bankarray_interface11_bank_bus_we);
    end
end
assign csr_bankarray_csrbank11_dma_done_r = csr_bankarray_interface11_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank11_dma_done_re <= 1'd0;
    csr_bankarray_csrbank11_dma_done_we <= 1'd0;
    if ((csr_bankarray_csrbank11_sel & (csr_bankarray_interface11_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank11_dma_done_re <= csr_bankarray_interface11_bank_bus_we;
        csr_bankarray_csrbank11_dma_done_we <= (~csr_bankarray_interface11_bank_bus_we);
    end
end
assign csr_bankarray_csrbank11_dma_loop0_r = csr_bankarray_interface11_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank11_dma_loop0_re <= 1'd0;
    csr_bankarray_csrbank11_dma_loop0_we <= 1'd0;
    if ((csr_bankarray_csrbank11_sel & (csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank11_dma_loop0_re <= csr_bankarray_interface11_bank_bus_we;
        csr_bankarray_csrbank11_dma_loop0_we <= (~csr_bankarray_interface11_bank_bus_we);
    end
end
assign csr_bankarray_csrbank11_dma_offset_r = csr_bankarray_interface11_bank_bus_dat_w[31:0];
always @(*) begin
    csr_bankarray_csrbank11_dma_offset_re <= 1'd0;
    csr_bankarray_csrbank11_dma_offset_we <= 1'd0;
    if ((csr_bankarray_csrbank11_sel & (csr_bankarray_interface11_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank11_dma_offset_re <= csr_bankarray_interface11_bank_bus_we;
        csr_bankarray_csrbank11_dma_offset_we <= (~csr_bankarray_interface11_bank_bus_we);
    end
end
assign csr_bankarray_csrbank11_dma_base0_w = basesoc_videoframebuffer_litedramdmareader_base_storage[31:0];
assign csr_bankarray_csrbank11_dma_length0_w = basesoc_videoframebuffer_litedramdmareader_length_storage[31:0];
assign csr_bankarray_csrbank11_dma_enable0_w = basesoc_videoframebuffer_litedramdmareader_enable_storage;
assign csr_bankarray_csrbank11_dma_done_w = basesoc_videoframebuffer_litedramdmareader_done_status;
assign basesoc_videoframebuffer_litedramdmareader_done_we = csr_bankarray_csrbank11_dma_done_we;
assign csr_bankarray_csrbank11_dma_loop0_w = basesoc_videoframebuffer_litedramdmareader_loop_storage;
assign csr_bankarray_csrbank11_dma_offset_w = basesoc_videoframebuffer_litedramdmareader_offset_status[31:0];
assign basesoc_videoframebuffer_litedramdmareader_offset_we = csr_bankarray_csrbank11_dma_offset_we;
assign csr_bankarray_csrbank12_sel = (csr_bankarray_interface12_bank_bus_adr[13:9] == 4'd13);
assign csr_bankarray_csrbank12_enable0_r = csr_bankarray_interface12_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank12_enable0_re <= 1'd0;
    csr_bankarray_csrbank12_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank12_enable0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_enable0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_hres0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_hres0_re <= 1'd0;
    csr_bankarray_csrbank12_hres0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank12_hres0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_hres0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_hsync_start0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_hsync_start0_re <= 1'd0;
    csr_bankarray_csrbank12_hsync_start0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank12_hsync_start0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_hsync_start0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_hsync_end0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_hsync_end0_re <= 1'd0;
    csr_bankarray_csrbank12_hsync_end0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank12_hsync_end0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_hsync_end0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_hscan0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_hscan0_re <= 1'd0;
    csr_bankarray_csrbank12_hscan0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank12_hscan0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_hscan0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_vres0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_vres0_re <= 1'd0;
    csr_bankarray_csrbank12_vres0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank12_vres0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_vres0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_vsync_start0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_vsync_start0_re <= 1'd0;
    csr_bankarray_csrbank12_vsync_start0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank12_vsync_start0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_vsync_start0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_vsync_end0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_vsync_end0_re <= 1'd0;
    csr_bankarray_csrbank12_vsync_end0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank12_vsync_end0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_vsync_end0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_vscan0_r = csr_bankarray_interface12_bank_bus_dat_w[11:0];
always @(*) begin
    csr_bankarray_csrbank12_vscan0_re <= 1'd0;
    csr_bankarray_csrbank12_vscan0_we <= 1'd0;
    if ((csr_bankarray_csrbank12_sel & (csr_bankarray_interface12_bank_bus_adr[8:0] == 4'd8))) begin
        csr_bankarray_csrbank12_vscan0_re <= csr_bankarray_interface12_bank_bus_we;
        csr_bankarray_csrbank12_vscan0_we <= (~csr_bankarray_interface12_bank_bus_we);
    end
end
assign csr_bankarray_csrbank12_enable0_w = basesoc_vtg_enable_storage;
assign csr_bankarray_csrbank12_hres0_w = basesoc_vtg_hres_storage[11:0];
assign csr_bankarray_csrbank12_hsync_start0_w = basesoc_vtg_hsync_start_storage[11:0];
assign csr_bankarray_csrbank12_hsync_end0_w = basesoc_vtg_hsync_end_storage[11:0];
assign csr_bankarray_csrbank12_hscan0_w = basesoc_vtg_hscan_storage[11:0];
assign csr_bankarray_csrbank12_vres0_w = basesoc_vtg_vres_storage[11:0];
assign csr_bankarray_csrbank12_vsync_start0_w = basesoc_vtg_vsync_start_storage[11:0];
assign csr_bankarray_csrbank12_vsync_end0_w = basesoc_vtg_vsync_end_storage[11:0];
assign csr_bankarray_csrbank12_vscan0_w = basesoc_vtg_vscan_storage[11:0];
assign csr_interconnect_adr = interface1_adr;
assign csr_interconnect_we = interface1_we;
assign csr_interconnect_dat_w = interface1_dat_w;
assign interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface6_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface7_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface8_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface9_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface10_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface11_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface12_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface6_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface7_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface8_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface9_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface10_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface11_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface12_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface11_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface12_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_interface6_bank_bus_dat_r) | csr_bankarray_interface7_bank_bus_dat_r) | csr_bankarray_interface8_bank_bus_dat_r) | csr_bankarray_interface9_bank_bus_dat_r) | csr_bankarray_interface10_bank_bus_dat_r) | csr_bankarray_interface11_bank_bus_dat_r) | csr_bankarray_interface12_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    rhs_self0 <= 30'd0;
    case (grant)
        1'd0: begin
            rhs_self0 <= basesoc_basesoc_pbus_adr;
        end
        default: begin
            rhs_self0 <= apf_bridge_master_adr;
        end
    endcase
end
always @(*) begin
    rhs_self1 <= 32'd0;
    case (grant)
        1'd0: begin
            rhs_self1 <= basesoc_basesoc_pbus_dat_w;
        end
        default: begin
            rhs_self1 <= apf_bridge_master_dat_w;
        end
    endcase
end
always @(*) begin
    rhs_self2 <= 4'd0;
    case (grant)
        1'd0: begin
            rhs_self2 <= basesoc_basesoc_pbus_sel;
        end
        default: begin
            rhs_self2 <= apf_bridge_master_sel;
        end
    endcase
end
always @(*) begin
    rhs_self3 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_self3 <= basesoc_basesoc_pbus_cyc;
        end
        default: begin
            rhs_self3 <= apf_bridge_master_cyc;
        end
    endcase
end
always @(*) begin
    rhs_self4 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_self4 <= basesoc_basesoc_pbus_stb;
        end
        default: begin
            rhs_self4 <= apf_bridge_master_stb;
        end
    endcase
end
always @(*) begin
    rhs_self5 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_self5 <= basesoc_basesoc_pbus_we;
        end
        default: begin
            rhs_self5 <= apf_bridge_master_we;
        end
    endcase
end
always @(*) begin
    rhs_self6 <= 3'd0;
    case (grant)
        1'd0: begin
            rhs_self6 <= basesoc_basesoc_pbus_cti;
        end
        default: begin
            rhs_self6 <= apf_bridge_master_cti;
        end
    endcase
end
always @(*) begin
    rhs_self7 <= 2'd0;
    case (grant)
        1'd0: begin
            rhs_self7 <= basesoc_basesoc_pbus_bte;
        end
        default: begin
            rhs_self7 <= apf_bridge_master_bte;
        end
    endcase
end
always @(*) begin
    rhs_self8 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self8 <= basesoc_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            rhs_self8 <= basesoc_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            rhs_self8 <= basesoc_sdram_choose_cmd_valids[2];
        end
        default: begin
            rhs_self8 <= basesoc_sdram_choose_cmd_valids[3];
        end
    endcase
end
always @(*) begin
    rhs_self9 <= 13'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self9 <= basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_self9 <= basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_self9 <= basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            rhs_self9 <= basesoc_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_self10 <= 2'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self10 <= basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_self10 <= basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_self10 <= basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            rhs_self10 <= basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_self11 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self11 <= basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_self11 <= basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_self11 <= basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            rhs_self11 <= basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_self12 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self12 <= basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_self12 <= basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_self12 <= basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            rhs_self12 <= basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_self13 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_self13 <= basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_self13 <= basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_self13 <= basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            rhs_self13 <= basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_self0 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            t_self0 <= basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_self0 <= basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_self0 <= basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            t_self0 <= basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_self1 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            t_self1 <= basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_self1 <= basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_self1 <= basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            t_self1 <= basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_self2 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            t_self2 <= basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_self2 <= basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_self2 <= basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            t_self2 <= basesoc_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self14 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_self14 <= basesoc_sdram_choose_req_valids[0];
        end
        1'd1: begin
            rhs_self14 <= basesoc_sdram_choose_req_valids[1];
        end
        2'd2: begin
            rhs_self14 <= basesoc_sdram_choose_req_valids[2];
        end
        default: begin
            rhs_self14 <= basesoc_sdram_choose_req_valids[3];
        end
    endcase
end
always @(*) begin
    rhs_self15 <= 13'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_self15 <= basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_self15 <= basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_self15 <= basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            rhs_self15 <= basesoc_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_self16 <= 2'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_self16 <= basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_self16 <= basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_self16 <= basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            rhs_self16 <= basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_self17 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_self17 <= basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_self17 <= basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_self17 <= basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            rhs_self17 <= basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_self18 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_self18 <= basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_self18 <= basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_self18 <= basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            rhs_self18 <= basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_self19 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_self19 <= basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_self19 <= basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_self19 <= basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            rhs_self19 <= basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_self3 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            t_self3 <= basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_self3 <= basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_self3 <= basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            t_self3 <= basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_self4 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            t_self4 <= basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_self4 <= basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_self4 <= basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            t_self4 <= basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_self5 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            t_self5 <= basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_self5 <= basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_self5 <= basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            t_self5 <= basesoc_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self20 <= 22'd0;
    case (roundrobin0_grant)
        1'd0: begin
            rhs_self20 <= {basesoc_litedramnativeport0_cmd_payload_addr[23:11], basesoc_litedramnativeport0_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self20 <= {basesoc_litedramnativeport1_cmd_payload_addr[23:11], basesoc_litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self20 <= {basesoc_litedramnativeport2_cmd_payload_addr[23:11], basesoc_litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self20 <= {basesoc_litedramcrossbar_cmd_payload_addr[23:11], basesoc_litedramcrossbar_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self21 <= 1'd0;
    case (roundrobin0_grant)
        1'd0: begin
            rhs_self21 <= basesoc_litedramnativeport0_cmd_payload_we;
        end
        1'd1: begin
            rhs_self21 <= basesoc_litedramnativeport1_cmd_payload_we;
        end
        2'd2: begin
            rhs_self21 <= basesoc_litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self21 <= basesoc_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self22 <= 1'd0;
    case (roundrobin0_grant)
        1'd0: begin
            rhs_self22 <= (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 1'd0) & (~(((locked0 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid);
        end
        1'd1: begin
            rhs_self22 <= (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 1'd0) & (~(((locked1 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid);
        end
        2'd2: begin
            rhs_self22 <= (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 1'd0) & (~(((locked2 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self22 <= (((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 1'd0) & (~(((locked3 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_self23 <= 22'd0;
    case (roundrobin1_grant)
        1'd0: begin
            rhs_self23 <= {basesoc_litedramnativeport0_cmd_payload_addr[23:11], basesoc_litedramnativeport0_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self23 <= {basesoc_litedramnativeport1_cmd_payload_addr[23:11], basesoc_litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self23 <= {basesoc_litedramnativeport2_cmd_payload_addr[23:11], basesoc_litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self23 <= {basesoc_litedramcrossbar_cmd_payload_addr[23:11], basesoc_litedramcrossbar_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self24 <= 1'd0;
    case (roundrobin1_grant)
        1'd0: begin
            rhs_self24 <= basesoc_litedramnativeport0_cmd_payload_we;
        end
        1'd1: begin
            rhs_self24 <= basesoc_litedramnativeport1_cmd_payload_we;
        end
        2'd2: begin
            rhs_self24 <= basesoc_litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self24 <= basesoc_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self25 <= 1'd0;
    case (roundrobin1_grant)
        1'd0: begin
            rhs_self25 <= (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 1'd1) & (~(((locked4 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid);
        end
        1'd1: begin
            rhs_self25 <= (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 1'd1) & (~(((locked5 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid);
        end
        2'd2: begin
            rhs_self25 <= (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 1'd1) & (~(((locked6 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self25 <= (((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 1'd1) & (~(((locked7 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_self26 <= 22'd0;
    case (roundrobin2_grant)
        1'd0: begin
            rhs_self26 <= {basesoc_litedramnativeport0_cmd_payload_addr[23:11], basesoc_litedramnativeport0_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self26 <= {basesoc_litedramnativeport1_cmd_payload_addr[23:11], basesoc_litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self26 <= {basesoc_litedramnativeport2_cmd_payload_addr[23:11], basesoc_litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self26 <= {basesoc_litedramcrossbar_cmd_payload_addr[23:11], basesoc_litedramcrossbar_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self27 <= 1'd0;
    case (roundrobin2_grant)
        1'd0: begin
            rhs_self27 <= basesoc_litedramnativeport0_cmd_payload_we;
        end
        1'd1: begin
            rhs_self27 <= basesoc_litedramnativeport1_cmd_payload_we;
        end
        2'd2: begin
            rhs_self27 <= basesoc_litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self27 <= basesoc_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self28 <= 1'd0;
    case (roundrobin2_grant)
        1'd0: begin
            rhs_self28 <= (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 2'd2) & (~(((locked8 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid);
        end
        1'd1: begin
            rhs_self28 <= (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 2'd2) & (~(((locked9 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid);
        end
        2'd2: begin
            rhs_self28 <= (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 2'd2) & (~(((locked10 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self28 <= (((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 2'd2) & (~(((locked11 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_self29 <= 22'd0;
    case (roundrobin3_grant)
        1'd0: begin
            rhs_self29 <= {basesoc_litedramnativeport0_cmd_payload_addr[23:11], basesoc_litedramnativeport0_cmd_payload_addr[8:0]};
        end
        1'd1: begin
            rhs_self29 <= {basesoc_litedramnativeport1_cmd_payload_addr[23:11], basesoc_litedramnativeport1_cmd_payload_addr[8:0]};
        end
        2'd2: begin
            rhs_self29 <= {basesoc_litedramnativeport2_cmd_payload_addr[23:11], basesoc_litedramnativeport2_cmd_payload_addr[8:0]};
        end
        default: begin
            rhs_self29 <= {basesoc_litedramcrossbar_cmd_payload_addr[23:11], basesoc_litedramcrossbar_cmd_payload_addr[8:0]};
        end
    endcase
end
always @(*) begin
    rhs_self30 <= 1'd0;
    case (roundrobin3_grant)
        1'd0: begin
            rhs_self30 <= basesoc_litedramnativeport0_cmd_payload_we;
        end
        1'd1: begin
            rhs_self30 <= basesoc_litedramnativeport1_cmd_payload_we;
        end
        2'd2: begin
            rhs_self30 <= basesoc_litedramnativeport2_cmd_payload_we;
        end
        default: begin
            rhs_self30 <= basesoc_litedramcrossbar_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_self31 <= 1'd0;
    case (roundrobin3_grant)
        1'd0: begin
            rhs_self31 <= (((basesoc_litedramnativeport0_cmd_payload_addr[10:9] == 2'd3) & (~(((locked12 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))))) & basesoc_litedramnativeport0_cmd_valid);
        end
        1'd1: begin
            rhs_self31 <= (((basesoc_litedramnativeport1_cmd_payload_addr[10:9] == 2'd3) & (~(((locked13 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd1))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd1))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd1))))) & basesoc_litedramnativeport1_cmd_valid);
        end
        2'd2: begin
            rhs_self31 <= (((basesoc_litedramnativeport2_cmd_payload_addr[10:9] == 2'd3) & (~(((locked14 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd2))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd2))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd2))))) & basesoc_litedramnativeport2_cmd_valid);
        end
        default: begin
            rhs_self31 <= (((basesoc_litedramcrossbar_cmd_payload_addr[10:9] == 2'd3) & (~(((locked15 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 2'd3))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 2'd3))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 2'd3))))) & basesoc_litedramcrossbar_cmd_valid);
        end
    endcase
end
always @(*) begin
    self0 <= 2'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self0 <= basesoc_sdram_nop_ba[1:0];
        end
        1'd1: begin
            self0 <= basesoc_sdram_choose_cmd_cmd_payload_ba[1:0];
        end
        2'd2: begin
            self0 <= basesoc_sdram_choose_req_cmd_payload_ba[1:0];
        end
        default: begin
            self0 <= basesoc_sdram_cmd_payload_ba[1:0];
        end
    endcase
end
always @(*) begin
    self1 <= 13'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self1 <= basesoc_sdram_nop_a;
        end
        1'd1: begin
            self1 <= basesoc_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            self1 <= basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            self1 <= basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    self2 <= 1'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self2 <= 1'd0;
        end
        1'd1: begin
            self2 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            self2 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            self2 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    self3 <= 1'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self3 <= 1'd0;
        end
        1'd1: begin
            self3 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            self3 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            self3 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    self4 <= 1'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self4 <= 1'd0;
        end
        1'd1: begin
            self4 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            self4 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            self4 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    self5 <= 1'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self5 <= 1'd0;
        end
        1'd1: begin
            self5 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            self5 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            self5 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    self6 <= 1'd0;
    case (basesoc_sdram_steerer_sel0)
        1'd0: begin
            self6 <= 1'd0;
        end
        1'd1: begin
            self6 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            self6 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            self6 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    self7 <= 2'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self7 <= basesoc_sdram_nop_ba[1:0];
        end
        1'd1: begin
            self7 <= basesoc_sdram_choose_cmd_cmd_payload_ba[1:0];
        end
        2'd2: begin
            self7 <= basesoc_sdram_choose_req_cmd_payload_ba[1:0];
        end
        default: begin
            self7 <= basesoc_sdram_cmd_payload_ba[1:0];
        end
    endcase
end
always @(*) begin
    self8 <= 13'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self8 <= basesoc_sdram_nop_a;
        end
        1'd1: begin
            self8 <= basesoc_sdram_choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            self8 <= basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            self8 <= basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    self9 <= 1'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self9 <= 1'd0;
        end
        1'd1: begin
            self9 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            self9 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            self9 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    self10 <= 1'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self10 <= 1'd0;
        end
        1'd1: begin
            self10 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            self10 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            self10 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    self11 <= 1'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self11 <= 1'd0;
        end
        1'd1: begin
            self11 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            self11 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            self11 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    self12 <= 1'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self12 <= 1'd0;
        end
        1'd1: begin
            self12 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            self12 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            self12 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    self13 <= 1'd0;
    case (basesoc_sdram_steerer_sel1)
        1'd0: begin
            self13 <= 1'd0;
        end
        1'd1: begin
            self13 <= ((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & basesoc_sdram_choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            self13 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            self13 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
assign basesoc_vtg_enable = multiregimpl0_regs1;
assign basesoc_vtg_hres = multiregimpl1_regs1;
assign basesoc_vtg_hsync_start = multiregimpl2_regs1;
assign basesoc_vtg_hsync_end = multiregimpl3_regs1;
assign basesoc_vtg_hscan = multiregimpl4_regs1;
assign basesoc_vtg_vres = multiregimpl5_regs1;
assign basesoc_vtg_vsync_start = multiregimpl6_regs1;
assign basesoc_vtg_vsync_end = multiregimpl7_regs1;
assign basesoc_vtg_vscan = multiregimpl8_regs1;
assign basesoc_videoframebuffer_cdc_cdc_produce_rdomain = multiregimpl9_regs1;
assign basesoc_videoframebuffer_cdc_cdc_consume_wdomain = multiregimpl10_regs1;
assign basesoc_videoframebuffer_fsm_reset = multiregimpl11_regs1;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_produce_rdomain = multiregimpl12_regs1;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_consume_wdomain = multiregimpl13_regs1;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_produce_rdomain = multiregimpl14_regs1;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_consume_wdomain = multiregimpl15_regs1;
assign basesoc_rx_rx = multiregimpl16_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge from10223_clk) begin
    basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_binary <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next_binary;
    basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_next;
    if (from10223_rst) begin
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q <= 3'd0;
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q_binary <= 3'd0;
    end
    multiregimpl13_regs0 <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q;
    multiregimpl13_regs1 <= multiregimpl13_regs0;
end

always @(posedge from10374_clk) begin
    basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_binary <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next_binary;
    basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_next;
    if (from10374_rst) begin
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q <= 3'd0;
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q_binary <= 3'd0;
    end
    multiregimpl15_regs0 <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q;
    multiregimpl15_regs1 <= multiregimpl15_regs0;
end

always @(posedge jtag_clk) begin
    jtagphy_alterajtag_state <= jtagphy_alterajtag_next_state;
    jtagphy_resetinserter_state <= jtagphy_resetinserter_next_state;
    if (basesoc_jtag_uart_phy_valid_jtagphy_next_value_ce0) begin
        basesoc_jtag_uart_phy_valid <= basesoc_jtag_uart_phy_valid_jtagphy_next_value0;
    end
    if (basesoc_jtag_uart_phy_data_jtagphy_next_value_ce1) begin
        basesoc_jtag_uart_phy_data <= basesoc_jtag_uart_phy_data_jtagphy_next_value1;
    end
    if (basesoc_jtag_uart_phy_count_jtagphy_next_value_ce2) begin
        basesoc_jtag_uart_phy_count <= basesoc_jtag_uart_phy_count_jtagphy_next_value2;
    end
    if (basesoc_jtag_uart_phy_ready_jtagphy_next_value_ce3) begin
        basesoc_jtag_uart_phy_ready <= basesoc_jtag_uart_phy_ready_jtagphy_next_value3;
    end
    if (basesoc_jtag_uart_phy_fsm_reset) begin
        basesoc_jtag_uart_phy_valid <= 1'd0;
        basesoc_jtag_uart_phy_ready <= 1'd0;
        basesoc_jtag_uart_phy_data <= 8'd0;
        basesoc_jtag_uart_phy_count <= 3'd0;
        jtagphy_resetinserter_state <= 2'd0;
    end
    if (jtag_rst) begin
        basesoc_jtag_uart_phy_valid <= 1'd0;
        basesoc_jtag_uart_phy_ready <= 1'd0;
        basesoc_jtag_uart_phy_data <= 8'd0;
        basesoc_jtag_uart_phy_count <= 3'd0;
        jtagphy_alterajtag_state <= 4'd0;
        jtagphy_resetinserter_state <= 2'd0;
    end
end

always @(posedge jtag_inv_clk) begin
    basesoc_jtag_uart_phy_jtag_reset <= basesoc_jtag_uart_phy_jtag_ongoing0;
    basesoc_jtag_uart_phy_jtag_capture <= basesoc_jtag_uart_phy_jtag_ongoing3;
    basesoc_jtag_uart_phy_jtag_tdouser <= basesoc_jtag_uart_phy_jtag_tdo;
    if (jtag_inv_rst) begin
        basesoc_jtag_uart_phy_jtag_reset <= 1'd0;
        basesoc_jtag_uart_phy_jtag_capture <= 1'd0;
        basesoc_jtag_uart_phy_jtag_tdouser <= 1'd0;
    end
end

always @(posedge sys_clk) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slaves <= master;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((basesoc_basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_basesoc_bus_error) begin
            basesoc_basesoc_bus_errors <= (basesoc_basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((basesoc_basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_basesoc_ram_bus_stb) & ((~basesoc_basesoc_basesoc_ram_bus_ack) | basesoc_basesoc_basesoc_adr_burst))) begin
        basesoc_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    basesoc_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((basesoc_basesoc_ram_bus_ram_bus_cyc & basesoc_basesoc_ram_bus_ram_bus_stb) & ((~basesoc_basesoc_ram_bus_ram_bus_ack) | basesoc_basesoc_ram_adr_burst))) begin
        basesoc_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    if (basesoc_basesoc_en_storage) begin
        if ((basesoc_basesoc_value == 1'd0)) begin
            basesoc_basesoc_value <= basesoc_basesoc_reload_storage;
        end else begin
            basesoc_basesoc_value <= (basesoc_basesoc_value - 1'd1);
        end
    end else begin
        basesoc_basesoc_value <= basesoc_basesoc_load_storage;
    end
    if (basesoc_basesoc_update_value_re) begin
        basesoc_basesoc_value_status <= basesoc_basesoc_value;
    end
    basesoc_uptime_cycles <= (basesoc_uptime_cycles + 1'd1);
    if (basesoc_uptime_latch_re) begin
        basesoc_uptime_cycles_status <= basesoc_uptime_cycles;
    end
    if (basesoc_basesoc_zero_clear) begin
        basesoc_basesoc_zero_pending <= 1'd0;
    end
    basesoc_basesoc_zero_trigger_d <= basesoc_basesoc_zero_trigger;
    if ((basesoc_basesoc_zero_trigger & (~basesoc_basesoc_zero_trigger_d))) begin
        basesoc_basesoc_zero_pending <= 1'd1;
    end
    phase_sys <= phase_sys2x;
    if (basesoc_sdram_csr_dfi_p0_rddata_valid) begin
        basesoc_sdram_phaseinjector0_rddata_status <= basesoc_sdram_csr_dfi_p0_rddata;
    end
    if (basesoc_sdram_csr_dfi_p1_rddata_valid) begin
        basesoc_sdram_phaseinjector1_rddata_status <= basesoc_sdram_csr_dfi_p1_rddata;
    end
    if ((basesoc_sdram_timer_wait & (~basesoc_sdram_timer_done0))) begin
        basesoc_sdram_timer_count1 <= (basesoc_sdram_timer_count1 - 1'd1);
    end else begin
        basesoc_sdram_timer_count1 <= 9'd446;
    end
    basesoc_sdram_postponer_req_o <= 1'd0;
    if (basesoc_sdram_postponer_req_i) begin
        basesoc_sdram_postponer_count <= (basesoc_sdram_postponer_count - 1'd1);
        if ((basesoc_sdram_postponer_count == 1'd0)) begin
            basesoc_sdram_postponer_count <= 1'd0;
            basesoc_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (basesoc_sdram_sequencer_start0) begin
        basesoc_sdram_sequencer_count <= 1'd0;
    end else begin
        if (basesoc_sdram_sequencer_done1) begin
            if ((basesoc_sdram_sequencer_count != 1'd0)) begin
                basesoc_sdram_sequencer_count <= (basesoc_sdram_sequencer_count - 1'd1);
            end
        end
    end
    basesoc_sdram_cmd_payload_a <= 1'd0;
    basesoc_sdram_cmd_payload_ba <= 1'd0;
    basesoc_sdram_cmd_payload_cas <= 1'd0;
    basesoc_sdram_cmd_payload_ras <= 1'd0;
    basesoc_sdram_cmd_payload_we <= 1'd0;
    basesoc_sdram_sequencer_done1 <= 1'd0;
    if ((basesoc_sdram_sequencer_start1 & (basesoc_sdram_sequencer_trigger == 1'd0))) begin
        basesoc_sdram_cmd_payload_a <= 11'd1024;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd1;
        basesoc_sdram_cmd_payload_we <= 1'd1;
    end
    if ((basesoc_sdram_sequencer_trigger == 2'd2)) begin
        basesoc_sdram_cmd_payload_a <= 11'd1024;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd1;
        basesoc_sdram_cmd_payload_ras <= 1'd1;
        basesoc_sdram_cmd_payload_we <= 1'd0;
    end
    if ((basesoc_sdram_sequencer_trigger == 4'd8)) begin
        basesoc_sdram_cmd_payload_a <= 1'd0;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd0;
        basesoc_sdram_cmd_payload_we <= 1'd0;
        basesoc_sdram_sequencer_done1 <= 1'd1;
    end
    if ((basesoc_sdram_sequencer_trigger == 4'd8)) begin
        basesoc_sdram_sequencer_trigger <= 1'd0;
    end else begin
        if ((basesoc_sdram_sequencer_trigger != 1'd0)) begin
            basesoc_sdram_sequencer_trigger <= (basesoc_sdram_sequencer_trigger + 1'd1);
        end else begin
            if (basesoc_sdram_sequencer_start1) begin
                basesoc_sdram_sequencer_trigger <= 1'd1;
            end
        end
    end
    refresher_state <= refresher_next_state;
    if (basesoc_sdram_bankmachine0_row_close) begin
        basesoc_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine0_row_open) begin
            basesoc_sdram_bankmachine0_row_opened <= 1'd1;
            basesoc_sdram_bankmachine0_row <= basesoc_sdram_bankmachine0_source_source_payload_addr[21:9];
        end
    end
    if (((basesoc_sdram_bankmachine0_syncfifo0_we & basesoc_sdram_bankmachine0_syncfifo0_writable) & (~basesoc_sdram_bankmachine0_replace))) begin
        basesoc_sdram_bankmachine0_produce <= (basesoc_sdram_bankmachine0_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine0_do_read) begin
        basesoc_sdram_bankmachine0_consume <= (basesoc_sdram_bankmachine0_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine0_syncfifo0_we & basesoc_sdram_bankmachine0_syncfifo0_writable) & (~basesoc_sdram_bankmachine0_replace))) begin
        if ((~basesoc_sdram_bankmachine0_do_read)) begin
            basesoc_sdram_bankmachine0_level <= (basesoc_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine0_do_read) begin
            basesoc_sdram_bankmachine0_level <= (basesoc_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine0_pipe_valid_source_valid) | basesoc_sdram_bankmachine0_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine0_pipe_valid_source_valid <= basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine0_pipe_valid_source_first <= basesoc_sdram_bankmachine0_pipe_valid_sink_first;
        basesoc_sdram_bankmachine0_pipe_valid_source_last <= basesoc_sdram_bankmachine0_pipe_valid_sink_last;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine0_twtpcon_valid) begin
        basesoc_sdram_bankmachine0_twtpcon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_twtpcon_ready)) begin
            basesoc_sdram_bankmachine0_twtpcon_count <= (basesoc_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine0_trccon_valid) begin
        basesoc_sdram_bankmachine0_trccon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_trccon_ready)) begin
            basesoc_sdram_bankmachine0_trccon_count <= (basesoc_sdram_bankmachine0_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine0_trascon_valid) begin
        basesoc_sdram_bankmachine0_trascon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_trascon_ready)) begin
            basesoc_sdram_bankmachine0_trascon_count <= (basesoc_sdram_bankmachine0_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine0_state <= bankmachine0_next_state;
    if (basesoc_sdram_bankmachine1_row_close) begin
        basesoc_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine1_row_open) begin
            basesoc_sdram_bankmachine1_row_opened <= 1'd1;
            basesoc_sdram_bankmachine1_row <= basesoc_sdram_bankmachine1_source_source_payload_addr[21:9];
        end
    end
    if (((basesoc_sdram_bankmachine1_syncfifo1_we & basesoc_sdram_bankmachine1_syncfifo1_writable) & (~basesoc_sdram_bankmachine1_replace))) begin
        basesoc_sdram_bankmachine1_produce <= (basesoc_sdram_bankmachine1_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine1_do_read) begin
        basesoc_sdram_bankmachine1_consume <= (basesoc_sdram_bankmachine1_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine1_syncfifo1_we & basesoc_sdram_bankmachine1_syncfifo1_writable) & (~basesoc_sdram_bankmachine1_replace))) begin
        if ((~basesoc_sdram_bankmachine1_do_read)) begin
            basesoc_sdram_bankmachine1_level <= (basesoc_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine1_do_read) begin
            basesoc_sdram_bankmachine1_level <= (basesoc_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine1_pipe_valid_source_valid) | basesoc_sdram_bankmachine1_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine1_pipe_valid_source_valid <= basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine1_pipe_valid_source_first <= basesoc_sdram_bankmachine1_pipe_valid_sink_first;
        basesoc_sdram_bankmachine1_pipe_valid_source_last <= basesoc_sdram_bankmachine1_pipe_valid_sink_last;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine1_twtpcon_valid) begin
        basesoc_sdram_bankmachine1_twtpcon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_twtpcon_ready)) begin
            basesoc_sdram_bankmachine1_twtpcon_count <= (basesoc_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine1_trccon_valid) begin
        basesoc_sdram_bankmachine1_trccon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_trccon_ready)) begin
            basesoc_sdram_bankmachine1_trccon_count <= (basesoc_sdram_bankmachine1_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine1_trascon_valid) begin
        basesoc_sdram_bankmachine1_trascon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_trascon_ready)) begin
            basesoc_sdram_bankmachine1_trascon_count <= (basesoc_sdram_bankmachine1_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine1_state <= bankmachine1_next_state;
    if (basesoc_sdram_bankmachine2_row_close) begin
        basesoc_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine2_row_open) begin
            basesoc_sdram_bankmachine2_row_opened <= 1'd1;
            basesoc_sdram_bankmachine2_row <= basesoc_sdram_bankmachine2_source_source_payload_addr[21:9];
        end
    end
    if (((basesoc_sdram_bankmachine2_syncfifo2_we & basesoc_sdram_bankmachine2_syncfifo2_writable) & (~basesoc_sdram_bankmachine2_replace))) begin
        basesoc_sdram_bankmachine2_produce <= (basesoc_sdram_bankmachine2_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine2_do_read) begin
        basesoc_sdram_bankmachine2_consume <= (basesoc_sdram_bankmachine2_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine2_syncfifo2_we & basesoc_sdram_bankmachine2_syncfifo2_writable) & (~basesoc_sdram_bankmachine2_replace))) begin
        if ((~basesoc_sdram_bankmachine2_do_read)) begin
            basesoc_sdram_bankmachine2_level <= (basesoc_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine2_do_read) begin
            basesoc_sdram_bankmachine2_level <= (basesoc_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine2_pipe_valid_source_valid) | basesoc_sdram_bankmachine2_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine2_pipe_valid_source_valid <= basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine2_pipe_valid_source_first <= basesoc_sdram_bankmachine2_pipe_valid_sink_first;
        basesoc_sdram_bankmachine2_pipe_valid_source_last <= basesoc_sdram_bankmachine2_pipe_valid_sink_last;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine2_twtpcon_valid) begin
        basesoc_sdram_bankmachine2_twtpcon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_twtpcon_ready)) begin
            basesoc_sdram_bankmachine2_twtpcon_count <= (basesoc_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine2_trccon_valid) begin
        basesoc_sdram_bankmachine2_trccon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_trccon_ready)) begin
            basesoc_sdram_bankmachine2_trccon_count <= (basesoc_sdram_bankmachine2_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine2_trascon_valid) begin
        basesoc_sdram_bankmachine2_trascon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_trascon_ready)) begin
            basesoc_sdram_bankmachine2_trascon_count <= (basesoc_sdram_bankmachine2_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine2_state <= bankmachine2_next_state;
    if (basesoc_sdram_bankmachine3_row_close) begin
        basesoc_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine3_row_open) begin
            basesoc_sdram_bankmachine3_row_opened <= 1'd1;
            basesoc_sdram_bankmachine3_row <= basesoc_sdram_bankmachine3_source_source_payload_addr[21:9];
        end
    end
    if (((basesoc_sdram_bankmachine3_syncfifo3_we & basesoc_sdram_bankmachine3_syncfifo3_writable) & (~basesoc_sdram_bankmachine3_replace))) begin
        basesoc_sdram_bankmachine3_produce <= (basesoc_sdram_bankmachine3_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine3_do_read) begin
        basesoc_sdram_bankmachine3_consume <= (basesoc_sdram_bankmachine3_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine3_syncfifo3_we & basesoc_sdram_bankmachine3_syncfifo3_writable) & (~basesoc_sdram_bankmachine3_replace))) begin
        if ((~basesoc_sdram_bankmachine3_do_read)) begin
            basesoc_sdram_bankmachine3_level <= (basesoc_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine3_do_read) begin
            basesoc_sdram_bankmachine3_level <= (basesoc_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine3_pipe_valid_source_valid) | basesoc_sdram_bankmachine3_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine3_pipe_valid_source_valid <= basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine3_pipe_valid_source_first <= basesoc_sdram_bankmachine3_pipe_valid_sink_first;
        basesoc_sdram_bankmachine3_pipe_valid_source_last <= basesoc_sdram_bankmachine3_pipe_valid_sink_last;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine3_twtpcon_valid) begin
        basesoc_sdram_bankmachine3_twtpcon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_twtpcon_ready)) begin
            basesoc_sdram_bankmachine3_twtpcon_count <= (basesoc_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine3_trccon_valid) begin
        basesoc_sdram_bankmachine3_trccon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_trccon_ready)) begin
            basesoc_sdram_bankmachine3_trccon_count <= (basesoc_sdram_bankmachine3_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine3_trascon_valid) begin
        basesoc_sdram_bankmachine3_trascon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_trascon_ready)) begin
            basesoc_sdram_bankmachine3_trascon_count <= (basesoc_sdram_bankmachine3_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine3_state <= bankmachine3_next_state;
    if ((~basesoc_sdram_en0)) begin
        basesoc_sdram_time0 <= 5'd31;
    end else begin
        if ((~basesoc_sdram_max_time0)) begin
            basesoc_sdram_time0 <= (basesoc_sdram_time0 - 1'd1);
        end
    end
    if ((~basesoc_sdram_en1)) begin
        basesoc_sdram_time1 <= 4'd15;
    end else begin
        if ((~basesoc_sdram_max_time1)) begin
            basesoc_sdram_time1 <= (basesoc_sdram_time1 - 1'd1);
        end
    end
    if (basesoc_sdram_choose_cmd_ce) begin
        case (basesoc_sdram_choose_cmd_grant)
            1'd0: begin
                if (basesoc_sdram_choose_cmd_request[1]) begin
                    basesoc_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[2]) begin
                        basesoc_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[3]) begin
                            basesoc_sdram_choose_cmd_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (basesoc_sdram_choose_cmd_request[2]) begin
                    basesoc_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[3]) begin
                        basesoc_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[0]) begin
                            basesoc_sdram_choose_cmd_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (basesoc_sdram_choose_cmd_request[3]) begin
                    basesoc_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[0]) begin
                        basesoc_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[1]) begin
                            basesoc_sdram_choose_cmd_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (basesoc_sdram_choose_cmd_request[0]) begin
                    basesoc_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[1]) begin
                        basesoc_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[2]) begin
                            basesoc_sdram_choose_cmd_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (basesoc_sdram_choose_req_ce) begin
        case (basesoc_sdram_choose_req_grant)
            1'd0: begin
                if (basesoc_sdram_choose_req_request[1]) begin
                    basesoc_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (basesoc_sdram_choose_req_request[2]) begin
                        basesoc_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (basesoc_sdram_choose_req_request[3]) begin
                            basesoc_sdram_choose_req_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (basesoc_sdram_choose_req_request[2]) begin
                    basesoc_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (basesoc_sdram_choose_req_request[3]) begin
                        basesoc_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (basesoc_sdram_choose_req_request[0]) begin
                            basesoc_sdram_choose_req_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (basesoc_sdram_choose_req_request[3]) begin
                    basesoc_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (basesoc_sdram_choose_req_request[0]) begin
                        basesoc_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (basesoc_sdram_choose_req_request[1]) begin
                            basesoc_sdram_choose_req_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (basesoc_sdram_choose_req_request[0]) begin
                    basesoc_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (basesoc_sdram_choose_req_request[1]) begin
                        basesoc_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (basesoc_sdram_choose_req_request[2]) begin
                            basesoc_sdram_choose_req_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    basesoc_sdram_dfi_p0_cs_n <= 1'd0;
    basesoc_sdram_dfi_p0_bank <= self0;
    basesoc_sdram_dfi_p0_address <= self1;
    basesoc_sdram_dfi_p0_cas_n <= (~self2);
    basesoc_sdram_dfi_p0_ras_n <= (~self3);
    basesoc_sdram_dfi_p0_we_n <= (~self4);
    basesoc_sdram_dfi_p0_rddata_en <= self5;
    basesoc_sdram_dfi_p0_wrdata_en <= self6;
    basesoc_sdram_dfi_p1_cs_n <= 1'd0;
    basesoc_sdram_dfi_p1_bank <= self7;
    basesoc_sdram_dfi_p1_address <= self8;
    basesoc_sdram_dfi_p1_cas_n <= (~self9);
    basesoc_sdram_dfi_p1_ras_n <= (~self10);
    basesoc_sdram_dfi_p1_we_n <= (~self11);
    basesoc_sdram_dfi_p1_rddata_en <= self12;
    basesoc_sdram_dfi_p1_wrdata_en <= self13;
    if (basesoc_sdram_trrdcon_valid) begin
        basesoc_sdram_trrdcon_count <= 1'd1;
        if (1'd0) begin
            basesoc_sdram_trrdcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_trrdcon_ready)) begin
            basesoc_sdram_trrdcon_count <= (basesoc_sdram_trrdcon_count - 1'd1);
            if ((basesoc_sdram_trrdcon_count == 1'd1)) begin
                basesoc_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_tccdcon_valid) begin
        basesoc_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            basesoc_sdram_tccdcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_tccdcon_ready)) begin
            basesoc_sdram_tccdcon_count <= (basesoc_sdram_tccdcon_count - 1'd1);
            if ((basesoc_sdram_tccdcon_count == 1'd1)) begin
                basesoc_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_twtrcon_valid) begin
        basesoc_sdram_twtrcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_twtrcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_twtrcon_ready)) begin
            basesoc_sdram_twtrcon_count <= (basesoc_sdram_twtrcon_count - 1'd1);
            if ((basesoc_sdram_twtrcon_count == 1'd1)) begin
                basesoc_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    multiplexer_state <= multiplexer_next_state;
    new_master_wdata_ready0 <= ((((1'd0 | ((roundrobin0_grant == 1'd0) & basesoc_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 1'd0) & basesoc_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 1'd0) & basesoc_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 1'd0) & basesoc_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready1 <= ((((1'd0 | ((roundrobin0_grant == 1'd1) & basesoc_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 1'd1) & basesoc_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 1'd1) & basesoc_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 1'd1) & basesoc_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready2 <= ((((1'd0 | ((roundrobin0_grant == 2'd2) & basesoc_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 2'd2) & basesoc_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 2'd2) & basesoc_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 2'd2) & basesoc_sdram_interface_bank3_wdata_ready));
    new_master_wdata_ready3 <= ((((1'd0 | ((roundrobin0_grant == 2'd3) & basesoc_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 2'd3) & basesoc_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 2'd3) & basesoc_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 2'd3) & basesoc_sdram_interface_bank3_wdata_ready));
    new_master_rdata_valid0 <= ((((1'd0 | ((roundrobin0_grant == 1'd0) & basesoc_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 1'd0) & basesoc_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 1'd0) & basesoc_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 1'd0) & basesoc_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid1 <= new_master_rdata_valid0;
    new_master_rdata_valid2 <= new_master_rdata_valid1;
    new_master_rdata_valid3 <= new_master_rdata_valid2;
    new_master_rdata_valid4 <= ((((1'd0 | ((roundrobin0_grant == 1'd1) & basesoc_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 1'd1) & basesoc_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 1'd1) & basesoc_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 1'd1) & basesoc_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid5 <= new_master_rdata_valid4;
    new_master_rdata_valid6 <= new_master_rdata_valid5;
    new_master_rdata_valid7 <= new_master_rdata_valid6;
    new_master_rdata_valid8 <= ((((1'd0 | ((roundrobin0_grant == 2'd2) & basesoc_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 2'd2) & basesoc_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 2'd2) & basesoc_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 2'd2) & basesoc_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid9 <= new_master_rdata_valid8;
    new_master_rdata_valid10 <= new_master_rdata_valid9;
    new_master_rdata_valid11 <= new_master_rdata_valid10;
    new_master_rdata_valid12 <= ((((1'd0 | ((roundrobin0_grant == 2'd3) & basesoc_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 2'd3) & basesoc_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 2'd3) & basesoc_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 2'd3) & basesoc_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid13 <= new_master_rdata_valid12;
    new_master_rdata_valid14 <= new_master_rdata_valid13;
    new_master_rdata_valid15 <= new_master_rdata_valid14;
    if (roundrobin0_ce) begin
        case (roundrobin0_grant)
            1'd0: begin
                if (roundrobin0_request[1]) begin
                    roundrobin0_grant <= 1'd1;
                end else begin
                    if (roundrobin0_request[2]) begin
                        roundrobin0_grant <= 2'd2;
                    end else begin
                        if (roundrobin0_request[3]) begin
                            roundrobin0_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin0_request[2]) begin
                    roundrobin0_grant <= 2'd2;
                end else begin
                    if (roundrobin0_request[3]) begin
                        roundrobin0_grant <= 2'd3;
                    end else begin
                        if (roundrobin0_request[0]) begin
                            roundrobin0_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin0_request[3]) begin
                    roundrobin0_grant <= 2'd3;
                end else begin
                    if (roundrobin0_request[0]) begin
                        roundrobin0_grant <= 1'd0;
                    end else begin
                        if (roundrobin0_request[1]) begin
                            roundrobin0_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin0_request[0]) begin
                    roundrobin0_grant <= 1'd0;
                end else begin
                    if (roundrobin0_request[1]) begin
                        roundrobin0_grant <= 1'd1;
                    end else begin
                        if (roundrobin0_request[2]) begin
                            roundrobin0_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (roundrobin1_ce) begin
        case (roundrobin1_grant)
            1'd0: begin
                if (roundrobin1_request[1]) begin
                    roundrobin1_grant <= 1'd1;
                end else begin
                    if (roundrobin1_request[2]) begin
                        roundrobin1_grant <= 2'd2;
                    end else begin
                        if (roundrobin1_request[3]) begin
                            roundrobin1_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin1_request[2]) begin
                    roundrobin1_grant <= 2'd2;
                end else begin
                    if (roundrobin1_request[3]) begin
                        roundrobin1_grant <= 2'd3;
                    end else begin
                        if (roundrobin1_request[0]) begin
                            roundrobin1_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin1_request[3]) begin
                    roundrobin1_grant <= 2'd3;
                end else begin
                    if (roundrobin1_request[0]) begin
                        roundrobin1_grant <= 1'd0;
                    end else begin
                        if (roundrobin1_request[1]) begin
                            roundrobin1_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin1_request[0]) begin
                    roundrobin1_grant <= 1'd0;
                end else begin
                    if (roundrobin1_request[1]) begin
                        roundrobin1_grant <= 1'd1;
                    end else begin
                        if (roundrobin1_request[2]) begin
                            roundrobin1_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (roundrobin2_ce) begin
        case (roundrobin2_grant)
            1'd0: begin
                if (roundrobin2_request[1]) begin
                    roundrobin2_grant <= 1'd1;
                end else begin
                    if (roundrobin2_request[2]) begin
                        roundrobin2_grant <= 2'd2;
                    end else begin
                        if (roundrobin2_request[3]) begin
                            roundrobin2_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin2_request[2]) begin
                    roundrobin2_grant <= 2'd2;
                end else begin
                    if (roundrobin2_request[3]) begin
                        roundrobin2_grant <= 2'd3;
                    end else begin
                        if (roundrobin2_request[0]) begin
                            roundrobin2_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin2_request[3]) begin
                    roundrobin2_grant <= 2'd3;
                end else begin
                    if (roundrobin2_request[0]) begin
                        roundrobin2_grant <= 1'd0;
                    end else begin
                        if (roundrobin2_request[1]) begin
                            roundrobin2_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin2_request[0]) begin
                    roundrobin2_grant <= 1'd0;
                end else begin
                    if (roundrobin2_request[1]) begin
                        roundrobin2_grant <= 1'd1;
                    end else begin
                        if (roundrobin2_request[2]) begin
                            roundrobin2_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (roundrobin3_ce) begin
        case (roundrobin3_grant)
            1'd0: begin
                if (roundrobin3_request[1]) begin
                    roundrobin3_grant <= 1'd1;
                end else begin
                    if (roundrobin3_request[2]) begin
                        roundrobin3_grant <= 2'd2;
                    end else begin
                        if (roundrobin3_request[3]) begin
                            roundrobin3_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (roundrobin3_request[2]) begin
                    roundrobin3_grant <= 2'd2;
                end else begin
                    if (roundrobin3_request[3]) begin
                        roundrobin3_grant <= 2'd3;
                    end else begin
                        if (roundrobin3_request[0]) begin
                            roundrobin3_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (roundrobin3_request[3]) begin
                    roundrobin3_grant <= 2'd3;
                end else begin
                    if (roundrobin3_request[0]) begin
                        roundrobin3_grant <= 1'd0;
                    end else begin
                        if (roundrobin3_request[1]) begin
                            roundrobin3_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (roundrobin3_request[0]) begin
                    roundrobin3_grant <= 1'd0;
                end else begin
                    if (roundrobin3_request[1]) begin
                        roundrobin3_grant <= 1'd1;
                    end else begin
                        if (roundrobin3_request[2]) begin
                            roundrobin3_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    litedramwishbone2native_state <= litedramwishbone2native_next_state;
    if (basesoc_aborted_litedramwishbone2native_next_value_ce) begin
        basesoc_aborted <= basesoc_aborted_litedramwishbone2native_next_value;
    end
    if (((basesoc_videoframebuffer_dma_res_fifo_syncfifo_we & basesoc_videoframebuffer_dma_res_fifo_syncfifo_writable) & (~basesoc_videoframebuffer_dma_res_fifo_replace))) begin
        basesoc_videoframebuffer_dma_res_fifo_produce <= (basesoc_videoframebuffer_dma_res_fifo_produce + 1'd1);
    end
    if (basesoc_videoframebuffer_dma_res_fifo_do_read) begin
        basesoc_videoframebuffer_dma_res_fifo_consume <= (basesoc_videoframebuffer_dma_res_fifo_consume + 1'd1);
    end
    if (((basesoc_videoframebuffer_dma_res_fifo_syncfifo_we & basesoc_videoframebuffer_dma_res_fifo_syncfifo_writable) & (~basesoc_videoframebuffer_dma_res_fifo_replace))) begin
        if ((~basesoc_videoframebuffer_dma_res_fifo_do_read)) begin
            basesoc_videoframebuffer_dma_res_fifo_level <= (basesoc_videoframebuffer_dma_res_fifo_level + 1'd1);
        end
    end else begin
        if (basesoc_videoframebuffer_dma_res_fifo_do_read) begin
            basesoc_videoframebuffer_dma_res_fifo_level <= (basesoc_videoframebuffer_dma_res_fifo_level - 1'd1);
        end
    end
    if (basesoc_videoframebuffer_dma_fifo_syncfifo_re) begin
        basesoc_videoframebuffer_dma_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_videoframebuffer_dma_fifo_re) begin
            basesoc_videoframebuffer_dma_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_videoframebuffer_dma_fifo_syncfifo_we & basesoc_videoframebuffer_dma_fifo_syncfifo_writable) & (~basesoc_videoframebuffer_dma_fifo_replace))) begin
        basesoc_videoframebuffer_dma_fifo_produce <= (basesoc_videoframebuffer_dma_fifo_produce + 1'd1);
    end
    if (basesoc_videoframebuffer_dma_fifo_do_read) begin
        basesoc_videoframebuffer_dma_fifo_consume <= (basesoc_videoframebuffer_dma_fifo_consume + 1'd1);
    end
    if (((basesoc_videoframebuffer_dma_fifo_syncfifo_we & basesoc_videoframebuffer_dma_fifo_syncfifo_writable) & (~basesoc_videoframebuffer_dma_fifo_replace))) begin
        if ((~basesoc_videoframebuffer_dma_fifo_do_read)) begin
            basesoc_videoframebuffer_dma_fifo_level0 <= (basesoc_videoframebuffer_dma_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_videoframebuffer_dma_fifo_do_read) begin
            basesoc_videoframebuffer_dma_fifo_level0 <= (basesoc_videoframebuffer_dma_fifo_level0 - 1'd1);
        end
    end
    videoframebuffer_litedramdmareader_state <= videoframebuffer_litedramdmareader_next_state;
    if (basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value_ce) begin
        basesoc_videoframebuffer_litedramdmareader_offset <= basesoc_videoframebuffer_litedramdmareader_offset_litedramdmareader_next_value;
    end
    if (basesoc_videoframebuffer_litedramdmareader_reset) begin
        basesoc_videoframebuffer_litedramdmareader_offset <= 24'd0;
        videoframebuffer_litedramdmareader_state <= 2'd0;
    end
    if ((basesoc_videoframebuffer_conv_converter_source_valid & basesoc_videoframebuffer_conv_converter_source_ready)) begin
        if (basesoc_videoframebuffer_conv_converter_last) begin
            basesoc_videoframebuffer_conv_converter_mux <= 1'd0;
        end else begin
            basesoc_videoframebuffer_conv_converter_mux <= (basesoc_videoframebuffer_conv_converter_mux + 1'd1);
        end
    end
    basesoc_videoframebuffer_cdc_cdc_graycounter0_q_binary <= basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next_binary;
    basesoc_videoframebuffer_cdc_cdc_graycounter0_q <= basesoc_videoframebuffer_cdc_cdc_graycounter0_q_next;
    prev_complete_trigger <= apf_bridge_complete_trigger;
    if (status_we) begin
        status_status <= 1'd0;
    end
    if ((apf_bridge_complete_trigger & (~prev_complete_trigger))) begin
        status_status <= 1'd1;
    end
    if (csr0_interact_csr_re) begin
        interact_storage0 <= csr0_interact_csr_r;
    end
    if (csr0_interact_csr_we) begin
        csrstatus0_status <= 1'd0;
    end
    if (csr1_interact_csr_re) begin
        interact_storage1 <= csr1_interact_csr_r;
    end
    if (csr1_interact_csr_we) begin
        csrstatus1_status <= 1'd0;
    end
    if (csr2_interact_csr_re) begin
        interact_storage2 <= csr2_interact_csr_r;
    end
    if (csr2_interact_csr_we) begin
        csrstatus2_status <= 1'd0;
    end
    if (csr3_interact_csr_re) begin
        interact_storage3 <= csr3_interact_csr_r;
    end
    if (csr3_interact_csr_we) begin
        csrstatus3_status <= 1'd0;
    end
    if (csr4_interact_csr_re) begin
        interact_storage4 <= csr4_interact_csr_r;
    end
    if (csr4_interact_csr_we) begin
        csrstatus4_status <= 1'd0;
    end
    if (csr5_interact_csr_re) begin
        interact_storage5 <= csr5_interact_csr_r;
    end
    if (csr5_interact_csr_we) begin
        csrstatus5_status <= 1'd0;
    end
    if (csr6_interact_csr_re) begin
        interact_storage6 <= csr6_interact_csr_r;
    end
    if (csr6_interact_csr_we) begin
        csrstatus6_status <= 1'd0;
    end
    if (csr7_interact_csr_re) begin
        interact_storage7 <= csr7_interact_csr_r;
    end
    if (csr7_interact_csr_we) begin
        csrstatus7_status <= 1'd0;
    end
    if (csr8_interact_csr_re) begin
        interact_storage8 <= csr8_interact_csr_r;
    end
    if (csr8_interact_csr_we) begin
        csrstatus8_status <= 1'd0;
    end
    if (csr9_interact_csr_re) begin
        interact_storage9 <= csr9_interact_csr_r;
    end
    if (csr9_interact_csr_we) begin
        csrstatus9_status <= 1'd0;
    end
    if (csr10_interact_csr_re) begin
        interact_storage10 <= csr10_interact_csr_r;
    end
    if (csr10_interact_csr_we) begin
        csrstatus10_status <= 1'd0;
    end
    if (csr11_interact_csr_re) begin
        interact_storage11 <= csr11_interact_csr_r;
    end
    if (csr11_interact_csr_we) begin
        csrstatus11_status <= 1'd0;
    end
    if (csr12_interact_csr_re) begin
        interact_storage12 <= csr12_interact_csr_r;
    end
    if (csr12_interact_csr_we) begin
        csrstatus12_status <= 1'd0;
    end
    if (csr13_interact_csr_re) begin
        interact_storage13 <= csr13_interact_csr_r;
    end
    if (csr13_interact_csr_we) begin
        csrstatus13_status <= 1'd0;
    end
    if (csr14_interact_csr_re) begin
        interact_storage14 <= csr14_interact_csr_r;
    end
    if (csr14_interact_csr_we) begin
        csrstatus14_status <= 1'd0;
    end
    if (csr15_interact_csr_re) begin
        interact_storage15 <= csr15_interact_csr_r;
    end
    if (csr15_interact_csr_we) begin
        csrstatus15_status <= 1'd0;
    end
    if (apf_interact_wr) begin
        case (apf_interact_address)
            1'd0: begin
                interact_storage0 <= apf_interact_data;
                csrstatus0_status <= 1'd1;
            end
            1'd1: begin
                interact_storage1 <= apf_interact_data;
                csrstatus1_status <= 1'd1;
            end
            2'd2: begin
                interact_storage2 <= apf_interact_data;
                csrstatus2_status <= 1'd1;
            end
            2'd3: begin
                interact_storage3 <= apf_interact_data;
                csrstatus3_status <= 1'd1;
            end
            3'd4: begin
                interact_storage4 <= apf_interact_data;
                csrstatus4_status <= 1'd1;
            end
            3'd5: begin
                interact_storage5 <= apf_interact_data;
                csrstatus5_status <= 1'd1;
            end
            3'd6: begin
                interact_storage6 <= apf_interact_data;
                csrstatus6_status <= 1'd1;
            end
            3'd7: begin
                interact_storage7 <= apf_interact_data;
                csrstatus7_status <= 1'd1;
            end
            4'd8: begin
                interact_storage8 <= apf_interact_data;
                csrstatus8_status <= 1'd1;
            end
            4'd9: begin
                interact_storage9 <= apf_interact_data;
                csrstatus9_status <= 1'd1;
            end
            4'd10: begin
                interact_storage10 <= apf_interact_data;
                csrstatus10_status <= 1'd1;
            end
            4'd11: begin
                interact_storage11 <= apf_interact_data;
                csrstatus11_status <= 1'd1;
            end
            4'd12: begin
                interact_storage12 <= apf_interact_data;
                csrstatus12_status <= 1'd1;
            end
            4'd13: begin
                interact_storage13 <= apf_interact_data;
                csrstatus13_status <= 1'd1;
            end
            4'd14: begin
                interact_storage14 <= apf_interact_data;
                csrstatus14_status <= 1'd1;
            end
            4'd15: begin
                interact_storage15 <= apf_interact_data;
                csrstatus15_status <= 1'd1;
            end
        endcase
    end
    case (apf_interact_address)
        1'd0: begin
            apf_interact_q <= interact_storage0;
        end
        1'd1: begin
            apf_interact_q <= interact_storage1;
        end
        2'd2: begin
            apf_interact_q <= interact_storage2;
        end
        2'd3: begin
            apf_interact_q <= interact_storage3;
        end
        3'd4: begin
            apf_interact_q <= interact_storage4;
        end
        3'd5: begin
            apf_interact_q <= interact_storage5;
        end
        3'd6: begin
            apf_interact_q <= interact_storage6;
        end
        3'd7: begin
            apf_interact_q <= interact_storage7;
        end
        4'd8: begin
            apf_interact_q <= interact_storage8;
        end
        4'd9: begin
            apf_interact_q <= interact_storage9;
        end
        4'd10: begin
            apf_interact_q <= interact_storage10;
        end
        4'd11: begin
            apf_interact_q <= interact_storage11;
        end
        4'd12: begin
            apf_interact_q <= interact_storage12;
        end
        4'd13: begin
            apf_interact_q <= interact_storage13;
        end
        4'd14: begin
            apf_interact_q <= interact_storage14;
        end
        4'd15: begin
            apf_interact_q <= interact_storage15;
        end
    endcase
    apfvideo_vblank <= (basesoc_vtg_source_payload_vcount >= 8'd240);
    apfvideo_prev_vblank_triggered <= apfvideo_vblank;
    if (apfvideo_we) begin
        apfvideo_vblank_triggered <= 1'd0;
    end
    if ((apfvideo_vblank & (~apfvideo_prev_vblank_triggered))) begin
        apfvideo_vblank_triggered <= 1'd1;
        apfvideo_frame_counter <= (apfvideo_frame_counter + 1'd1);
    end
    apfvideo_vblank_status <= apfvideo_vblank;
    {basesoc_tx_tick, basesoc_tx_phase} <= 28'd150384008;
    if (basesoc_tx_enable) begin
        {basesoc_tx_tick, basesoc_tx_phase} <= (basesoc_tx_phase + 28'd150384008);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (basesoc_tx_count_rs232phytx_next_value_ce0) begin
        basesoc_tx_count <= basesoc_tx_count_rs232phytx_next_value0;
    end
    if (basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (basesoc_tx_data_rs232phytx_next_value_ce2) begin
        basesoc_tx_data <= basesoc_tx_data_rs232phytx_next_value2;
    end
    basesoc_rx_rx_d <= basesoc_rx_rx;
    {basesoc_rx_tick, basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_rx_enable) begin
        {basesoc_rx_tick, basesoc_rx_phase} <= (basesoc_rx_phase + 28'd150384008);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        basesoc_rx_count <= basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        basesoc_rx_data <= basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (basesoc_uart_tx_clear) begin
        basesoc_uart_tx_pending <= 1'd0;
    end
    basesoc_uart_tx_trigger_d <= basesoc_uart_tx_trigger;
    if ((basesoc_uart_tx_trigger & (~basesoc_uart_tx_trigger_d))) begin
        basesoc_uart_tx_pending <= 1'd1;
    end
    if (basesoc_uart_rx_clear) begin
        basesoc_uart_rx_pending <= 1'd0;
    end
    basesoc_uart_rx_trigger_d <= basesoc_uart_rx_trigger;
    if ((basesoc_uart_rx_trigger & (~basesoc_uart_rx_trigger_d))) begin
        basesoc_uart_rx_pending <= 1'd1;
    end
    if (basesoc_uart_tx_fifo_syncfifo_re) begin
        basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_tx_fifo_re) begin
            basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_tx_fifo_do_read) begin
        basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        if ((~basesoc_uart_tx_fifo_do_read)) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_tx_fifo_do_read) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_uart_rx_fifo_syncfifo_re) begin
        basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_rx_fifo_re) begin
            basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_rx_fifo_do_read) begin
        basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        if ((~basesoc_uart_rx_fifo_do_read)) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_rx_fifo_do_read) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    if (interface1_dat_w_wishbone2csr_next_value_ce0) begin
        interface1_dat_w <= interface1_dat_w_wishbone2csr_next_value0;
    end
    if (interface1_adr_wishbone2csr_next_value_ce1) begin
        interface1_adr <= interface1_adr_wishbone2csr_next_value1;
    end
    if (interface1_we_wishbone2csr_next_value_ce2) begin
        interface1_we <= interface1_we_wishbone2csr_next_value2;
    end
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= out_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_playback_en0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= buffer_flush_w;
            end
            2'd3: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_buffer_fill_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_playback_en0_re) begin
        playback_en_storage <= csr_bankarray_csrbank0_playback_en0_r;
    end
    playback_en_re <= csr_bankarray_csrbank0_playback_en0_re;
    buffer_fill_re <= csr_bankarray_csrbank0_buffer_fill_re;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= request_read_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= request_write_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= request_getfile_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= request_openfile_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_slot_id0_w;
            end
            3'd5: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_data_offset0_w;
            end
            3'd6: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_transfer_length0_w;
            end
            3'd7: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ram_data_address0_w;
            end
            4'd8: begin
                csr_bankarray_interface1_bank_bus_dat_r <= file_size_w;
            end
            4'd9: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_status_w;
            end
            4'd10: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_current_address_w;
            end
            4'd11: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_command_result_code_w;
            end
            4'd12: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scaler_slot0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_slot_id0_re) begin
        slot_id_storage[15:0] <= csr_bankarray_csrbank1_slot_id0_r;
    end
    slot_id_re <= csr_bankarray_csrbank1_slot_id0_re;
    if (csr_bankarray_csrbank1_data_offset0_re) begin
        data_offset_storage[31:0] <= csr_bankarray_csrbank1_data_offset0_r;
    end
    data_offset_re <= csr_bankarray_csrbank1_data_offset0_re;
    if (csr_bankarray_csrbank1_transfer_length0_re) begin
        transfer_length_storage[31:0] <= csr_bankarray_csrbank1_transfer_length0_r;
    end
    transfer_length_re <= csr_bankarray_csrbank1_transfer_length0_re;
    if (csr_bankarray_csrbank1_ram_data_address0_re) begin
        ram_data_address_storage[31:0] <= csr_bankarray_csrbank1_ram_data_address0_r;
    end
    ram_data_address_re <= csr_bankarray_csrbank1_ram_data_address0_re;
    status_re <= csr_bankarray_csrbank1_status_re;
    current_address_re <= csr_bankarray_csrbank1_current_address_re;
    command_result_code_re <= csr_bankarray_csrbank1_command_result_code_re;
    if (csr_bankarray_csrbank1_scaler_slot0_re) begin
        scaler_slot_storage[3:0] <= csr_bankarray_csrbank1_scaler_slot0_r;
    end
    scaler_slot_re <= csr_bankarray_csrbank1_scaler_slot0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_id1_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_id0_w;
            end
        endcase
    end
    apfid_re <= csr_bankarray_csrbank2_id0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont1_key_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont2_key_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont3_key_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont4_key_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont1_joy_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont2_joy_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont3_joy_w;
            end
            3'd7: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont4_joy_w;
            end
            4'd8: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont1_trig_w;
            end
            4'd9: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont2_trig_w;
            end
            4'd10: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont3_trig_w;
            end
            4'd11: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_cont4_trig_w;
            end
        endcase
    end
    cont1_key_re <= csr_bankarray_csrbank3_cont1_key_re;
    cont2_key_re <= csr_bankarray_csrbank3_cont2_key_re;
    cont3_key_re <= csr_bankarray_csrbank3_cont3_key_re;
    cont4_key_re <= csr_bankarray_csrbank3_cont4_key_re;
    cont1_joy_re <= csr_bankarray_csrbank3_cont1_joy_re;
    cont2_joy_re <= csr_bankarray_csrbank3_cont2_joy_re;
    cont3_joy_re <= csr_bankarray_csrbank3_cont3_joy_re;
    cont4_joy_re <= csr_bankarray_csrbank3_cont4_joy_re;
    cont1_trig_re <= csr_bankarray_csrbank3_cont1_trig_re;
    cont2_trig_re <= csr_bankarray_csrbank3_cont2_trig_re;
    cont3_trig_re <= csr_bankarray_csrbank3_cont3_trig_re;
    cont4_trig_re <= csr_bankarray_csrbank3_cont4_trig_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr0_interact_csr_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed0_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr1_interact_csr_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed1_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr2_interact_csr_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed2_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr3_interact_csr_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed3_w;
            end
            4'd8: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr4_interact_csr_w;
            end
            4'd9: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed4_w;
            end
            4'd10: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr5_interact_csr_w;
            end
            4'd11: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed5_w;
            end
            4'd12: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr6_interact_csr_w;
            end
            4'd13: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed6_w;
            end
            4'd14: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr7_interact_csr_w;
            end
            4'd15: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed7_w;
            end
            5'd16: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr8_interact_csr_w;
            end
            5'd17: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed8_w;
            end
            5'd18: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr9_interact_csr_w;
            end
            5'd19: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed9_w;
            end
            5'd20: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr10_interact_csr_w;
            end
            5'd21: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed10_w;
            end
            5'd22: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr11_interact_csr_w;
            end
            5'd23: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed11_w;
            end
            5'd24: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr12_interact_csr_w;
            end
            5'd25: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed12_w;
            end
            5'd26: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr13_interact_csr_w;
            end
            5'd27: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed13_w;
            end
            5'd28: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr14_interact_csr_w;
            end
            5'd29: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed14_w;
            end
            5'd30: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr15_interact_csr_w;
            end
            5'd31: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_interact_changed15_w;
            end
        endcase
    end
    csrstatus0_re <= csr_bankarray_csrbank4_interact_changed0_re;
    csrstatus1_re <= csr_bankarray_csrbank4_interact_changed1_re;
    csrstatus2_re <= csr_bankarray_csrbank4_interact_changed2_re;
    csrstatus3_re <= csr_bankarray_csrbank4_interact_changed3_re;
    csrstatus4_re <= csr_bankarray_csrbank4_interact_changed4_re;
    csrstatus5_re <= csr_bankarray_csrbank4_interact_changed5_re;
    csrstatus6_re <= csr_bankarray_csrbank4_interact_changed6_re;
    csrstatus7_re <= csr_bankarray_csrbank4_interact_changed7_re;
    csrstatus8_re <= csr_bankarray_csrbank4_interact_changed8_re;
    csrstatus9_re <= csr_bankarray_csrbank4_interact_changed9_re;
    csrstatus10_re <= csr_bankarray_csrbank4_interact_changed10_re;
    csrstatus11_re <= csr_bankarray_csrbank4_interact_changed11_re;
    csrstatus12_re <= csr_bankarray_csrbank4_interact_changed12_re;
    csrstatus13_re <= csr_bankarray_csrbank4_interact_changed13_re;
    csrstatus14_re <= csr_bankarray_csrbank4_interact_changed14_re;
    csrstatus15_re <= csr_bankarray_csrbank4_interact_changed15_re;
    csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank5_sel) begin
        case (csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_unix_seconds_w;
            end
            1'd1: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_date_bcd_w;
            end
            2'd2: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_time_bcd_w;
            end
        endcase
    end
    unix_seconds_re <= csr_bankarray_csrbank5_unix_seconds_re;
    date_bcd_re <= csr_bankarray_csrbank5_date_bcd_re;
    time_bcd_re <= csr_bankarray_csrbank5_time_bcd_re;
    csr_bankarray_interface6_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank6_sel) begin
        case (csr_bankarray_interface6_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface6_bank_bus_dat_r <= csr_bankarray_csrbank6_video_w;
            end
        endcase
    end
    apfvideo_re <= csr_bankarray_csrbank6_video_re;
    csr_bankarray_interface7_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank7_sel) begin
        case (csr_bankarray_interface7_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface7_bank_bus_dat_r <= csr_bankarray_csrbank7_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank7_reset0_re) begin
        basesoc_basesoc_reset_storage[1:0] <= csr_bankarray_csrbank7_reset0_r;
    end
    basesoc_basesoc_reset_re <= csr_bankarray_csrbank7_reset0_re;
    if (csr_bankarray_csrbank7_scratch0_re) begin
        basesoc_basesoc_scratch_storage[31:0] <= csr_bankarray_csrbank7_scratch0_r;
    end
    basesoc_basesoc_scratch_re <= csr_bankarray_csrbank7_scratch0_re;
    basesoc_basesoc_bus_errors_re <= csr_bankarray_csrbank7_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface8_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank8_sel) begin
        case (csr_bankarray_interface8_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_control0_w;
            end
            1'd1: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi0_command0_w;
            end
            2'd2: begin
                csr_bankarray_interface8_bank_bus_dat_r <= basesoc_sdram_phaseinjector0_command_issue_w;
            end
            2'd3: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi0_address0_w;
            end
            3'd4: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi0_rddata_w;
            end
            3'd7: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi1_command0_w;
            end
            4'd8: begin
                csr_bankarray_interface8_bank_bus_dat_r <= basesoc_sdram_phaseinjector1_command_issue_w;
            end
            4'd9: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi1_address0_w;
            end
            4'd10: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi1_baddress0_w;
            end
            4'd11: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi1_wrdata0_w;
            end
            4'd12: begin
                csr_bankarray_interface8_bank_bus_dat_r <= csr_bankarray_csrbank8_dfii_pi1_rddata_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank8_dfii_control0_re) begin
        basesoc_sdram_storage[3:0] <= csr_bankarray_csrbank8_dfii_control0_r;
    end
    basesoc_sdram_re <= csr_bankarray_csrbank8_dfii_control0_re;
    if (csr_bankarray_csrbank8_dfii_pi0_command0_re) begin
        basesoc_sdram_phaseinjector0_command_storage[7:0] <= csr_bankarray_csrbank8_dfii_pi0_command0_r;
    end
    basesoc_sdram_phaseinjector0_command_re <= csr_bankarray_csrbank8_dfii_pi0_command0_re;
    if (csr_bankarray_csrbank8_dfii_pi0_address0_re) begin
        basesoc_sdram_phaseinjector0_address_storage[12:0] <= csr_bankarray_csrbank8_dfii_pi0_address0_r;
    end
    basesoc_sdram_phaseinjector0_address_re <= csr_bankarray_csrbank8_dfii_pi0_address0_re;
    if (csr_bankarray_csrbank8_dfii_pi0_baddress0_re) begin
        basesoc_sdram_phaseinjector0_baddress_storage[1:0] <= csr_bankarray_csrbank8_dfii_pi0_baddress0_r;
    end
    basesoc_sdram_phaseinjector0_baddress_re <= csr_bankarray_csrbank8_dfii_pi0_baddress0_re;
    if (csr_bankarray_csrbank8_dfii_pi0_wrdata0_re) begin
        basesoc_sdram_phaseinjector0_wrdata_storage[15:0] <= csr_bankarray_csrbank8_dfii_pi0_wrdata0_r;
    end
    basesoc_sdram_phaseinjector0_wrdata_re <= csr_bankarray_csrbank8_dfii_pi0_wrdata0_re;
    basesoc_sdram_phaseinjector0_rddata_re <= csr_bankarray_csrbank8_dfii_pi0_rddata_re;
    if (csr_bankarray_csrbank8_dfii_pi1_command0_re) begin
        basesoc_sdram_phaseinjector1_command_storage[7:0] <= csr_bankarray_csrbank8_dfii_pi1_command0_r;
    end
    basesoc_sdram_phaseinjector1_command_re <= csr_bankarray_csrbank8_dfii_pi1_command0_re;
    if (csr_bankarray_csrbank8_dfii_pi1_address0_re) begin
        basesoc_sdram_phaseinjector1_address_storage[12:0] <= csr_bankarray_csrbank8_dfii_pi1_address0_r;
    end
    basesoc_sdram_phaseinjector1_address_re <= csr_bankarray_csrbank8_dfii_pi1_address0_re;
    if (csr_bankarray_csrbank8_dfii_pi1_baddress0_re) begin
        basesoc_sdram_phaseinjector1_baddress_storage[1:0] <= csr_bankarray_csrbank8_dfii_pi1_baddress0_r;
    end
    basesoc_sdram_phaseinjector1_baddress_re <= csr_bankarray_csrbank8_dfii_pi1_baddress0_re;
    if (csr_bankarray_csrbank8_dfii_pi1_wrdata0_re) begin
        basesoc_sdram_phaseinjector1_wrdata_storage[15:0] <= csr_bankarray_csrbank8_dfii_pi1_wrdata0_r;
    end
    basesoc_sdram_phaseinjector1_wrdata_re <= csr_bankarray_csrbank8_dfii_pi1_wrdata0_re;
    basesoc_sdram_phaseinjector1_rddata_re <= csr_bankarray_csrbank8_dfii_pi1_rddata_re;
    csr_bankarray_interface9_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank9_sel) begin
        case (csr_bankarray_interface9_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_value_w;
            end
            3'd5: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_ev_enable0_w;
            end
            4'd8: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_uptime_latch0_w;
            end
            4'd9: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_uptime_cycles1_w;
            end
            4'd10: begin
                csr_bankarray_interface9_bank_bus_dat_r <= csr_bankarray_csrbank9_uptime_cycles0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank9_load0_re) begin
        basesoc_basesoc_load_storage[31:0] <= csr_bankarray_csrbank9_load0_r;
    end
    basesoc_basesoc_load_re <= csr_bankarray_csrbank9_load0_re;
    if (csr_bankarray_csrbank9_reload0_re) begin
        basesoc_basesoc_reload_storage[31:0] <= csr_bankarray_csrbank9_reload0_r;
    end
    basesoc_basesoc_reload_re <= csr_bankarray_csrbank9_reload0_re;
    if (csr_bankarray_csrbank9_en0_re) begin
        basesoc_basesoc_en_storage <= csr_bankarray_csrbank9_en0_r;
    end
    basesoc_basesoc_en_re <= csr_bankarray_csrbank9_en0_re;
    if (csr_bankarray_csrbank9_update_value0_re) begin
        basesoc_basesoc_update_value_storage <= csr_bankarray_csrbank9_update_value0_r;
    end
    basesoc_basesoc_update_value_re <= csr_bankarray_csrbank9_update_value0_re;
    basesoc_basesoc_value_re <= csr_bankarray_csrbank9_value_re;
    basesoc_basesoc_status_re <= csr_bankarray_csrbank9_ev_status_re;
    if (csr_bankarray_csrbank9_ev_pending_re) begin
        basesoc_basesoc_pending_r <= csr_bankarray_csrbank9_ev_pending_r;
    end
    basesoc_basesoc_pending_re <= csr_bankarray_csrbank9_ev_pending_re;
    if (csr_bankarray_csrbank9_ev_enable0_re) begin
        basesoc_basesoc_enable_storage <= csr_bankarray_csrbank9_ev_enable0_r;
    end
    basesoc_basesoc_enable_re <= csr_bankarray_csrbank9_ev_enable0_re;
    if (csr_bankarray_csrbank9_uptime_latch0_re) begin
        basesoc_uptime_latch_storage <= csr_bankarray_csrbank9_uptime_latch0_r;
    end
    basesoc_uptime_latch_re <= csr_bankarray_csrbank9_uptime_latch0_re;
    basesoc_uptime_cycles_re <= csr_bankarray_csrbank9_uptime_cycles0_re;
    csr_bankarray_interface10_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank10_sel) begin
        case (csr_bankarray_interface10_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface10_bank_bus_dat_r <= basesoc_uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface10_bank_bus_dat_r <= csr_bankarray_csrbank10_rxfull_w;
            end
        endcase
    end
    basesoc_uart_txfull_re <= csr_bankarray_csrbank10_txfull_re;
    basesoc_uart_rxempty_re <= csr_bankarray_csrbank10_rxempty_re;
    basesoc_uart_status_re <= csr_bankarray_csrbank10_ev_status_re;
    if (csr_bankarray_csrbank10_ev_pending_re) begin
        basesoc_uart_pending_r[1:0] <= csr_bankarray_csrbank10_ev_pending_r;
    end
    basesoc_uart_pending_re <= csr_bankarray_csrbank10_ev_pending_re;
    if (csr_bankarray_csrbank10_ev_enable0_re) begin
        basesoc_uart_enable_storage[1:0] <= csr_bankarray_csrbank10_ev_enable0_r;
    end
    basesoc_uart_enable_re <= csr_bankarray_csrbank10_ev_enable0_re;
    basesoc_uart_txempty_re <= csr_bankarray_csrbank10_txempty_re;
    basesoc_uart_rxfull_re <= csr_bankarray_csrbank10_rxfull_re;
    csr_bankarray_interface11_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank11_sel) begin
        case (csr_bankarray_interface11_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface11_bank_bus_dat_r <= csr_bankarray_csrbank11_dma_base0_w;
            end
            1'd1: begin
                csr_bankarray_interface11_bank_bus_dat_r <= csr_bankarray_csrbank11_dma_length0_w;
            end
            2'd2: begin
                csr_bankarray_interface11_bank_bus_dat_r <= csr_bankarray_csrbank11_dma_enable0_w;
            end
            2'd3: begin
                csr_bankarray_interface11_bank_bus_dat_r <= csr_bankarray_csrbank11_dma_done_w;
            end
            3'd4: begin
                csr_bankarray_interface11_bank_bus_dat_r <= csr_bankarray_csrbank11_dma_loop0_w;
            end
            3'd5: begin
                csr_bankarray_interface11_bank_bus_dat_r <= csr_bankarray_csrbank11_dma_offset_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank11_dma_base0_re) begin
        basesoc_videoframebuffer_litedramdmareader_base_storage[31:0] <= csr_bankarray_csrbank11_dma_base0_r;
    end
    basesoc_videoframebuffer_litedramdmareader_base_re <= csr_bankarray_csrbank11_dma_base0_re;
    if (csr_bankarray_csrbank11_dma_length0_re) begin
        basesoc_videoframebuffer_litedramdmareader_length_storage[31:0] <= csr_bankarray_csrbank11_dma_length0_r;
    end
    basesoc_videoframebuffer_litedramdmareader_length_re <= csr_bankarray_csrbank11_dma_length0_re;
    if (csr_bankarray_csrbank11_dma_enable0_re) begin
        basesoc_videoframebuffer_litedramdmareader_enable_storage <= csr_bankarray_csrbank11_dma_enable0_r;
    end
    basesoc_videoframebuffer_litedramdmareader_enable_re <= csr_bankarray_csrbank11_dma_enable0_re;
    basesoc_videoframebuffer_litedramdmareader_done_re <= csr_bankarray_csrbank11_dma_done_re;
    if (csr_bankarray_csrbank11_dma_loop0_re) begin
        basesoc_videoframebuffer_litedramdmareader_loop_storage <= csr_bankarray_csrbank11_dma_loop0_r;
    end
    basesoc_videoframebuffer_litedramdmareader_loop_re <= csr_bankarray_csrbank11_dma_loop0_re;
    basesoc_videoframebuffer_litedramdmareader_offset_re <= csr_bankarray_csrbank11_dma_offset_re;
    csr_bankarray_interface12_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank12_sel) begin
        case (csr_bankarray_interface12_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_enable0_w;
            end
            1'd1: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_hres0_w;
            end
            2'd2: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_hsync_start0_w;
            end
            2'd3: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_hsync_end0_w;
            end
            3'd4: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_hscan0_w;
            end
            3'd5: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_vres0_w;
            end
            3'd6: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_vsync_start0_w;
            end
            3'd7: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_vsync_end0_w;
            end
            4'd8: begin
                csr_bankarray_interface12_bank_bus_dat_r <= csr_bankarray_csrbank12_vscan0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank12_enable0_re) begin
        basesoc_vtg_enable_storage <= csr_bankarray_csrbank12_enable0_r;
    end
    basesoc_vtg_enable_re <= csr_bankarray_csrbank12_enable0_re;
    if (csr_bankarray_csrbank12_hres0_re) begin
        basesoc_vtg_hres_storage[11:0] <= csr_bankarray_csrbank12_hres0_r;
    end
    basesoc_vtg_hres_re <= csr_bankarray_csrbank12_hres0_re;
    if (csr_bankarray_csrbank12_hsync_start0_re) begin
        basesoc_vtg_hsync_start_storage[11:0] <= csr_bankarray_csrbank12_hsync_start0_r;
    end
    basesoc_vtg_hsync_start_re <= csr_bankarray_csrbank12_hsync_start0_re;
    if (csr_bankarray_csrbank12_hsync_end0_re) begin
        basesoc_vtg_hsync_end_storage[11:0] <= csr_bankarray_csrbank12_hsync_end0_r;
    end
    basesoc_vtg_hsync_end_re <= csr_bankarray_csrbank12_hsync_end0_re;
    if (csr_bankarray_csrbank12_hscan0_re) begin
        basesoc_vtg_hscan_storage[11:0] <= csr_bankarray_csrbank12_hscan0_r;
    end
    basesoc_vtg_hscan_re <= csr_bankarray_csrbank12_hscan0_re;
    if (csr_bankarray_csrbank12_vres0_re) begin
        basesoc_vtg_vres_storage[11:0] <= csr_bankarray_csrbank12_vres0_r;
    end
    basesoc_vtg_vres_re <= csr_bankarray_csrbank12_vres0_re;
    if (csr_bankarray_csrbank12_vsync_start0_re) begin
        basesoc_vtg_vsync_start_storage[11:0] <= csr_bankarray_csrbank12_vsync_start0_r;
    end
    basesoc_vtg_vsync_start_re <= csr_bankarray_csrbank12_vsync_start0_re;
    if (csr_bankarray_csrbank12_vsync_end0_re) begin
        basesoc_vtg_vsync_end_storage[11:0] <= csr_bankarray_csrbank12_vsync_end0_r;
    end
    basesoc_vtg_vsync_end_re <= csr_bankarray_csrbank12_vsync_end0_re;
    if (csr_bankarray_csrbank12_vscan0_re) begin
        basesoc_vtg_vscan_storage[11:0] <= csr_bankarray_csrbank12_vscan0_r;
    end
    basesoc_vtg_vscan_re <= csr_bankarray_csrbank12_vscan0_re;
    if (sys_rst) begin
        basesoc_basesoc_reset_storage <= 2'd0;
        basesoc_basesoc_reset_re <= 1'd0;
        basesoc_basesoc_scratch_storage <= 32'd305419896;
        basesoc_basesoc_scratch_re <= 1'd0;
        basesoc_basesoc_bus_errors_re <= 1'd0;
        basesoc_basesoc_bus_errors <= 32'd0;
        basesoc_basesoc_basesoc_ram_bus_ack <= 1'd0;
        basesoc_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        basesoc_basesoc_load_storage <= 32'd0;
        basesoc_basesoc_load_re <= 1'd0;
        basesoc_basesoc_reload_storage <= 32'd0;
        basesoc_basesoc_reload_re <= 1'd0;
        basesoc_basesoc_en_storage <= 1'd0;
        basesoc_basesoc_en_re <= 1'd0;
        basesoc_basesoc_update_value_storage <= 1'd0;
        basesoc_basesoc_update_value_re <= 1'd0;
        basesoc_basesoc_value_status <= 32'd0;
        basesoc_basesoc_value_re <= 1'd0;
        basesoc_basesoc_zero_pending <= 1'd0;
        basesoc_basesoc_zero_trigger_d <= 1'd0;
        basesoc_basesoc_status_re <= 1'd0;
        basesoc_basesoc_pending_re <= 1'd0;
        basesoc_basesoc_pending_r <= 1'd0;
        basesoc_basesoc_enable_storage <= 1'd0;
        basesoc_basesoc_enable_re <= 1'd0;
        basesoc_basesoc_value <= 32'd0;
        basesoc_uptime_latch_storage <= 1'd0;
        basesoc_uptime_latch_re <= 1'd0;
        basesoc_uptime_cycles_status <= 64'd0;
        basesoc_uptime_cycles_re <= 1'd0;
        phase_sys <= 1'd0;
        basesoc_sdram_storage <= 4'd1;
        basesoc_sdram_re <= 1'd0;
        basesoc_sdram_phaseinjector0_command_storage <= 8'd0;
        basesoc_sdram_phaseinjector0_command_re <= 1'd0;
        basesoc_sdram_phaseinjector0_address_re <= 1'd0;
        basesoc_sdram_phaseinjector0_baddress_re <= 1'd0;
        basesoc_sdram_phaseinjector0_wrdata_re <= 1'd0;
        basesoc_sdram_phaseinjector0_rddata_status <= 16'd0;
        basesoc_sdram_phaseinjector0_rddata_re <= 1'd0;
        basesoc_sdram_phaseinjector1_command_storage <= 8'd0;
        basesoc_sdram_phaseinjector1_command_re <= 1'd0;
        basesoc_sdram_phaseinjector1_address_re <= 1'd0;
        basesoc_sdram_phaseinjector1_baddress_re <= 1'd0;
        basesoc_sdram_phaseinjector1_wrdata_re <= 1'd0;
        basesoc_sdram_phaseinjector1_rddata_status <= 16'd0;
        basesoc_sdram_phaseinjector1_rddata_re <= 1'd0;
        basesoc_sdram_dfi_p0_address <= 13'd0;
        basesoc_sdram_dfi_p0_bank <= 2'd0;
        basesoc_sdram_dfi_p0_cas_n <= 1'd1;
        basesoc_sdram_dfi_p0_cs_n <= 1'd1;
        basesoc_sdram_dfi_p0_ras_n <= 1'd1;
        basesoc_sdram_dfi_p0_we_n <= 1'd1;
        basesoc_sdram_dfi_p0_wrdata_en <= 1'd0;
        basesoc_sdram_dfi_p0_rddata_en <= 1'd0;
        basesoc_sdram_dfi_p1_address <= 13'd0;
        basesoc_sdram_dfi_p1_bank <= 2'd0;
        basesoc_sdram_dfi_p1_cas_n <= 1'd1;
        basesoc_sdram_dfi_p1_cs_n <= 1'd1;
        basesoc_sdram_dfi_p1_ras_n <= 1'd1;
        basesoc_sdram_dfi_p1_we_n <= 1'd1;
        basesoc_sdram_dfi_p1_wrdata_en <= 1'd0;
        basesoc_sdram_dfi_p1_rddata_en <= 1'd0;
        basesoc_sdram_cmd_payload_a <= 13'd0;
        basesoc_sdram_cmd_payload_ba <= 2'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd0;
        basesoc_sdram_cmd_payload_we <= 1'd0;
        basesoc_sdram_timer_count1 <= 9'd446;
        basesoc_sdram_postponer_req_o <= 1'd0;
        basesoc_sdram_postponer_count <= 1'd0;
        basesoc_sdram_sequencer_done1 <= 1'd0;
        basesoc_sdram_sequencer_trigger <= 4'd0;
        basesoc_sdram_sequencer_count <= 1'd0;
        basesoc_sdram_bankmachine0_level <= 4'd0;
        basesoc_sdram_bankmachine0_produce <= 3'd0;
        basesoc_sdram_bankmachine0_consume <= 3'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= 22'd0;
        basesoc_sdram_bankmachine0_row <= 13'd0;
        basesoc_sdram_bankmachine0_row_opened <= 1'd0;
        basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_twtpcon_count <= 3'd0;
        basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_trccon_count <= 3'd0;
        basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_trascon_count <= 2'd0;
        basesoc_sdram_bankmachine1_level <= 4'd0;
        basesoc_sdram_bankmachine1_produce <= 3'd0;
        basesoc_sdram_bankmachine1_consume <= 3'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= 22'd0;
        basesoc_sdram_bankmachine1_row <= 13'd0;
        basesoc_sdram_bankmachine1_row_opened <= 1'd0;
        basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_twtpcon_count <= 3'd0;
        basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_trccon_count <= 3'd0;
        basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_trascon_count <= 2'd0;
        basesoc_sdram_bankmachine2_level <= 4'd0;
        basesoc_sdram_bankmachine2_produce <= 3'd0;
        basesoc_sdram_bankmachine2_consume <= 3'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= 22'd0;
        basesoc_sdram_bankmachine2_row <= 13'd0;
        basesoc_sdram_bankmachine2_row_opened <= 1'd0;
        basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_twtpcon_count <= 3'd0;
        basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_trccon_count <= 3'd0;
        basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_trascon_count <= 2'd0;
        basesoc_sdram_bankmachine3_level <= 4'd0;
        basesoc_sdram_bankmachine3_produce <= 3'd0;
        basesoc_sdram_bankmachine3_consume <= 3'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= 22'd0;
        basesoc_sdram_bankmachine3_row <= 13'd0;
        basesoc_sdram_bankmachine3_row_opened <= 1'd0;
        basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_twtpcon_count <= 3'd0;
        basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_trccon_count <= 3'd0;
        basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_trascon_count <= 2'd0;
        basesoc_sdram_choose_cmd_grant <= 2'd0;
        basesoc_sdram_choose_req_grant <= 2'd0;
        basesoc_sdram_trrdcon_ready <= 1'd0;
        basesoc_sdram_trrdcon_count <= 1'd0;
        basesoc_sdram_tccdcon_ready <= 1'd0;
        basesoc_sdram_tccdcon_count <= 1'd0;
        basesoc_sdram_twtrcon_ready <= 1'd0;
        basesoc_sdram_twtrcon_count <= 2'd0;
        basesoc_sdram_time0 <= 5'd0;
        basesoc_sdram_time1 <= 4'd0;
        basesoc_aborted <= 1'd0;
        basesoc_vtg_enable_storage <= 1'd1;
        basesoc_vtg_enable_re <= 1'd0;
        basesoc_vtg_hres_storage <= 12'd266;
        basesoc_vtg_hres_re <= 1'd0;
        basesoc_vtg_hsync_start_storage <= 12'd274;
        basesoc_vtg_hsync_start_re <= 1'd0;
        basesoc_vtg_hsync_end_storage <= 12'd306;
        basesoc_vtg_hsync_end_re <= 1'd0;
        basesoc_vtg_hscan_storage <= 12'd339;
        basesoc_vtg_hscan_re <= 1'd0;
        basesoc_vtg_vres_storage <= 12'd240;
        basesoc_vtg_vres_re <= 1'd0;
        basesoc_vtg_vsync_start_storage <= 12'd241;
        basesoc_vtg_vsync_start_re <= 1'd0;
        basesoc_vtg_vsync_end_storage <= 12'd249;
        basesoc_vtg_vsync_end_re <= 1'd0;
        basesoc_vtg_vscan_storage <= 12'd279;
        basesoc_vtg_vscan_re <= 1'd0;
        basesoc_videoframebuffer_dma_res_fifo_level <= 15'd0;
        basesoc_videoframebuffer_dma_res_fifo_produce <= 14'd0;
        basesoc_videoframebuffer_dma_res_fifo_consume <= 14'd0;
        basesoc_videoframebuffer_dma_fifo_readable <= 1'd0;
        basesoc_videoframebuffer_dma_fifo_level0 <= 15'd0;
        basesoc_videoframebuffer_dma_fifo_produce <= 14'd0;
        basesoc_videoframebuffer_dma_fifo_consume <= 14'd0;
        basesoc_videoframebuffer_litedramdmareader_base_storage <= 32'd1086324736;
        basesoc_videoframebuffer_litedramdmareader_base_re <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_length_storage <= 32'd127680;
        basesoc_videoframebuffer_litedramdmareader_length_re <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_enable_storage <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_enable_re <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_done_re <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_loop_storage <= 1'd1;
        basesoc_videoframebuffer_litedramdmareader_loop_re <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_offset_re <= 1'd0;
        basesoc_videoframebuffer_litedramdmareader_offset <= 24'd0;
        basesoc_videoframebuffer_conv_converter_mux <= 1'd0;
        basesoc_videoframebuffer_cdc_cdc_graycounter0_q <= 3'd0;
        basesoc_videoframebuffer_cdc_cdc_graycounter0_q_binary <= 3'd0;
        playback_en_storage <= 1'd0;
        playback_en_re <= 1'd0;
        buffer_fill_re <= 1'd0;
        slot_id_storage <= 16'd0;
        slot_id_re <= 1'd0;
        data_offset_storage <= 32'd0;
        data_offset_re <= 1'd0;
        transfer_length_storage <= 32'd0;
        transfer_length_re <= 1'd0;
        ram_data_address_storage <= 32'd0;
        ram_data_address_re <= 1'd0;
        status_status <= 1'd0;
        status_re <= 1'd0;
        current_address_re <= 1'd0;
        command_result_code_re <= 1'd0;
        scaler_slot_storage <= 4'd0;
        scaler_slot_re <= 1'd0;
        prev_complete_trigger <= 1'd0;
        apfid_re <= 1'd0;
        cont1_key_re <= 1'd0;
        cont2_key_re <= 1'd0;
        cont3_key_re <= 1'd0;
        cont4_key_re <= 1'd0;
        cont1_joy_re <= 1'd0;
        cont2_joy_re <= 1'd0;
        cont3_joy_re <= 1'd0;
        cont4_joy_re <= 1'd0;
        cont1_trig_re <= 1'd0;
        cont2_trig_re <= 1'd0;
        cont3_trig_re <= 1'd0;
        cont4_trig_re <= 1'd0;
        apf_interact_q <= 32'd0;
        csrstatus0_status <= 1'd0;
        csrstatus0_re <= 1'd0;
        interact_storage0 <= 32'd0;
        csrstatus1_status <= 1'd0;
        csrstatus1_re <= 1'd0;
        interact_storage1 <= 32'd0;
        csrstatus2_status <= 1'd0;
        csrstatus2_re <= 1'd0;
        interact_storage2 <= 32'd0;
        csrstatus3_status <= 1'd0;
        csrstatus3_re <= 1'd0;
        interact_storage3 <= 32'd0;
        csrstatus4_status <= 1'd0;
        csrstatus4_re <= 1'd0;
        interact_storage4 <= 32'd0;
        csrstatus5_status <= 1'd0;
        csrstatus5_re <= 1'd0;
        interact_storage5 <= 32'd0;
        csrstatus6_status <= 1'd0;
        csrstatus6_re <= 1'd0;
        interact_storage6 <= 32'd0;
        csrstatus7_status <= 1'd0;
        csrstatus7_re <= 1'd0;
        interact_storage7 <= 32'd0;
        csrstatus8_status <= 1'd0;
        csrstatus8_re <= 1'd0;
        interact_storage8 <= 32'd0;
        csrstatus9_status <= 1'd0;
        csrstatus9_re <= 1'd0;
        interact_storage9 <= 32'd0;
        csrstatus10_status <= 1'd0;
        csrstatus10_re <= 1'd0;
        interact_storage10 <= 32'd0;
        csrstatus11_status <= 1'd0;
        csrstatus11_re <= 1'd0;
        interact_storage11 <= 32'd0;
        csrstatus12_status <= 1'd0;
        csrstatus12_re <= 1'd0;
        interact_storage12 <= 32'd0;
        csrstatus13_status <= 1'd0;
        csrstatus13_re <= 1'd0;
        interact_storage13 <= 32'd0;
        csrstatus14_status <= 1'd0;
        csrstatus14_re <= 1'd0;
        interact_storage14 <= 32'd0;
        csrstatus15_status <= 1'd0;
        csrstatus15_re <= 1'd0;
        interact_storage15 <= 32'd0;
        unix_seconds_re <= 1'd0;
        date_bcd_re <= 1'd0;
        time_bcd_re <= 1'd0;
        apfvideo_vblank <= 1'd0;
        apfvideo_vblank_status <= 1'd0;
        apfvideo_vblank_triggered <= 1'd0;
        apfvideo_frame_counter <= 30'd0;
        apfvideo_re <= 1'd0;
        apfvideo_prev_vblank_triggered <= 1'd0;
        serial_tx <= 1'd1;
        basesoc_tx_tick <= 1'd0;
        basesoc_rx_tick <= 1'd0;
        basesoc_rx_rx_d <= 1'd0;
        basesoc_uart_txfull_re <= 1'd0;
        basesoc_uart_rxempty_re <= 1'd0;
        basesoc_uart_tx_pending <= 1'd0;
        basesoc_uart_tx_trigger_d <= 1'd0;
        basesoc_uart_rx_pending <= 1'd0;
        basesoc_uart_rx_trigger_d <= 1'd0;
        basesoc_uart_status_re <= 1'd0;
        basesoc_uart_pending_re <= 1'd0;
        basesoc_uart_pending_r <= 2'd0;
        basesoc_uart_enable_storage <= 2'd0;
        basesoc_uart_enable_re <= 1'd0;
        basesoc_uart_txempty_re <= 1'd0;
        basesoc_uart_rxfull_re <= 1'd0;
        basesoc_uart_tx_fifo_readable <= 1'd0;
        basesoc_uart_tx_fifo_level0 <= 5'd0;
        basesoc_uart_tx_fifo_produce <= 4'd0;
        basesoc_uart_tx_fifo_consume <= 4'd0;
        basesoc_uart_rx_fifo_readable <= 1'd0;
        basesoc_uart_rx_fifo_level0 <= 5'd0;
        basesoc_uart_rx_fifo_produce <= 4'd0;
        basesoc_uart_rx_fifo_consume <= 4'd0;
        interface1_we <= 1'd0;
        grant <= 1'd0;
        slaves <= 7'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        refresher_state <= 2'd0;
        bankmachine0_state <= 3'd0;
        bankmachine1_state <= 3'd0;
        bankmachine2_state <= 3'd0;
        bankmachine3_state <= 3'd0;
        multiplexer_state <= 3'd0;
        roundrobin0_grant <= 2'd0;
        roundrobin1_grant <= 2'd0;
        roundrobin2_grant <= 2'd0;
        roundrobin3_grant <= 2'd0;
        new_master_wdata_ready0 <= 1'd0;
        new_master_wdata_ready1 <= 1'd0;
        new_master_wdata_ready2 <= 1'd0;
        new_master_wdata_ready3 <= 1'd0;
        new_master_rdata_valid0 <= 1'd0;
        new_master_rdata_valid1 <= 1'd0;
        new_master_rdata_valid2 <= 1'd0;
        new_master_rdata_valid3 <= 1'd0;
        new_master_rdata_valid4 <= 1'd0;
        new_master_rdata_valid5 <= 1'd0;
        new_master_rdata_valid6 <= 1'd0;
        new_master_rdata_valid7 <= 1'd0;
        new_master_rdata_valid8 <= 1'd0;
        new_master_rdata_valid9 <= 1'd0;
        new_master_rdata_valid10 <= 1'd0;
        new_master_rdata_valid11 <= 1'd0;
        new_master_rdata_valid12 <= 1'd0;
        new_master_rdata_valid13 <= 1'd0;
        new_master_rdata_valid14 <= 1'd0;
        new_master_rdata_valid15 <= 1'd0;
        litedramwishbone2native_state <= 2'd0;
        videoframebuffer_litedramdmareader_state <= 2'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        wishbone2csr_state <= 2'd0;
    end
    multiregimpl10_regs0 <= basesoc_videoframebuffer_cdc_cdc_graycounter1_q;
    multiregimpl10_regs1 <= multiregimpl10_regs0;
    multiregimpl16_regs0 <= serial_rx;
    multiregimpl16_regs1 <= multiregimpl16_regs0;
end

always @(posedge sys2x_clk) begin
    phase_sys2x <= (~phase_sel);
    phase_sel <= ((~phase_sel) & (phase_sys2x ^ phase_sys));
    wr_data_en_d <= (dfi_dfi_p0_wrdata_en & (phase_sel == 1'd0));
    rddata_d <= full_rate_phy_dfi_p0_rddata;
    sdram_a[0] <= full_rate_phy_dfi_p0_address[0];
    sdram_a[1] <= full_rate_phy_dfi_p0_address[1];
    sdram_a[2] <= full_rate_phy_dfi_p0_address[2];
    sdram_a[3] <= full_rate_phy_dfi_p0_address[3];
    sdram_a[4] <= full_rate_phy_dfi_p0_address[4];
    sdram_a[5] <= full_rate_phy_dfi_p0_address[5];
    sdram_a[6] <= full_rate_phy_dfi_p0_address[6];
    sdram_a[7] <= full_rate_phy_dfi_p0_address[7];
    sdram_a[8] <= full_rate_phy_dfi_p0_address[8];
    sdram_a[9] <= full_rate_phy_dfi_p0_address[9];
    sdram_a[10] <= full_rate_phy_dfi_p0_address[10];
    sdram_a[11] <= full_rate_phy_dfi_p0_address[11];
    sdram_a[12] <= full_rate_phy_dfi_p0_address[12];
    sdram_ba[0] <= full_rate_phy_dfi_p0_bank[0];
    sdram_ba[1] <= full_rate_phy_dfi_p0_bank[1];
    sdram_ras_n <= full_rate_phy_dfi_p0_ras_n;
    sdram_cas_n <= full_rate_phy_dfi_p0_cas_n;
    sdram_we_n <= full_rate_phy_dfi_p0_we_n;
    sdram_cke <= full_rate_phy_dfi_p0_cke;
    full_rate_phy_dfi_p0_rddata[0] <= full_rate_phy_input_reg20;
    full_rate_phy_input_reg20 <= full_rate_phy_input_reg0;
    full_rate_phy_output_en_reg0 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg0 <= full_rate_phy_dfi_p0_wrdata[0];
    full_rate_phy_dfi_p0_rddata[1] <= full_rate_phy_input_reg21;
    full_rate_phy_input_reg21 <= full_rate_phy_input_reg1;
    full_rate_phy_output_en_reg1 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg1 <= full_rate_phy_dfi_p0_wrdata[1];
    full_rate_phy_dfi_p0_rddata[2] <= full_rate_phy_input_reg22;
    full_rate_phy_input_reg22 <= full_rate_phy_input_reg2;
    full_rate_phy_output_en_reg2 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg2 <= full_rate_phy_dfi_p0_wrdata[2];
    full_rate_phy_dfi_p0_rddata[3] <= full_rate_phy_input_reg23;
    full_rate_phy_input_reg23 <= full_rate_phy_input_reg3;
    full_rate_phy_output_en_reg3 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg3 <= full_rate_phy_dfi_p0_wrdata[3];
    full_rate_phy_dfi_p0_rddata[4] <= full_rate_phy_input_reg24;
    full_rate_phy_input_reg24 <= full_rate_phy_input_reg4;
    full_rate_phy_output_en_reg4 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg4 <= full_rate_phy_dfi_p0_wrdata[4];
    full_rate_phy_dfi_p0_rddata[5] <= full_rate_phy_input_reg25;
    full_rate_phy_input_reg25 <= full_rate_phy_input_reg5;
    full_rate_phy_output_en_reg5 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg5 <= full_rate_phy_dfi_p0_wrdata[5];
    full_rate_phy_dfi_p0_rddata[6] <= full_rate_phy_input_reg26;
    full_rate_phy_input_reg26 <= full_rate_phy_input_reg6;
    full_rate_phy_output_en_reg6 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg6 <= full_rate_phy_dfi_p0_wrdata[6];
    full_rate_phy_dfi_p0_rddata[7] <= full_rate_phy_input_reg27;
    full_rate_phy_input_reg27 <= full_rate_phy_input_reg7;
    full_rate_phy_output_en_reg7 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg7 <= full_rate_phy_dfi_p0_wrdata[7];
    full_rate_phy_dfi_p0_rddata[8] <= full_rate_phy_input_reg28;
    full_rate_phy_input_reg28 <= full_rate_phy_input_reg8;
    full_rate_phy_output_en_reg8 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg8 <= full_rate_phy_dfi_p0_wrdata[8];
    full_rate_phy_dfi_p0_rddata[9] <= full_rate_phy_input_reg29;
    full_rate_phy_input_reg29 <= full_rate_phy_input_reg9;
    full_rate_phy_output_en_reg9 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg9 <= full_rate_phy_dfi_p0_wrdata[9];
    full_rate_phy_dfi_p0_rddata[10] <= full_rate_phy_input_reg210;
    full_rate_phy_input_reg210 <= full_rate_phy_input_reg10;
    full_rate_phy_output_en_reg10 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg10 <= full_rate_phy_dfi_p0_wrdata[10];
    full_rate_phy_dfi_p0_rddata[11] <= full_rate_phy_input_reg211;
    full_rate_phy_input_reg211 <= full_rate_phy_input_reg11;
    full_rate_phy_output_en_reg11 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg11 <= full_rate_phy_dfi_p0_wrdata[11];
    full_rate_phy_dfi_p0_rddata[12] <= full_rate_phy_input_reg212;
    full_rate_phy_input_reg212 <= full_rate_phy_input_reg12;
    full_rate_phy_output_en_reg12 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg12 <= full_rate_phy_dfi_p0_wrdata[12];
    full_rate_phy_dfi_p0_rddata[13] <= full_rate_phy_input_reg213;
    full_rate_phy_input_reg213 <= full_rate_phy_input_reg13;
    full_rate_phy_output_en_reg13 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg13 <= full_rate_phy_dfi_p0_wrdata[13];
    full_rate_phy_dfi_p0_rddata[14] <= full_rate_phy_input_reg214;
    full_rate_phy_input_reg214 <= full_rate_phy_input_reg14;
    full_rate_phy_output_en_reg14 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg14 <= full_rate_phy_dfi_p0_wrdata[14];
    full_rate_phy_dfi_p0_rddata[15] <= full_rate_phy_input_reg215;
    full_rate_phy_input_reg215 <= full_rate_phy_input_reg15;
    full_rate_phy_output_en_reg15 <= full_rate_phy_dfi_p0_wrdata_en;
    full_rate_phy_output_reg15 <= full_rate_phy_dfi_p0_wrdata[15];
    sdram_dm[0] <= (full_rate_phy_dfi_p0_wrdata_en & full_rate_phy_dfi_p0_wrdata_mask[0]);
    sdram_dm[1] <= (full_rate_phy_dfi_p0_wrdata_en & full_rate_phy_dfi_p0_wrdata_mask[1]);
    full_rate_phy_rddata_en <= {full_rate_phy_rddata_en, full_rate_phy_dfi_p0_rddata_en};
    full_rate_phy_dfi_p0_rddata_valid <= full_rate_phy_rddata_en[4];
    if (sys2x_rst) begin
        sdram_a <= 13'd0;
        sdram_ba <= 2'd0;
        sdram_cke <= 1'd0;
        sdram_ras_n <= 1'd0;
        sdram_cas_n <= 1'd0;
        sdram_we_n <= 1'd0;
        sdram_dm <= 2'd0;
        full_rate_phy_dfi_p0_rddata <= 16'd0;
        full_rate_phy_dfi_p0_rddata_valid <= 1'd0;
        full_rate_phy_input_reg20 <= 1'd0;
        full_rate_phy_output_en_reg0 <= 1'd0;
        full_rate_phy_output_reg0 <= 1'd0;
        full_rate_phy_input_reg21 <= 1'd0;
        full_rate_phy_output_en_reg1 <= 1'd0;
        full_rate_phy_output_reg1 <= 1'd0;
        full_rate_phy_input_reg22 <= 1'd0;
        full_rate_phy_output_en_reg2 <= 1'd0;
        full_rate_phy_output_reg2 <= 1'd0;
        full_rate_phy_input_reg23 <= 1'd0;
        full_rate_phy_output_en_reg3 <= 1'd0;
        full_rate_phy_output_reg3 <= 1'd0;
        full_rate_phy_input_reg24 <= 1'd0;
        full_rate_phy_output_en_reg4 <= 1'd0;
        full_rate_phy_output_reg4 <= 1'd0;
        full_rate_phy_input_reg25 <= 1'd0;
        full_rate_phy_output_en_reg5 <= 1'd0;
        full_rate_phy_output_reg5 <= 1'd0;
        full_rate_phy_input_reg26 <= 1'd0;
        full_rate_phy_output_en_reg6 <= 1'd0;
        full_rate_phy_output_reg6 <= 1'd0;
        full_rate_phy_input_reg27 <= 1'd0;
        full_rate_phy_output_en_reg7 <= 1'd0;
        full_rate_phy_output_reg7 <= 1'd0;
        full_rate_phy_input_reg28 <= 1'd0;
        full_rate_phy_output_en_reg8 <= 1'd0;
        full_rate_phy_output_reg8 <= 1'd0;
        full_rate_phy_input_reg29 <= 1'd0;
        full_rate_phy_output_en_reg9 <= 1'd0;
        full_rate_phy_output_reg9 <= 1'd0;
        full_rate_phy_input_reg210 <= 1'd0;
        full_rate_phy_output_en_reg10 <= 1'd0;
        full_rate_phy_output_reg10 <= 1'd0;
        full_rate_phy_input_reg211 <= 1'd0;
        full_rate_phy_output_en_reg11 <= 1'd0;
        full_rate_phy_output_reg11 <= 1'd0;
        full_rate_phy_input_reg212 <= 1'd0;
        full_rate_phy_output_en_reg12 <= 1'd0;
        full_rate_phy_output_reg12 <= 1'd0;
        full_rate_phy_input_reg213 <= 1'd0;
        full_rate_phy_output_en_reg13 <= 1'd0;
        full_rate_phy_output_reg13 <= 1'd0;
        full_rate_phy_input_reg214 <= 1'd0;
        full_rate_phy_output_en_reg14 <= 1'd0;
        full_rate_phy_output_reg14 <= 1'd0;
        full_rate_phy_input_reg215 <= 1'd0;
        full_rate_phy_output_en_reg15 <= 1'd0;
        full_rate_phy_output_reg15 <= 1'd0;
        full_rate_phy_rddata_en <= 5'd0;
        phase_sel <= 1'd0;
        phase_sys2x <= 1'd0;
        wr_data_en_d <= 1'd0;
        rddata_d <= 16'd0;
    end
end

always @(posedge to10223_clk) begin
    basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_binary <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next_binary;
    basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_next;
    if (to10223_rst) begin
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q <= 3'd0;
        basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter1_q_binary <= 3'd0;
    end
    multiregimpl12_regs0 <= basesoc_jtag_uart_phy_tx_cdc_cdc_graycounter0_q;
    multiregimpl12_regs1 <= multiregimpl12_regs0;
end

always @(posedge to10374_clk) begin
    basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_binary <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next_binary;
    basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_next;
    if (to10374_rst) begin
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q <= 3'd0;
        basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter1_q_binary <= 3'd0;
    end
    multiregimpl14_regs0 <= basesoc_jtag_uart_phy_rx_cdc_cdc_graycounter0_q;
    multiregimpl14_regs1 <= multiregimpl14_regs0;
end

always @(posedge vid_clk) begin
    basesoc_vtg_source_first <= ((basesoc_vtg_source_payload_hcount == 1'd0) & (basesoc_vtg_source_payload_vcount == 1'd0));
    basesoc_vtg_source_last <= ((basesoc_vtg_source_payload_hcount == basesoc_vtg_hscan) & (basesoc_vtg_source_payload_vcount == basesoc_vtg_vscan));
    clockdomainsrenamer_state <= clockdomainsrenamer_next_state;
    if (basesoc_vtg_hactive_clockdomainsrenamer_next_value_ce0) begin
        basesoc_vtg_hactive <= basesoc_vtg_hactive_clockdomainsrenamer_next_value0;
    end
    if (basesoc_vtg_vactive_clockdomainsrenamer_next_value_ce1) begin
        basesoc_vtg_vactive <= basesoc_vtg_vactive_clockdomainsrenamer_next_value1;
    end
    if (basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value_ce2) begin
        basesoc_vtg_source_payload_hres <= basesoc_vtg_source_payload_hres_clockdomainsrenamer_next_value2;
    end
    if (basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value_ce3) begin
        basesoc_vtg_source_payload_vres <= basesoc_vtg_source_payload_vres_clockdomainsrenamer_next_value3;
    end
    if (basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value_ce4) begin
        basesoc_vtg_source_payload_hcount <= basesoc_vtg_source_payload_hcount_clockdomainsrenamer_next_value4;
    end
    if (basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value_ce5) begin
        basesoc_vtg_source_payload_vcount <= basesoc_vtg_source_payload_vcount_clockdomainsrenamer_next_value5;
    end
    if (basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value_ce6) begin
        basesoc_vtg_source_payload_hsync <= basesoc_vtg_source_payload_hsync_clockdomainsrenamer_next_value6;
    end
    if (basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value_ce7) begin
        basesoc_vtg_source_payload_vsync <= basesoc_vtg_source_payload_vsync_clockdomainsrenamer_next_value7;
    end
    if (basesoc_vtg_reset) begin
        basesoc_vtg_source_payload_hsync <= 1'd0;
        basesoc_vtg_source_payload_vsync <= 1'd0;
        basesoc_vtg_source_payload_hres <= 12'd0;
        basesoc_vtg_source_payload_vres <= 12'd0;
        basesoc_vtg_source_payload_hcount <= 12'd0;
        basesoc_vtg_source_payload_vcount <= 12'd0;
        basesoc_vtg_hactive <= 1'd0;
        basesoc_vtg_vactive <= 1'd0;
        clockdomainsrenamer_state <= 1'd0;
    end
    basesoc_videoframebuffer_cdc_cdc_graycounter1_q_binary <= basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next_binary;
    basesoc_videoframebuffer_cdc_cdc_graycounter1_q <= basesoc_videoframebuffer_cdc_cdc_graycounter1_q_next;
    videoframebuffer_resetinserter_state <= videoframebuffer_resetinserter_next_state;
    if (basesoc_videoframebuffer_first_resetinserter_next_value_ce) begin
        basesoc_videoframebuffer_first <= basesoc_videoframebuffer_first_resetinserter_next_value;
    end
    if (basesoc_videoframebuffer_fsm_reset) begin
        basesoc_videoframebuffer_first <= 1'd0;
        videoframebuffer_resetinserter_state <= 1'd0;
    end
    if (vid_rst) begin
        basesoc_vtg_source_payload_hsync <= 1'd0;
        basesoc_vtg_source_payload_vsync <= 1'd0;
        basesoc_vtg_source_payload_hres <= 12'd0;
        basesoc_vtg_source_payload_vres <= 12'd0;
        basesoc_vtg_source_payload_hcount <= 12'd0;
        basesoc_vtg_source_payload_vcount <= 12'd0;
        basesoc_vtg_hactive <= 1'd0;
        basesoc_vtg_vactive <= 1'd0;
        basesoc_videoframebuffer_cdc_cdc_graycounter1_q <= 3'd0;
        basesoc_videoframebuffer_cdc_cdc_graycounter1_q_binary <= 3'd0;
        basesoc_videoframebuffer_first <= 1'd0;
        clockdomainsrenamer_state <= 1'd0;
        videoframebuffer_resetinserter_state <= 1'd0;
    end
    multiregimpl0_regs0 <= basesoc_vtg_enable_storage;
    multiregimpl0_regs1 <= multiregimpl0_regs0;
    multiregimpl1_regs0 <= basesoc_vtg_hres_storage;
    multiregimpl1_regs1 <= multiregimpl1_regs0;
    multiregimpl2_regs0 <= basesoc_vtg_hsync_start_storage;
    multiregimpl2_regs1 <= multiregimpl2_regs0;
    multiregimpl3_regs0 <= basesoc_vtg_hsync_end_storage;
    multiregimpl3_regs1 <= multiregimpl3_regs0;
    multiregimpl4_regs0 <= basesoc_vtg_hscan_storage;
    multiregimpl4_regs1 <= multiregimpl4_regs0;
    multiregimpl5_regs0 <= basesoc_vtg_vres_storage;
    multiregimpl5_regs1 <= multiregimpl5_regs0;
    multiregimpl6_regs0 <= basesoc_vtg_vsync_start_storage;
    multiregimpl6_regs1 <= multiregimpl6_regs0;
    multiregimpl7_regs0 <= basesoc_vtg_vsync_end_storage;
    multiregimpl7_regs1 <= multiregimpl7_regs0;
    multiregimpl8_regs0 <= basesoc_vtg_vscan_storage;
    multiregimpl8_regs1 <= multiregimpl8_regs0;
    multiregimpl9_regs0 <= basesoc_videoframebuffer_cdc_cdc_graycounter0_q;
    multiregimpl9_regs1 <= multiregimpl9_regs0;
    multiregimpl11_regs0 <= basesoc_videoframebuffer_litedramdmareader_reset;
    multiregimpl11_regs1 <= multiregimpl11_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5045-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5044];
initial begin
	$readmemh("litex_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_basesoc_adr];
end
assign basesoc_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("litex_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (basesoc_basesoc_ram_we[0])
		sram[basesoc_basesoc_ram_adr][7:0] <= basesoc_basesoc_ram_dat_w[7:0];
	if (basesoc_basesoc_ram_we[1])
		sram[basesoc_basesoc_ram_adr][15:8] <= basesoc_basesoc_ram_dat_w[15:8];
	if (basesoc_basesoc_ram_we[2])
		sram[basesoc_basesoc_ram_adr][23:16] <= basesoc_basesoc_ram_dat_w[23:16];
	if (basesoc_basesoc_ram_we[3])
		sram[basesoc_basesoc_ram_adr][31:24] <= basesoc_basesoc_ram_dat_w[31:24];
	sram_adr0 <= basesoc_basesoc_ram_adr;
end
assign basesoc_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 47-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:46];
initial begin
	$readmemh("litex_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


assign sdram_dq[0] = full_rate_phy_output_en_reg0 ? full_rate_phy_output_reg0 : 1'bz;
assign full_rate_phy_input_reg0 = sdram_dq[0];

assign sdram_dq[1] = full_rate_phy_output_en_reg1 ? full_rate_phy_output_reg1 : 1'bz;
assign full_rate_phy_input_reg1 = sdram_dq[1];

assign sdram_dq[2] = full_rate_phy_output_en_reg2 ? full_rate_phy_output_reg2 : 1'bz;
assign full_rate_phy_input_reg2 = sdram_dq[2];

assign sdram_dq[3] = full_rate_phy_output_en_reg3 ? full_rate_phy_output_reg3 : 1'bz;
assign full_rate_phy_input_reg3 = sdram_dq[3];

assign sdram_dq[4] = full_rate_phy_output_en_reg4 ? full_rate_phy_output_reg4 : 1'bz;
assign full_rate_phy_input_reg4 = sdram_dq[4];

assign sdram_dq[5] = full_rate_phy_output_en_reg5 ? full_rate_phy_output_reg5 : 1'bz;
assign full_rate_phy_input_reg5 = sdram_dq[5];

assign sdram_dq[6] = full_rate_phy_output_en_reg6 ? full_rate_phy_output_reg6 : 1'bz;
assign full_rate_phy_input_reg6 = sdram_dq[6];

assign sdram_dq[7] = full_rate_phy_output_en_reg7 ? full_rate_phy_output_reg7 : 1'bz;
assign full_rate_phy_input_reg7 = sdram_dq[7];

assign sdram_dq[8] = full_rate_phy_output_en_reg8 ? full_rate_phy_output_reg8 : 1'bz;
assign full_rate_phy_input_reg8 = sdram_dq[8];

assign sdram_dq[9] = full_rate_phy_output_en_reg9 ? full_rate_phy_output_reg9 : 1'bz;
assign full_rate_phy_input_reg9 = sdram_dq[9];

assign sdram_dq[10] = full_rate_phy_output_en_reg10 ? full_rate_phy_output_reg10 : 1'bz;
assign full_rate_phy_input_reg10 = sdram_dq[10];

assign sdram_dq[11] = full_rate_phy_output_en_reg11 ? full_rate_phy_output_reg11 : 1'bz;
assign full_rate_phy_input_reg11 = sdram_dq[11];

assign sdram_dq[12] = full_rate_phy_output_en_reg12 ? full_rate_phy_output_reg12 : 1'bz;
assign full_rate_phy_input_reg12 = sdram_dq[12];

assign sdram_dq[13] = full_rate_phy_output_en_reg13 ? full_rate_phy_output_reg13 : 1'bz;
assign full_rate_phy_input_reg13 = sdram_dq[13];

assign sdram_dq[14] = full_rate_phy_output_en_reg14 ? full_rate_phy_output_reg14 : 1'bz;
assign full_rate_phy_input_reg14 = sdram_dq[14];

assign sdram_dq[15] = full_rate_phy_output_en_reg15 ? full_rate_phy_output_reg15 : 1'bz;
assign full_rate_phy_input_reg15 = sdram_dq[15];

//------------------------------------------------------------------------------
// Memory storage: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage[0:7];
reg [24:0] storage_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine0_wrport_we)
		storage[basesoc_sdram_bankmachine0_wrport_adr] <= basesoc_sdram_bankmachine0_wrport_dat_w;
	storage_dat0 <= storage[basesoc_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine0_wrport_dat_r = storage_dat0;
assign basesoc_sdram_bankmachine0_rdport_dat_r = storage[basesoc_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_1: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_1[0:7];
reg [24:0] storage_1_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine1_wrport_we)
		storage_1[basesoc_sdram_bankmachine1_wrport_adr] <= basesoc_sdram_bankmachine1_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine1_wrport_dat_r = storage_1_dat0;
assign basesoc_sdram_bankmachine1_rdport_dat_r = storage_1[basesoc_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_2[0:7];
reg [24:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine2_wrport_we)
		storage_2[basesoc_sdram_bankmachine2_wrport_adr] <= basesoc_sdram_bankmachine2_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine2_wrport_dat_r = storage_2_dat0;
assign basesoc_sdram_bankmachine2_rdport_dat_r = storage_2[basesoc_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 25-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 25 
// Port 1 | Read: Async | Write: ---- | 
reg [24:0] storage_3[0:7];
reg [24:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine3_wrport_we)
		storage_3[basesoc_sdram_bankmachine3_wrport_adr] <= basesoc_sdram_bankmachine3_wrport_dat_w;
	storage_3_dat0 <= storage_3[basesoc_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine3_wrport_dat_r = storage_3_dat0;
assign basesoc_sdram_bankmachine3_rdport_dat_r = storage_3[basesoc_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 16384-words x 3-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 3 
// Port 1 | Read: Async | Write: ---- | 
reg [2:0] storage_4[0:16383];
reg [2:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (basesoc_videoframebuffer_dma_res_fifo_wrport_we)
		storage_4[basesoc_videoframebuffer_dma_res_fifo_wrport_adr] <= basesoc_videoframebuffer_dma_res_fifo_wrport_dat_w;
	storage_4_dat0 <= storage_4[basesoc_videoframebuffer_dma_res_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_videoframebuffer_dma_res_fifo_wrport_dat_r = storage_4_dat0;
assign basesoc_videoframebuffer_dma_res_fifo_rdport_dat_r = storage_4[basesoc_videoframebuffer_dma_res_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 16384-words x 34-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 34 
// Port 1 | Read: Sync  | Write: ---- | 
reg [33:0] storage_5[0:16383];
reg [33:0] storage_5_dat0;
reg [33:0] storage_5_dat1;
always @(posedge sys_clk) begin
	if (basesoc_videoframebuffer_dma_fifo_wrport_we)
		storage_5[basesoc_videoframebuffer_dma_fifo_wrport_adr] <= basesoc_videoframebuffer_dma_fifo_wrport_dat_w;
	storage_5_dat0 <= storage_5[basesoc_videoframebuffer_dma_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_videoframebuffer_dma_fifo_rdport_re)
		storage_5_dat1 <= storage_5[basesoc_videoframebuffer_dma_fifo_rdport_adr];
end
assign basesoc_videoframebuffer_dma_fifo_wrport_dat_r = storage_5_dat0;
assign basesoc_videoframebuffer_dma_fifo_rdport_dat_r = storage_5_dat1;


//------------------------------------------------------------------------------
// Memory storage_6: 4-words x 18-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 18 
// Port 1 | Read: Sync  | Write: ---- | 
reg [17:0] storage_6[0:3];
reg [17:0] storage_6_dat0;
reg [17:0] storage_6_dat1;
always @(posedge sys_clk) begin
	if (basesoc_videoframebuffer_cdc_cdc_wrport_we)
		storage_6[basesoc_videoframebuffer_cdc_cdc_wrport_adr] <= basesoc_videoframebuffer_cdc_cdc_wrport_dat_w;
	storage_6_dat0 <= storage_6[basesoc_videoframebuffer_cdc_cdc_wrport_adr];
end
always @(posedge vid_clk) begin
	storage_6_dat1 <= storage_6[basesoc_videoframebuffer_cdc_cdc_rdport_adr];
end
assign basesoc_videoframebuffer_cdc_cdc_wrport_dat_r = storage_6_dat0;
assign basesoc_videoframebuffer_cdc_cdc_rdport_dat_r = storage_6_dat1;


//------------------------------------------------------------------------------
// Instance cyclonev_jtag of cyclonev_jtag Module.
//------------------------------------------------------------------------------
cyclonev_jtag cyclonev_jtag(
	// Inputs.
	.tck         (basesoc_jtag_uart_phy_jtag_altera_reserved_tck),
	.tdi         (basesoc_jtag_uart_phy_jtag_altera_reserved_tdi),
	.tdouser     (basesoc_jtag_uart_phy_jtag_tdouser),
	.tms         (basesoc_jtag_uart_phy_jtag_altera_reserved_tms),

	// Outputs.
	.clkdruser   (basesoc_jtag_uart_phy_jtag_drck),
	.runidleuser (basesoc_jtag_uart_phy_jtag_runtest),
	.shiftuser   (basesoc_jtag_uart_phy_jtag_shift),
	.tckutap     (basesoc_jtag_uart_phy_jtag_tckutap),
	.tdiutap     (basesoc_jtag_uart_phy_jtag_tdiutap),
	.tdo         (basesoc_jtag_uart_phy_jtag_altera_reserved_tdo),
	.tmsutap     (basesoc_jtag_uart_phy_jtag_tmsutap),
	.updateuser  (basesoc_jtag_uart_phy_jtag_update),
	.usr1user    (basesoc_jtag_uart_phy_jtag_sel)
);

//------------------------------------------------------------------------------
// Memory storage_7: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_7[0:3];
reg [9:0] storage_7_dat0;
reg [9:0] storage_7_dat1;
always @(posedge from10223_clk) begin
	if (basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_we)
		storage_7[basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_adr] <= basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_dat_w;
	storage_7_dat0 <= storage_7[basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_adr];
end
always @(posedge to10223_clk) begin
	storage_7_dat1 <= storage_7[basesoc_jtag_uart_phy_tx_cdc_cdc_rdport_adr];
end
assign basesoc_jtag_uart_phy_tx_cdc_cdc_wrport_dat_r = storage_7_dat0;
assign basesoc_jtag_uart_phy_tx_cdc_cdc_rdport_dat_r = storage_7_dat1;


//------------------------------------------------------------------------------
// Memory storage_8: 4-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_8[0:3];
reg [9:0] storage_8_dat0;
reg [9:0] storage_8_dat1;
always @(posedge from10374_clk) begin
	if (basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_we)
		storage_8[basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_adr] <= basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_dat_w;
	storage_8_dat0 <= storage_8[basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_adr];
end
always @(posedge to10374_clk) begin
	storage_8_dat1 <= storage_8[basesoc_jtag_uart_phy_rx_cdc_cdc_rdport_adr];
end
assign basesoc_jtag_uart_phy_rx_cdc_cdc_wrport_dat_r = storage_8_dat0;
assign basesoc_jtag_uart_phy_rx_cdc_cdc_rdport_dat_r = storage_8_dat1;


//------------------------------------------------------------------------------
// Memory storage_9: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_9[0:15];
reg [9:0] storage_9_dat0;
reg [9:0] storage_9_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage_9[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	storage_9_dat0 <= storage_9[basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		storage_9_dat1 <= storage_9[basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_uart_tx_fifo_wrport_dat_r = storage_9_dat0;
assign basesoc_uart_tx_fifo_rdport_dat_r = storage_9_dat1;


//------------------------------------------------------------------------------
// Memory storage_10: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_10[0:15];
reg [9:0] storage_10_dat0;
reg [9:0] storage_10_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_10[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	storage_10_dat0 <= storage_10[basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		storage_10_dat1 <= storage_10[basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_uart_rx_fifo_wrport_dat_r = storage_10_dat0;
assign basesoc_uart_rx_fifo_rdport_dat_r = storage_10_dat1;


//------------------------------------------------------------------------------
// Instance VexRiscvLitexSmpCluster_Cc1_Iw64Is4096Iy1_Dw64Ds4096Dy1_ITs4DTs4_Ldw32_Ood_Fpu4_Hb1_Rvc of VexRiscvLitexSmpCluster_Cc1_Iw64Is4096Iy1_Dw64Ds4096Dy1_ITs4DTs4_Ldw32_Ood_Fpu4_Hb1_Rvc Module.
//------------------------------------------------------------------------------
VexRiscvLitexSmpCluster_Cc1_Iw64Is4096Iy1_Dw64Ds4096Dy1_ITs4DTs4_Ldw32_Ood_Fpu4_Hb1_Rvc VexRiscvLitexSmpCluster_Cc1_Iw64Is4096Iy1_Dw64Ds4096Dy1_ITs4DTs4_Ldw32_Ood_Fpu4_Hb1_Rvc(
	// Inputs.
	.clintWishbone_ADR               (basesoc_basesoc_clintbus_adr),
	.clintWishbone_CYC               (basesoc_basesoc_clintbus_cyc),
	.clintWishbone_DAT_MOSI          (basesoc_basesoc_clintbus_dat_w),
	.clintWishbone_STB               (basesoc_basesoc_clintbus_stb),
	.clintWishbone_WE                (basesoc_basesoc_clintbus_we),
	.dBridge_dram_cmd_ready          (basesoc_dbus_cmd_ready),
	.dBridge_dram_rdata_payload_data (basesoc_dbus_rdata_payload_data),
	.dBridge_dram_rdata_valid        (basesoc_dbus_rdata_valid),
	.dBridge_dram_wdata_ready        (basesoc_dbus_wdata_ready),
	.debugCd_external_clk            (sys_clk),
	.debugCd_external_reset          ((sys_rst | basesoc_basesoc_reset)),
	.debugPort_capture               (basesoc_basesoc_jtag_capture),
	.debugPort_enable                (basesoc_basesoc_jtag_enable),
	.debugPort_reset                 (basesoc_basesoc_jtag_reset),
	.debugPort_shift                 (basesoc_basesoc_jtag_shift),
	.debugPort_tdi                   (basesoc_basesoc_jtag_tdi),
	.debugPort_update                (basesoc_basesoc_jtag_update),
	.iBridge_dram_cmd_ready          (basesoc_ibus_cmd_ready),
	.iBridge_dram_rdata_payload_data (basesoc_ibus_rdata_payload_data),
	.iBridge_dram_rdata_valid        (basesoc_ibus_rdata_valid),
	.iBridge_dram_wdata_ready        (basesoc_ibus_wdata_ready),
	.interrupts                      (basesoc_basesoc_interrupt),
	.jtag_clk                        (basesoc_basesoc_jtag_clk),
	.peripheral_ACK                  (basesoc_basesoc_pbus_ack),
	.peripheral_DAT_MISO             (basesoc_basesoc_pbus_dat_r),
	.peripheral_ERR                  (basesoc_basesoc_pbus_err),
	.plicWishbone_ADR                (basesoc_basesoc_plicbus_adr),
	.plicWishbone_CYC                (basesoc_basesoc_plicbus_cyc),
	.plicWishbone_DAT_MOSI           (basesoc_basesoc_plicbus_dat_w),
	.plicWishbone_STB                (basesoc_basesoc_plicbus_stb),
	.plicWishbone_WE                 (basesoc_basesoc_plicbus_we),

	// Outputs.
	.clintWishbone_ACK               (basesoc_basesoc_clintbus_ack),
	.clintWishbone_DAT_MISO          (basesoc_basesoc_clintbus_dat_r),
	.dBridge_dram_cmd_payload_addr   (basesoc_dbus_cmd_payload_addr),
	.dBridge_dram_cmd_payload_we     (basesoc_dbus_cmd_payload_we),
	.dBridge_dram_cmd_valid          (basesoc_dbus_cmd_valid),
	.dBridge_dram_rdata_ready        (basesoc_dbus_rdata_ready),
	.dBridge_dram_wdata_payload_data (basesoc_dbus_wdata_payload_data),
	.dBridge_dram_wdata_payload_we   (basesoc_dbus_wdata_payload_we),
	.dBridge_dram_wdata_valid        (basesoc_dbus_wdata_valid),
	.debugPort_tdo                   (basesoc_basesoc_jtag_tdo),
	.iBridge_dram_cmd_payload_addr   (basesoc_ibus_cmd_payload_addr),
	.iBridge_dram_cmd_payload_we     (basesoc_ibus_cmd_payload_we),
	.iBridge_dram_cmd_valid          (basesoc_ibus_cmd_valid),
	.iBridge_dram_rdata_ready        (basesoc_ibus_rdata_ready),
	.iBridge_dram_wdata_payload_data (basesoc_ibus_wdata_payload_data),
	.iBridge_dram_wdata_payload_we   (basesoc_ibus_wdata_payload_we),
	.iBridge_dram_wdata_valid        (basesoc_ibus_wdata_valid),
	.peripheral_ADR                  (basesoc_basesoc_pbus_adr),
	.peripheral_BTE                  (basesoc_basesoc_pbus_bte),
	.peripheral_CTI                  (basesoc_basesoc_pbus_cti),
	.peripheral_CYC                  (basesoc_basesoc_pbus_cyc),
	.peripheral_DAT_MOSI             (basesoc_basesoc_pbus_dat_w),
	.peripheral_SEL                  (basesoc_basesoc_pbus_sel),
	.peripheral_STB                  (basesoc_basesoc_pbus_stb),
	.peripheral_WE                   (basesoc_basesoc_pbus_we),
	.plicWishbone_ACK                (basesoc_basesoc_plicbus_ack),
	.plicWishbone_DAT_MISO           (basesoc_basesoc_plicbus_dat_r)
);

//------------------------------------------------------------------------------
// Instance ALTDDIO_OUT of ALTDDIO_OUT Module.
//------------------------------------------------------------------------------
ALTDDIO_OUT #(
	// Parameters.
	.WIDTH (1'd1)
) ALTDDIO_OUT (
	// Inputs.
	.datain_h (1'd1),
	.datain_l (1'd0),
	.outclock (clk_sys2x_90deg),

	// Outputs.
	.dataout  (sdram_clock)
);

//------------------------------------------------------------------------------
// Instance ars_cd_jtag_ff0 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_jtag_ff0(
	// Inputs.
	.clk  (jtag_clk),
	.clrn (1'd1),
	.d    (1'd0),
	.prn  ((~sys_jtag_rst)),

	// Outputs.
	.q    (ars_cd_jtag_rst_meta)
);

//------------------------------------------------------------------------------
// Instance ars_cd_jtag_ff1 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_jtag_ff1(
	// Inputs.
	.clk  (jtag_clk),
	.clrn (1'd1),
	.d    (ars_cd_jtag_rst_meta),
	.prn  ((~sys_jtag_rst)),

	// Outputs.
	.q    (jtag_rst)
);

//------------------------------------------------------------------------------
// Instance ars_cd_from10223_ff0 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_from10223_ff0(
	// Inputs.
	.clk  (from10223_clk),
	.clrn (1'd1),
	.d    (1'd0),
	.prn  ((~basesoc_jtag_uart_phy_tx_cdc_cd_rst)),

	// Outputs.
	.q    (ars_cd_from10223_rst_meta)
);

//------------------------------------------------------------------------------
// Instance ars_cd_from10223_ff1 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_from10223_ff1(
	// Inputs.
	.clk  (from10223_clk),
	.clrn (1'd1),
	.d    (ars_cd_from10223_rst_meta),
	.prn  ((~basesoc_jtag_uart_phy_tx_cdc_cd_rst)),

	// Outputs.
	.q    (from10223_rst)
);

//------------------------------------------------------------------------------
// Instance ars_cd_to10223_ff0 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_to10223_ff0(
	// Inputs.
	.clk  (to10223_clk),
	.clrn (1'd1),
	.d    (1'd0),
	.prn  ((~basesoc_jtag_uart_phy_tx_cdc_cd_rst)),

	// Outputs.
	.q    (ars_cd_to10223_rst_meta)
);

//------------------------------------------------------------------------------
// Instance ars_cd_to10223_ff1 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_to10223_ff1(
	// Inputs.
	.clk  (to10223_clk),
	.clrn (1'd1),
	.d    (ars_cd_to10223_rst_meta),
	.prn  ((~basesoc_jtag_uart_phy_tx_cdc_cd_rst)),

	// Outputs.
	.q    (to10223_rst)
);

//------------------------------------------------------------------------------
// Instance ars_cd_from10374_ff0 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_from10374_ff0(
	// Inputs.
	.clk  (from10374_clk),
	.clrn (1'd1),
	.d    (1'd0),
	.prn  ((~basesoc_jtag_uart_phy_rx_cdc_cd_rst)),

	// Outputs.
	.q    (ars_cd_from10374_rst_meta)
);

//------------------------------------------------------------------------------
// Instance ars_cd_from10374_ff1 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_from10374_ff1(
	// Inputs.
	.clk  (from10374_clk),
	.clrn (1'd1),
	.d    (ars_cd_from10374_rst_meta),
	.prn  ((~basesoc_jtag_uart_phy_rx_cdc_cd_rst)),

	// Outputs.
	.q    (from10374_rst)
);

//------------------------------------------------------------------------------
// Instance ars_cd_to10374_ff0 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_to10374_ff0(
	// Inputs.
	.clk  (to10374_clk),
	.clrn (1'd1),
	.d    (1'd0),
	.prn  ((~basesoc_jtag_uart_phy_rx_cdc_cd_rst)),

	// Outputs.
	.q    (ars_cd_to10374_rst_meta)
);

//------------------------------------------------------------------------------
// Instance ars_cd_to10374_ff1 of DFF Module.
//------------------------------------------------------------------------------
DFF ars_cd_to10374_ff1(
	// Inputs.
	.clk  (to10374_clk),
	.clrn (1'd1),
	.d    (ars_cd_to10374_rst_meta),
	.prn  ((~basesoc_jtag_uart_phy_rx_cdc_cd_rst)),

	// Outputs.
	.q    (to10374_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-04-16 15:59:05.
//------------------------------------------------------------------------------
