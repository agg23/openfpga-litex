//--------------------------------------------------------------------------------
// Auto-generated by LiteX (bf081324) on 2023-12-02 16:49:17
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif

/* apf_audio */
#define CSR_APF_AUDIO_BASE (CSR_BASE + 0x0L)
#define CSR_APF_AUDIO_OUT_ADDR (CSR_BASE + 0x0L)
#define CSR_APF_AUDIO_OUT_SIZE 1
static inline uint32_t apf_audio_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void apf_audio_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_APF_AUDIO_PLAYBACK_EN_ADDR (CSR_BASE + 0x4L)
#define CSR_APF_AUDIO_PLAYBACK_EN_SIZE 1
static inline uint32_t apf_audio_playback_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void apf_audio_playback_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
#define CSR_APF_AUDIO_BUFFER_FLUSH_ADDR (CSR_BASE + 0x8L)
#define CSR_APF_AUDIO_BUFFER_FLUSH_SIZE 1
static inline uint32_t apf_audio_buffer_flush_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}
static inline void apf_audio_buffer_flush_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8L));
}
#define CSR_APF_AUDIO_BUFFER_FILL_ADDR (CSR_BASE + 0xcL)
#define CSR_APF_AUDIO_BUFFER_FILL_SIZE 1
static inline uint32_t apf_audio_buffer_fill_read(void) {
	return csr_read_simple((CSR_BASE + 0xcL));
}

/* apf_bridge */
#define CSR_APF_BRIDGE_BASE (CSR_BASE + 0x800L)
#define CSR_APF_BRIDGE_REQUEST_READ_ADDR (CSR_BASE + 0x800L)
#define CSR_APF_BRIDGE_REQUEST_READ_SIZE 1
static inline uint32_t apf_bridge_request_read_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void apf_bridge_request_read_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
#define CSR_APF_BRIDGE_REQUEST_WRITE_ADDR (CSR_BASE + 0x804L)
#define CSR_APF_BRIDGE_REQUEST_WRITE_SIZE 1
static inline uint32_t apf_bridge_request_write_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void apf_bridge_request_write_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
#define CSR_APF_BRIDGE_REQUEST_GETFILE_ADDR (CSR_BASE + 0x808L)
#define CSR_APF_BRIDGE_REQUEST_GETFILE_SIZE 1
static inline uint32_t apf_bridge_request_getfile_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline void apf_bridge_request_getfile_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x808L));
}
#define CSR_APF_BRIDGE_REQUEST_OPENFILE_ADDR (CSR_BASE + 0x80cL)
#define CSR_APF_BRIDGE_REQUEST_OPENFILE_SIZE 1
static inline uint32_t apf_bridge_request_openfile_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}
static inline void apf_bridge_request_openfile_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80cL));
}
#define CSR_APF_BRIDGE_SLOT_ID_ADDR (CSR_BASE + 0x810L)
#define CSR_APF_BRIDGE_SLOT_ID_SIZE 1
static inline uint32_t apf_bridge_slot_id_read(void) {
	return csr_read_simple((CSR_BASE + 0x810L));
}
static inline void apf_bridge_slot_id_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x810L));
}
#define CSR_APF_BRIDGE_DATA_OFFSET_ADDR (CSR_BASE + 0x814L)
#define CSR_APF_BRIDGE_DATA_OFFSET_SIZE 1
static inline uint32_t apf_bridge_data_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x814L));
}
static inline void apf_bridge_data_offset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x814L));
}
#define CSR_APF_BRIDGE_TRANSFER_LENGTH_ADDR (CSR_BASE + 0x818L)
#define CSR_APF_BRIDGE_TRANSFER_LENGTH_SIZE 1
static inline uint32_t apf_bridge_transfer_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x818L));
}
static inline void apf_bridge_transfer_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x818L));
}
#define CSR_APF_BRIDGE_RAM_DATA_ADDRESS_ADDR (CSR_BASE + 0x81cL)
#define CSR_APF_BRIDGE_RAM_DATA_ADDRESS_SIZE 1
static inline uint32_t apf_bridge_ram_data_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x81cL));
}
static inline void apf_bridge_ram_data_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x81cL));
}
#define CSR_APF_BRIDGE_FILE_SIZE_ADDR (CSR_BASE + 0x820L)
#define CSR_APF_BRIDGE_FILE_SIZE_SIZE 1
static inline uint32_t apf_bridge_file_size_read(void) {
	return csr_read_simple((CSR_BASE + 0x820L));
}
static inline void apf_bridge_file_size_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x820L));
}
#define CSR_APF_BRIDGE_STATUS_ADDR (CSR_BASE + 0x824L)
#define CSR_APF_BRIDGE_STATUS_SIZE 1
static inline uint32_t apf_bridge_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x824L));
}
#define CSR_APF_BRIDGE_CURRENT_ADDRESS_ADDR (CSR_BASE + 0x828L)
#define CSR_APF_BRIDGE_CURRENT_ADDRESS_SIZE 1
static inline uint32_t apf_bridge_current_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x828L));
}
#define CSR_APF_BRIDGE_COMMAND_RESULT_CODE_ADDR (CSR_BASE + 0x82cL)
#define CSR_APF_BRIDGE_COMMAND_RESULT_CODE_SIZE 1
static inline uint32_t apf_bridge_command_result_code_read(void) {
	return csr_read_simple((CSR_BASE + 0x82cL));
}

/* apf_id */
#define CSR_APF_ID_BASE (CSR_BASE + 0x1000L)
#define CSR_APF_ID_ID_ADDR (CSR_BASE + 0x1000L)
#define CSR_APF_ID_ID_SIZE 2
static inline uint64_t apf_id_id_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x1000L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x1004L));
	return r;
}

/* apf_input */
#define CSR_APF_INPUT_BASE (CSR_BASE + 0x1800L)
#define CSR_APF_INPUT_CONT1_KEY_ADDR (CSR_BASE + 0x1800L)
#define CSR_APF_INPUT_CONT1_KEY_SIZE 1
static inline uint32_t apf_input_cont1_key_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
#define CSR_APF_INPUT_CONT2_KEY_ADDR (CSR_BASE + 0x1804L)
#define CSR_APF_INPUT_CONT2_KEY_SIZE 1
static inline uint32_t apf_input_cont2_key_read(void) {
	return csr_read_simple((CSR_BASE + 0x1804L));
}
#define CSR_APF_INPUT_CONT3_KEY_ADDR (CSR_BASE + 0x1808L)
#define CSR_APF_INPUT_CONT3_KEY_SIZE 1
static inline uint32_t apf_input_cont3_key_read(void) {
	return csr_read_simple((CSR_BASE + 0x1808L));
}
#define CSR_APF_INPUT_CONT4_KEY_ADDR (CSR_BASE + 0x180cL)
#define CSR_APF_INPUT_CONT4_KEY_SIZE 1
static inline uint32_t apf_input_cont4_key_read(void) {
	return csr_read_simple((CSR_BASE + 0x180cL));
}
#define CSR_APF_INPUT_CONT1_JOY_ADDR (CSR_BASE + 0x1810L)
#define CSR_APF_INPUT_CONT1_JOY_SIZE 1
static inline uint32_t apf_input_cont1_joy_read(void) {
	return csr_read_simple((CSR_BASE + 0x1810L));
}
#define CSR_APF_INPUT_CONT2_JOY_ADDR (CSR_BASE + 0x1814L)
#define CSR_APF_INPUT_CONT2_JOY_SIZE 1
static inline uint32_t apf_input_cont2_joy_read(void) {
	return csr_read_simple((CSR_BASE + 0x1814L));
}
#define CSR_APF_INPUT_CONT3_JOY_ADDR (CSR_BASE + 0x1818L)
#define CSR_APF_INPUT_CONT3_JOY_SIZE 1
static inline uint32_t apf_input_cont3_joy_read(void) {
	return csr_read_simple((CSR_BASE + 0x1818L));
}
#define CSR_APF_INPUT_CONT4_JOY_ADDR (CSR_BASE + 0x181cL)
#define CSR_APF_INPUT_CONT4_JOY_SIZE 1
static inline uint32_t apf_input_cont4_joy_read(void) {
	return csr_read_simple((CSR_BASE + 0x181cL));
}
#define CSR_APF_INPUT_CONT1_TRIG_ADDR (CSR_BASE + 0x1820L)
#define CSR_APF_INPUT_CONT1_TRIG_SIZE 1
static inline uint32_t apf_input_cont1_trig_read(void) {
	return csr_read_simple((CSR_BASE + 0x1820L));
}
#define CSR_APF_INPUT_CONT2_TRIG_ADDR (CSR_BASE + 0x1824L)
#define CSR_APF_INPUT_CONT2_TRIG_SIZE 1
static inline uint32_t apf_input_cont2_trig_read(void) {
	return csr_read_simple((CSR_BASE + 0x1824L));
}
#define CSR_APF_INPUT_CONT3_TRIG_ADDR (CSR_BASE + 0x1828L)
#define CSR_APF_INPUT_CONT3_TRIG_SIZE 1
static inline uint32_t apf_input_cont3_trig_read(void) {
	return csr_read_simple((CSR_BASE + 0x1828L));
}
#define CSR_APF_INPUT_CONT4_TRIG_ADDR (CSR_BASE + 0x182cL)
#define CSR_APF_INPUT_CONT4_TRIG_SIZE 1
static inline uint32_t apf_input_cont4_trig_read(void) {
	return csr_read_simple((CSR_BASE + 0x182cL));
}

/* apf_interact */
#define CSR_APF_INTERACT_BASE (CSR_BASE + 0x2000L)
#define CSR_APF_INTERACT_INTERACT0_ADDR (CSR_BASE + 0x2000L)
#define CSR_APF_INTERACT_INTERACT0_SIZE 1
static inline uint32_t apf_interact_interact0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void apf_interact_interact0_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED0_ADDR (CSR_BASE + 0x2004L)
#define CSR_APF_INTERACT_INTERACT_CHANGED0_SIZE 1
static inline uint32_t apf_interact_interact_changed0_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
#define CSR_APF_INTERACT_INTERACT1_ADDR (CSR_BASE + 0x2008L)
#define CSR_APF_INTERACT_INTERACT1_SIZE 1
static inline uint32_t apf_interact_interact1_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void apf_interact_interact1_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED1_ADDR (CSR_BASE + 0x200cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED1_SIZE 1
static inline uint32_t apf_interact_interact_changed1_read(void) {
	return csr_read_simple((CSR_BASE + 0x200cL));
}
#define CSR_APF_INTERACT_INTERACT2_ADDR (CSR_BASE + 0x2010L)
#define CSR_APF_INTERACT_INTERACT2_SIZE 1
static inline uint32_t apf_interact_interact2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2010L));
}
static inline void apf_interact_interact2_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2010L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED2_ADDR (CSR_BASE + 0x2014L)
#define CSR_APF_INTERACT_INTERACT_CHANGED2_SIZE 1
static inline uint32_t apf_interact_interact_changed2_read(void) {
	return csr_read_simple((CSR_BASE + 0x2014L));
}
#define CSR_APF_INTERACT_INTERACT3_ADDR (CSR_BASE + 0x2018L)
#define CSR_APF_INTERACT_INTERACT3_SIZE 1
static inline uint32_t apf_interact_interact3_read(void) {
	return csr_read_simple((CSR_BASE + 0x2018L));
}
static inline void apf_interact_interact3_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2018L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED3_ADDR (CSR_BASE + 0x201cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED3_SIZE 1
static inline uint32_t apf_interact_interact_changed3_read(void) {
	return csr_read_simple((CSR_BASE + 0x201cL));
}
#define CSR_APF_INTERACT_INTERACT4_ADDR (CSR_BASE + 0x2020L)
#define CSR_APF_INTERACT_INTERACT4_SIZE 1
static inline uint32_t apf_interact_interact4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2020L));
}
static inline void apf_interact_interact4_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2020L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED4_ADDR (CSR_BASE + 0x2024L)
#define CSR_APF_INTERACT_INTERACT_CHANGED4_SIZE 1
static inline uint32_t apf_interact_interact_changed4_read(void) {
	return csr_read_simple((CSR_BASE + 0x2024L));
}
#define CSR_APF_INTERACT_INTERACT5_ADDR (CSR_BASE + 0x2028L)
#define CSR_APF_INTERACT_INTERACT5_SIZE 1
static inline uint32_t apf_interact_interact5_read(void) {
	return csr_read_simple((CSR_BASE + 0x2028L));
}
static inline void apf_interact_interact5_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2028L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED5_ADDR (CSR_BASE + 0x202cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED5_SIZE 1
static inline uint32_t apf_interact_interact_changed5_read(void) {
	return csr_read_simple((CSR_BASE + 0x202cL));
}
#define CSR_APF_INTERACT_INTERACT6_ADDR (CSR_BASE + 0x2030L)
#define CSR_APF_INTERACT_INTERACT6_SIZE 1
static inline uint32_t apf_interact_interact6_read(void) {
	return csr_read_simple((CSR_BASE + 0x2030L));
}
static inline void apf_interact_interact6_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2030L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED6_ADDR (CSR_BASE + 0x2034L)
#define CSR_APF_INTERACT_INTERACT_CHANGED6_SIZE 1
static inline uint32_t apf_interact_interact_changed6_read(void) {
	return csr_read_simple((CSR_BASE + 0x2034L));
}
#define CSR_APF_INTERACT_INTERACT7_ADDR (CSR_BASE + 0x2038L)
#define CSR_APF_INTERACT_INTERACT7_SIZE 1
static inline uint32_t apf_interact_interact7_read(void) {
	return csr_read_simple((CSR_BASE + 0x2038L));
}
static inline void apf_interact_interact7_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2038L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED7_ADDR (CSR_BASE + 0x203cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED7_SIZE 1
static inline uint32_t apf_interact_interact_changed7_read(void) {
	return csr_read_simple((CSR_BASE + 0x203cL));
}
#define CSR_APF_INTERACT_INTERACT8_ADDR (CSR_BASE + 0x2040L)
#define CSR_APF_INTERACT_INTERACT8_SIZE 1
static inline uint32_t apf_interact_interact8_read(void) {
	return csr_read_simple((CSR_BASE + 0x2040L));
}
static inline void apf_interact_interact8_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2040L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED8_ADDR (CSR_BASE + 0x2044L)
#define CSR_APF_INTERACT_INTERACT_CHANGED8_SIZE 1
static inline uint32_t apf_interact_interact_changed8_read(void) {
	return csr_read_simple((CSR_BASE + 0x2044L));
}
#define CSR_APF_INTERACT_INTERACT9_ADDR (CSR_BASE + 0x2048L)
#define CSR_APF_INTERACT_INTERACT9_SIZE 1
static inline uint32_t apf_interact_interact9_read(void) {
	return csr_read_simple((CSR_BASE + 0x2048L));
}
static inline void apf_interact_interact9_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2048L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED9_ADDR (CSR_BASE + 0x204cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED9_SIZE 1
static inline uint32_t apf_interact_interact_changed9_read(void) {
	return csr_read_simple((CSR_BASE + 0x204cL));
}
#define CSR_APF_INTERACT_INTERACT10_ADDR (CSR_BASE + 0x2050L)
#define CSR_APF_INTERACT_INTERACT10_SIZE 1
static inline uint32_t apf_interact_interact10_read(void) {
	return csr_read_simple((CSR_BASE + 0x2050L));
}
static inline void apf_interact_interact10_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2050L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED10_ADDR (CSR_BASE + 0x2054L)
#define CSR_APF_INTERACT_INTERACT_CHANGED10_SIZE 1
static inline uint32_t apf_interact_interact_changed10_read(void) {
	return csr_read_simple((CSR_BASE + 0x2054L));
}
#define CSR_APF_INTERACT_INTERACT11_ADDR (CSR_BASE + 0x2058L)
#define CSR_APF_INTERACT_INTERACT11_SIZE 1
static inline uint32_t apf_interact_interact11_read(void) {
	return csr_read_simple((CSR_BASE + 0x2058L));
}
static inline void apf_interact_interact11_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2058L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED11_ADDR (CSR_BASE + 0x205cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED11_SIZE 1
static inline uint32_t apf_interact_interact_changed11_read(void) {
	return csr_read_simple((CSR_BASE + 0x205cL));
}
#define CSR_APF_INTERACT_INTERACT12_ADDR (CSR_BASE + 0x2060L)
#define CSR_APF_INTERACT_INTERACT12_SIZE 1
static inline uint32_t apf_interact_interact12_read(void) {
	return csr_read_simple((CSR_BASE + 0x2060L));
}
static inline void apf_interact_interact12_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2060L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED12_ADDR (CSR_BASE + 0x2064L)
#define CSR_APF_INTERACT_INTERACT_CHANGED12_SIZE 1
static inline uint32_t apf_interact_interact_changed12_read(void) {
	return csr_read_simple((CSR_BASE + 0x2064L));
}
#define CSR_APF_INTERACT_INTERACT13_ADDR (CSR_BASE + 0x2068L)
#define CSR_APF_INTERACT_INTERACT13_SIZE 1
static inline uint32_t apf_interact_interact13_read(void) {
	return csr_read_simple((CSR_BASE + 0x2068L));
}
static inline void apf_interact_interact13_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2068L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED13_ADDR (CSR_BASE + 0x206cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED13_SIZE 1
static inline uint32_t apf_interact_interact_changed13_read(void) {
	return csr_read_simple((CSR_BASE + 0x206cL));
}
#define CSR_APF_INTERACT_INTERACT14_ADDR (CSR_BASE + 0x2070L)
#define CSR_APF_INTERACT_INTERACT14_SIZE 1
static inline uint32_t apf_interact_interact14_read(void) {
	return csr_read_simple((CSR_BASE + 0x2070L));
}
static inline void apf_interact_interact14_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2070L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED14_ADDR (CSR_BASE + 0x2074L)
#define CSR_APF_INTERACT_INTERACT_CHANGED14_SIZE 1
static inline uint32_t apf_interact_interact_changed14_read(void) {
	return csr_read_simple((CSR_BASE + 0x2074L));
}
#define CSR_APF_INTERACT_INTERACT15_ADDR (CSR_BASE + 0x2078L)
#define CSR_APF_INTERACT_INTERACT15_SIZE 1
static inline uint32_t apf_interact_interact15_read(void) {
	return csr_read_simple((CSR_BASE + 0x2078L));
}
static inline void apf_interact_interact15_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2078L));
}
#define CSR_APF_INTERACT_INTERACT_CHANGED15_ADDR (CSR_BASE + 0x207cL)
#define CSR_APF_INTERACT_INTERACT_CHANGED15_SIZE 1
static inline uint32_t apf_interact_interact_changed15_read(void) {
	return csr_read_simple((CSR_BASE + 0x207cL));
}

/* apf_rtc */
#define CSR_APF_RTC_BASE (CSR_BASE + 0x2800L)
#define CSR_APF_RTC_UNIX_SECONDS_ADDR (CSR_BASE + 0x2800L)
#define CSR_APF_RTC_UNIX_SECONDS_SIZE 1
static inline uint32_t apf_rtc_unix_seconds_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
#define CSR_APF_RTC_DATE_BCD_ADDR (CSR_BASE + 0x2804L)
#define CSR_APF_RTC_DATE_BCD_SIZE 1
static inline uint32_t apf_rtc_date_bcd_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
#define CSR_APF_RTC_TIME_BCD_ADDR (CSR_BASE + 0x2808L)
#define CSR_APF_RTC_TIME_BCD_SIZE 1
static inline uint32_t apf_rtc_time_bcd_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}

/* apf_video */
#define CSR_APF_VIDEO_BASE (CSR_BASE + 0x3000L)
#define CSR_APF_VIDEO_VIDEO_ADDR (CSR_BASE + 0x3000L)
#define CSR_APF_VIDEO_VIDEO_SIZE 1
static inline uint32_t apf_video_video_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
#define CSR_APF_VIDEO_VIDEO_VBLANK_STATUS_OFFSET 0
#define CSR_APF_VIDEO_VIDEO_VBLANK_STATUS_SIZE 1
static inline uint32_t apf_video_video_vblank_status_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t apf_video_video_vblank_status_read(void) {
	uint32_t word = apf_video_video_read();
	return apf_video_video_vblank_status_extract(word);
}
#define CSR_APF_VIDEO_VIDEO_VBLANK_TRIGGERED_OFFSET 1
#define CSR_APF_VIDEO_VIDEO_VBLANK_TRIGGERED_SIZE 1
static inline uint32_t apf_video_video_vblank_triggered_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t apf_video_video_vblank_triggered_read(void) {
	uint32_t word = apf_video_video_read();
	return apf_video_video_vblank_triggered_extract(word);
}
#define CSR_APF_VIDEO_VIDEO_FRAME_COUNTER_OFFSET 2
#define CSR_APF_VIDEO_VIDEO_FRAME_COUNTER_SIZE 30
static inline uint32_t apf_video_video_frame_counter_extract(uint32_t oldword) {
	uint32_t mask = 0x3fffffff;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t apf_video_video_frame_counter_read(void) {
	uint32_t word = apf_video_video_read();
	return apf_video_video_frame_counter_extract(word);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x3800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x3800L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x3804L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3804L));
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x3808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x3808L));
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x4000L)

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x4800L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x4800L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4800L));
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x4804L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x4804L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4804L));
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi0_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_we_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_we_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi0_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_we_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cas_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi0_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_ras_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi0_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_wren_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi0_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_rden_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi0_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_TOP_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_top_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_top_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_top_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_top_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void sdram_dfii_pi0_command_cs_top_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_top_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_BOTTOM_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_bottom_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_bottom_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_bottom_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_bottom_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void sdram_dfii_pi0_command_cs_bottom_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_bottom_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x4808L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x4808L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4808L));
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x480cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x480cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x480cL));
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x4810L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x4810L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4810L));
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x4814L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x4814L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4814L));
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x4818L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x4818L));
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x481cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x481cL));
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x481cL));
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cs_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi1_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_we_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_we_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi1_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_we_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cas_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi1_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_ras_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi1_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_wren_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi1_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_rden_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi1_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_TOP_OFFSET 6
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_TOP_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cs_top_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 6) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cs_top_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cs_top_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cs_top_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 6))) | (mask & plain_value)<< 6 ;
}
static inline void sdram_dfii_pi1_command_cs_top_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cs_top_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_BOTTOM_OFFSET 7
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_BOTTOM_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cs_bottom_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 7) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cs_bottom_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cs_bottom_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cs_bottom_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 7))) | (mask & plain_value)<< 7 ;
}
static inline void sdram_dfii_pi1_command_cs_bottom_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cs_bottom_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x4820L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x4820L));
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4820L));
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x4824L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x4824L));
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4824L));
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x4828L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x4828L));
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4828L));
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x482cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x482cL));
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x482cL));
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x4830L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x4830L));
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x5000L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x5000L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0x5000L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5000L));
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x5004L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0x5004L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5004L));
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x5008L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0x5008L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5008L));
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x500cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x500cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x500cL));
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x5010L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0x5010L));
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x5014L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x5014L));
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x5018L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x5018L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5018L));
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x501cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x501cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x501cL));
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}
#define CSR_TIMER0_UPTIME_LATCH_ADDR (CSR_BASE + 0x5020L)
#define CSR_TIMER0_UPTIME_LATCH_SIZE 1
static inline uint32_t timer0_uptime_latch_read(void) {
	return csr_read_simple((CSR_BASE + 0x5020L));
}
static inline void timer0_uptime_latch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5020L));
}
#define CSR_TIMER0_UPTIME_CYCLES_ADDR (CSR_BASE + 0x5024L)
#define CSR_TIMER0_UPTIME_CYCLES_SIZE 2
static inline uint64_t timer0_uptime_cycles_read(void) {
	uint64_t r = csr_read_simple((CSR_BASE + 0x5024L));
	r <<= 32;
	r |= csr_read_simple((CSR_BASE + 0x5028L));
	return r;
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x5800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x5800L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0x5800L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5800L));
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x5804L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x5804L));
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x5808L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x5808L));
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x580cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x580cL));
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x5810L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0x5810L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5810L));
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x5814L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x5814L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5814L));
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = 0x1;
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = 0x1;
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x5818L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0x5818L));
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x581cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0x581cL));
}

/* video_framebuffer */
#define CSR_VIDEO_FRAMEBUFFER_BASE (CSR_BASE + 0x6000L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_BASE_ADDR (CSR_BASE + 0x6000L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_BASE_SIZE 1
static inline uint32_t video_framebuffer_dma_base_read(void) {
	return csr_read_simple((CSR_BASE + 0x6000L));
}
static inline void video_framebuffer_dma_base_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6000L));
}
#define CSR_VIDEO_FRAMEBUFFER_DMA_LENGTH_ADDR (CSR_BASE + 0x6004L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_LENGTH_SIZE 1
static inline uint32_t video_framebuffer_dma_length_read(void) {
	return csr_read_simple((CSR_BASE + 0x6004L));
}
static inline void video_framebuffer_dma_length_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6004L));
}
#define CSR_VIDEO_FRAMEBUFFER_DMA_ENABLE_ADDR (CSR_BASE + 0x6008L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_ENABLE_SIZE 1
static inline uint32_t video_framebuffer_dma_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x6008L));
}
static inline void video_framebuffer_dma_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6008L));
}
#define CSR_VIDEO_FRAMEBUFFER_DMA_DONE_ADDR (CSR_BASE + 0x600cL)
#define CSR_VIDEO_FRAMEBUFFER_DMA_DONE_SIZE 1
static inline uint32_t video_framebuffer_dma_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x600cL));
}
#define CSR_VIDEO_FRAMEBUFFER_DMA_LOOP_ADDR (CSR_BASE + 0x6010L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_LOOP_SIZE 1
static inline uint32_t video_framebuffer_dma_loop_read(void) {
	return csr_read_simple((CSR_BASE + 0x6010L));
}
static inline void video_framebuffer_dma_loop_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6010L));
}
#define CSR_VIDEO_FRAMEBUFFER_DMA_OFFSET_ADDR (CSR_BASE + 0x6014L)
#define CSR_VIDEO_FRAMEBUFFER_DMA_OFFSET_SIZE 1
static inline uint32_t video_framebuffer_dma_offset_read(void) {
	return csr_read_simple((CSR_BASE + 0x6014L));
}

/* video_framebuffer_vtg */
#define CSR_VIDEO_FRAMEBUFFER_VTG_BASE (CSR_BASE + 0x6800L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_ENABLE_ADDR (CSR_BASE + 0x6800L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_ENABLE_SIZE 1
static inline uint32_t video_framebuffer_vtg_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0x6800L));
}
static inline void video_framebuffer_vtg_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6800L));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_HRES_ADDR (CSR_BASE + 0x6804L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HRES_SIZE 1
static inline uint32_t video_framebuffer_vtg_hres_read(void) {
	return csr_read_simple((CSR_BASE + 0x6804L));
}
static inline void video_framebuffer_vtg_hres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6804L));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_START_ADDR (CSR_BASE + 0x6808L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_START_SIZE 1
static inline uint32_t video_framebuffer_vtg_hsync_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x6808L));
}
static inline void video_framebuffer_vtg_hsync_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6808L));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_END_ADDR (CSR_BASE + 0x680cL)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSYNC_END_SIZE 1
static inline uint32_t video_framebuffer_vtg_hsync_end_read(void) {
	return csr_read_simple((CSR_BASE + 0x680cL));
}
static inline void video_framebuffer_vtg_hsync_end_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x680cL));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSCAN_ADDR (CSR_BASE + 0x6810L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_HSCAN_SIZE 1
static inline uint32_t video_framebuffer_vtg_hscan_read(void) {
	return csr_read_simple((CSR_BASE + 0x6810L));
}
static inline void video_framebuffer_vtg_hscan_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6810L));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_VRES_ADDR (CSR_BASE + 0x6814L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VRES_SIZE 1
static inline uint32_t video_framebuffer_vtg_vres_read(void) {
	return csr_read_simple((CSR_BASE + 0x6814L));
}
static inline void video_framebuffer_vtg_vres_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6814L));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_START_ADDR (CSR_BASE + 0x6818L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_START_SIZE 1
static inline uint32_t video_framebuffer_vtg_vsync_start_read(void) {
	return csr_read_simple((CSR_BASE + 0x6818L));
}
static inline void video_framebuffer_vtg_vsync_start_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6818L));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_END_ADDR (CSR_BASE + 0x681cL)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSYNC_END_SIZE 1
static inline uint32_t video_framebuffer_vtg_vsync_end_read(void) {
	return csr_read_simple((CSR_BASE + 0x681cL));
}
static inline void video_framebuffer_vtg_vsync_end_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x681cL));
}
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSCAN_ADDR (CSR_BASE + 0x6820L)
#define CSR_VIDEO_FRAMEBUFFER_VTG_VSCAN_SIZE 1
static inline uint32_t video_framebuffer_vtg_vscan_read(void) {
	return csr_read_simple((CSR_BASE + 0x6820L));
}
static inline void video_framebuffer_vtg_vscan_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6820L));
}

#endif
